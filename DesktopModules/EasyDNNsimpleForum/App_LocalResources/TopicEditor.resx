<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="addTopic.Text" xml:space="preserve">
    <value>Add topic</value>
  </data>
	<data name="editTopic.Text" xml:space="preserve">
    <value>Edit topic</value>
  </data>
	<data name="addTopic.UniqueViolationText" xml:space="preserve">
    <value>URL Slug already exists!</value>
  </data>
	<data name="addTopic.ValidationText" xml:space="preserve">
    <value>Required fields are empty!</value>
  </data>
	<data name="addTopicSuccess.Text" xml:space="preserve">
    <value>Topic added successfully!</value>
  </data>
	<data name="addUser.Text" xml:space="preserve">
    <value>Add user</value>
  </data>
	<data name="closeAddEditTopic.Text" xml:space="preserve">
    <value>Close</value>
  </data>
	<data name="category.Text" xml:space="preserve">
    <value>Category:</value>
  </data>
	<data name="customPermissions.Text" xml:space="preserve">
    <value>Permissions per topic:</value>
  </data>
	<data name="deleteTopic.Text" xml:space="preserve">
    <value>Delete topic</value>
  </data>
	<data name="deleteTopicSuccess.Text" xml:space="preserve">
    <value>Topic deleted successfully!</value>
  </data>
	<data name="description.Placeholder" xml:space="preserve">
    <value>Enter description</value>
  </data>
	<data name="description.Text" xml:space="preserve">
    <value>Description:</value>
  </data>
	<data name="description.ValidationText" xml:space="preserve">
    <value>Description can't be empty!</value>
  </data>
	<data name="notValidEditMode.Text" xml:space="preserve">
    <value>Item does not exist</value>
  </data>
	<data name="pinTopic.Text" xml:space="preserve">
    <value>Pin topic:</value>
  </data>
	<data name="rolesCanView.HeaderText" xml:space="preserve">
    <value>View Topic</value>
  </data>
	<data name="rolesRoleName.HeaderText" xml:space="preserve">
    <value>Role</value>
  </data>
	<data name="searchUser.Placeholder" xml:space="preserve">
    <value>Search user...</value>
  </data>
	<data name="searchUser.Text" xml:space="preserve">
    <value>Add user:</value>
  </data>
	<data name="slugUrl.Placeholder" xml:space="preserve">
    <value>URL Slug</value>
  </data>
	<data name="slugUrl.Text" xml:space="preserve">
    <value>URL Slug:</value>
  </data>
	<data name="slugUrl.UniqueViolationText" xml:space="preserve">
    <value>URL Slug already exists!</value>
  </data>
	<data name="slugUrl.ValidationText" xml:space="preserve">
    <value>URL Slug can't be empty!</value>
  </data>
	<data name="tags.Placeholder" xml:space="preserve">
    <value>Add or search tag...</value>
  </data>
	<data name="tags.Text" xml:space="preserve">
    <value>Tags:</value>
  </data>
	<data name="title.Placeholder" xml:space="preserve">
    <value>Enter title</value>
  </data>
	<data name="title.Text" xml:space="preserve">
    <value>Title:</value>
  </data>
	<data name="title.ValidationText" xml:space="preserve">
    <value>Title can't be empty!</value>
  </data>
	<data name="updateTopic.Text" xml:space="preserve">
    <value>Save</value>
  </data>
	<data name="updateTopic.ValidationText" xml:space="preserve">
    <value>Required fields are empty!</value>
  </data>
	<data name="updateTopicSuccess.Text" xml:space="preserve">
    <value>Topic updated successfully!</value>
  </data>
	<data name="usersCanView.HeaderText" xml:space="preserve">
    <value>View Topic</value>
  </data>
	<data name="usersUserDisplayName.HeaderText" xml:space="preserve">
    <value>User</value>
  </data>
	<data name="delete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
	<data name="deleteTopicConfirm.Text" xml:space="preserve">
    <value>Yes</value>
  </data>
	<data name="deleteTopicDeny.Text" xml:space="preserve">
    <value>No</value>
  </data>
	<data name="deleteTopicPrompt.Text" xml:space="preserve">
    <value>Are you sure?</value>
  </data>
	<data name="deleteTopicNonEmptyPrompt.Text" xml:space="preserve">
    <value>All comments in this topic will be deleted.</value>
  </data>
	<data name="cannotAddTopicNoCategory.Text" xml:space="preserve">
    <value>You can't add topics because no categories have been created or you don't have permission to add topics.</value>
  </data>
	<data name="cannotAddTopicNoPermissions.Text" xml:space="preserve">
    <value>You don't have permissions to add or edit topics</value>
  </data>
	<data name="category.ValidationText" xml:space="preserve">
    <value>Please select a category</value>
  </data>
	<data name="selectCategory.Text" xml:space="preserve">
    <value>Select a category</value>
  </data>
	<data name="category.Help" xml:space="preserve">
    <value>Category the topic belongs to.  One topic can be added to a single category</value>
  </data>
	<data name="customPermissions.Help" xml:space="preserve">
    <value>Manage whether or not the topic has custom permissions. Permissions per topic override permissions per category</value>
  </data>
	<data name="description.Help" xml:space="preserve">
    <value>Topic description that will be displayed under the title</value>
  </data>
	<data name="pinTopic.Help" xml:space="preserve">
    <value>Manage whether or not the topic is pinned to the top</value>
  </data>
	<data name="searchUser.Help" xml:space="preserve">
    <value>Searches the existing users and adds them to user permissions if needed</value>
  </data>
	<data name="slugUrl.Help" xml:space="preserve">
    <value>The URL that will be displayed in the address bar</value>
  </data>
	<data name="tags.Help" xml:space="preserve">
    <value>Select, add and manage topic tags. These keywords improve the search efficiency as well as the definition of the topics related to the original topic. The number of tags per topic is limited to 10</value>
  </data>
	<data name="title.Help" xml:space="preserve">
    <value>The title to be displayed</value>
  </data>
	<data name="addAndViewTopic.Text" xml:space="preserve">
    <value>Add and view</value>
  </data>
	<data name="updateAndViewTopic.Text" xml:space="preserve">
    <value>Save and view</value>
  </data>
	<data name="slugUrl.SizeViolationText" xml:space="preserve">
    <value>Field exceeds the maximum limit</value>
  </data>
	<data name="title.SizeViolationText" xml:space="preserve">
    <value>Field exceeds the maximum limit</value>
  </data>
	<data name="slugUrl.OnDisabledChangeViolationText" xml:space="preserve">
    <value>Forbidden!</value>
  </data>
	<data name="addTopicBaseTitle.Text" xml:space="preserve">
    <value>New topic</value>
  </data>
	<data name="disableComments.Help" xml:space="preserve">
    <value>Disable comments. This option can be toggled if the user doesn't want the commenting option to be enabled in topics such as forum rules or announcements</value>
  </data>
	<data name="disableComments.Text" xml:space="preserve">
    <value>Disable comments:</value>
  </data>
	<data name="showAsLockedTopic.Help" xml:space="preserve">
    <value>Topic is displayed as Locked to users with no view permissions. If this option is enabled and the user doesn't have the permission to view the topic, the topic will be shown in the topic list as locked and the user won't be able to see its details</value>
  </data>
	<data name="showAsLockedTopic.Text" xml:space="preserve">
    <value>Show as locked topic:</value>
  </data>
	<data name="cannotChangeUrlSlug.Text" xml:space="preserve">
    <value>Can't change URL Slug </value>
  </data>
	<data name="undefinedTopic.Text" xml:space="preserve">
    <value>Topic doesn't exist</value>
  </data>
	<data name="uniqueViolation.Text" xml:space="preserve">
    <value>URL Slug already exists</value>
  </data>
	<data name="undefinedCategory.Text" xml:space="preserve">
    <value>Selected category doesn't exist. Please choose another one</value>
  </data>
	<data name="tags.CantAddMoreTags" xml:space="preserve">
    <value>Maximum number of tags reached</value>
  </data>
</root>