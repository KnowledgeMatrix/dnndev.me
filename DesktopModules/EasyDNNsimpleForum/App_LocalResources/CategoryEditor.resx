<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="addCategory.Text" xml:space="preserve">
    <value>Add category</value>
  </data>
	<data name="editCategory.Text" xml:space="preserve">
    <value>Edit category</value>
  </data>
	<data name="addCategory.ValidationText" xml:space="preserve">
    <value>Required fields are empty!</value>
  </data>
	<data name="addCategorySuccess.Text" xml:space="preserve">
    <value>Category added successfully!</value>
  </data>
	<data name="addUser.Text" xml:space="preserve">
    <value>Add user</value>
  </data>
	<data name="closeAddEditCategory.Text" xml:space="preserve">
    <value>Close</value>
  </data>
	<data name="color.Text" xml:space="preserve">
    <value>Color:</value>
  </data>
	<data name="deleteCategory.Text" xml:space="preserve">
    <value>Delete category</value>
  </data>
	<data name="deleteCategorySuccess.Text" xml:space="preserve">
    <value>Category deleted successfully!</value>
  </data>
	<data name="description.Placeholder" xml:space="preserve">
    <value>Enter description</value>
  </data>
	<data name="description.Text" xml:space="preserve">
    <value>Description:</value>
  </data>
	<data name="description.ValidationText" xml:space="preserve">
    <value>Description can't be empty!</value>
  </data>
	<data name="module.Help" xml:space="preserve">
    <value>Module help</value>
  </data>
	<data name="module.Text" xml:space="preserve">
    <value>Module</value>
  </data>
	<data name="name.Placeholder" xml:space="preserve">
    <value>Enter name</value>
  </data>
	<data name="name.Text" xml:space="preserve">
    <value>Name:</value>
  </data>
	<data name="name.ValidationText" xml:space="preserve">
    <value>Name can't be empty!</value>
  </data>
	<data name="notValidEditMode.Text" xml:space="preserve">
    <value>Item doesn't exist</value>
  </data>
	<data name="permissions.Text" xml:space="preserve">
    <value>Permissions:</value>
  </data>
	<data name="portal.Help" xml:space="preserve">
    <value>Portal help</value>
  </data>
	<data name="portal.Text" xml:space="preserve">
    <value>Portal</value>
  </data>
	<data name="rolesCanAddTopic.HeaderText" xml:space="preserve">
    <value>Can add topic</value>
  </data>
	<data name="rolesCanView.HeaderText" xml:space="preserve">
    <value>Can view</value>
  </data>
	<data name="rolesRoleName.HeaderText" xml:space="preserve">
    <value>Role</value>
  </data>
	<data name="searchUser.Placeholder" xml:space="preserve">
    <value>Search user...</value>
  </data>
	<data name="searchUser.Text" xml:space="preserve">
    <value>Add user:</value>
  </data>
	<data name="updateCategory.Text" xml:space="preserve">
    <value>Save</value>
  </data>
	<data name="updateCategory.ValidationText" xml:space="preserve">
    <value>Required fields are empty!</value>
  </data>
	<data name="updateCategorySuccess.Text" xml:space="preserve">
    <value>Category updated successfully!</value>
  </data>
	<data name="usersCanAddTopic.HeaderText" xml:space="preserve">
    <value>Can add topic</value>
  </data>
	<data name="usersCanView.HeaderText" xml:space="preserve">
    <value>Can view</value>
  </data>
	<data name="usersUserDisplayName.HeaderText" xml:space="preserve">
    <value>User</value>
  </data>
	<data name="usersUserDisplayNameDelete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
	<data name="deleteCategoryConfirm.Text" xml:space="preserve">
    <value>Yes</value>
  </data>
	<data name="deleteCategoryDeny.Text" xml:space="preserve">
    <value>No</value>
  </data>
	<data name="deleteCategoryPrompt.Text" xml:space="preserve">
    <value>Are you sure?</value>
  </data>
	<data name="deleteCategoryNonEmptyPrompt.Text" xml:space="preserve">
    <value>All topics in this category will be deleted</value>
  </data>
	<data name="slugUrl.Placeholder" xml:space="preserve">
    <value>URL Slug</value>
  </data>
	<data name="slugUrl.Text" xml:space="preserve">
    <value>URL Slug:</value>
  </data>
	<data name="slugUrl.UniqueViolationText" xml:space="preserve">
    <value>URL Slug already exists!</value>
  </data>
	<data name="slugUrl.ValidationText" xml:space="preserve">
    <value>URL Slug can't be empty!</value>
  </data>
	<data name="color.Help" xml:space="preserve">
    <value>Assign a color to the category. Selecting the color of the category will result in it being visible beside the category name in the category list view</value>
  </data>
	<data name="description.Help" xml:space="preserve">
    <value>Category description that will be displayed under the name</value>
  </data>
	<data name="name.Help" xml:space="preserve">
    <value>The name to be displayed</value>
  </data>
	<data name="permissions.Help" xml:space="preserve">
    <value>Manage category permissions. Set permissions that enable the user to view the category and add topics</value>
  </data>
	<data name="searchUser.Help" xml:space="preserve">
    <value>Searches the existing users and adds them to user permissions if needed</value>
  </data>
	<data name="slugUrl.Help" xml:space="preserve">
    <value>The URL that will be displayed in the address bar</value>
  </data>
	<data name="addAndViewCategory.Text" xml:space="preserve">
    <value>Add and view</value>
  </data>
	<data name="updateAndViewCategory.Text" xml:space="preserve">
    <value>Save and view</value>
  </data>
	<data name="name.SizeViolationText" xml:space="preserve">
    <value>Field exceeds the maximum limit</value>
  </data>
	<data name="slugUrl.SizeViolationText" xml:space="preserve">
    <value>Field exceeds the maximum limit</value>
  </data>
	<data name="addCategoryBaseTitle.Text" xml:space="preserve">
    <value>New category</value>
  </data>
	<data name="contactSupport.Text" xml:space="preserve">
    <value>Contact support</value>
  </data>
	<data name="showAsLockedCategory.Help" xml:space="preserve">
    <value>Category is displayed as Locked to users with no view permissions. Choose amongst the following options:&lt;ul&gt;&lt;li&gt;Disabled - If this option is selected, the user will not be able to see the category if they don't have the necessary permissions&lt;/li&gt;&lt;li&gt;Show locked category and hide topics - If this option is selected, the user will be able to see the categories marked as locked, but not their topics&lt;/li&gt;&lt;li&gt;Show locked category and locked topics - If this option is selected, the user will be able to see the categories marked as locked as well as their respective locked topics&lt;/li&gt;&lt;/ul&gt;</value>
  </data>
	<data name="showAsLockedCategory.Text" xml:space="preserve">
    <value>Show as locked category:</value>
  </data>
	<data name="undefinedCategory.Text" xml:space="preserve">
    <value>Category doesn't exist</value>
  </data>
	<data name="uniqueViolation.Text" xml:space="preserve">
    <value>URL Slug already exists</value>
  </data>
</root>