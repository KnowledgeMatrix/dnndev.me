<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SitemapFileInvalid.Text" xml:space="preserve">
    <value>Unable to validate Sitemap file. Check the Sitemap is available, well formed and a valid Sitemap file. You can see Sitemap format on http://www.sitemaps.org/protocol.php</value>
  </data>
  <data name="SitemapUrlInvalid.Text" xml:space="preserve">
    <value>Invalid Sitemap URL format (use: 'http://www.site.com/sitemap.aspx')</value>
  </data>
  <data name="UrlAlreadyExists.ErrorMessage" xml:space="preserve">
    <value>URL already exists. Please enter a different URL.</value>
  </data>
  <data name="valUrl.ErrorMessage" xml:space="preserve">
    <value>Invalid URL format (use: 'http://www.site.com')</value>
  </data>
  <data name="VersioningGetError.Text" xml:space="preserve">
    <value>Failed to get versioning details</value>
  </data>
  <data name="VersioningSaveError.Text" xml:space="preserve">
    <value>Failed to save the versioning details</value>
  </data>
  <data name="DupFileNotExists.Text" xml:space="preserve">
    <value>Duplicates file not found.</value>
  </data>
  <data name="DupPatternAlreadyExists.Text" xml:space="preserve">
    <value>Duplicate pattern already exists.</value>
  </data>
  <data name="valDup.ErrorMessage" xml:space="preserve">
    <value>Invalid Regular Expression pattern</value>
  </data>
  <data name="errorDuplicateDirectory.Text" xml:space="preserve">
    <value>Directory duplicated. This directory '{0}' is already added</value>
  </data>
  <data name="errorDuplicateFileExtension.Text" xml:space="preserve">
    <value>This file extension has been added</value>
  </data>
  <data name="errorExcludeDirectory.Text" xml:space="preserve">
    <value>Directory excluded. This directory '{0}' is already excluded by an ancestor directory</value>
  </data>
  <data name="errorIncludeDirectory.Text" xml:space="preserve">
    <value>Directory included. This directory '{0}' is already included by an ancestor directory</value>
  </data>
  <data name="errorNotAllowedFileExtension.Text" xml:space="preserve">
    <value>The file type you are trying to add is not allowable for upload within the system.  Please first add this to the allowable file extensions in your host settings or contact your host administrator for assistance.</value>
  </data>
  <data name="errorRequiredDirectory.Text" xml:space="preserve">
    <value>Directory required</value>
  </data>
  <data name="errorRequiredFileExtension.Text" xml:space="preserve">
    <value>File extension required</value>
  </data>
  <data name="tooltipContentCrawlingAvailable.Text" xml:space="preserve">
    <value>Content Crawling is available</value>
  </data>
  <data name="tooltipContentCrawlingUnavailable.Text" xml:space="preserve">
    <value>Content Crawling is unavailable</value>
  </data>
  <data name="AddDirectory.Label" xml:space="preserve">
    <value>Add Directory</value>
  </data>
  <data name="AddDuplicate.Label" xml:space="preserve">
    <value>Add Regex Pattern</value>
  </data>
  <data name="AddFileType.Label" xml:space="preserve">
    <value>Add File Type</value>
  </data>
  <data name="AddUrl.Label" xml:space="preserve">
    <value>Add Url</value>
  </data>
  <data name="Cancel.Button" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="DeleteCancel.Text" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="DeleteConfirm.Text" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="DeleteWarning.Text" xml:space="preserve">
    <value>Are you sure you want to delete {0}?</value>
  </data>
  <data name="Description.HelpText" xml:space="preserve">
    <value>Decription of the regex (usually the module name that will allow spidering of)</value>
  </data>
  <data name="Description.Label" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Directory.Label" xml:space="preserve">
    <value>Directory</value>
  </data>
  <data name="DnnImpersonation.Label" xml:space="preserve">
    <value>DNN Impersonation</value>
  </data>
  <data name="DnnRoleImpersonation.HelpText" xml:space="preserve">
    <value>For Local Site Only: you can tell the spider to impersonate a DNN role (make sure there exists a valid user for the role selected), in order to spider pages that otherwise would require a login.</value>
  </data>
  <data name="DnnRoleImpersonation.Label" xml:space="preserve">
    <value>DNN Role Impersonation</value>
  </data>
  <data name="Duplicates.Header" xml:space="preserve">
    <value>Duplicates</value>
  </data>
  <data name="Duplicates.HelpText" xml:space="preserve">
    <value>Many modules use the same page to post dynamic content. This feature allows you exclude particular URLs ( or parts thereof ) from being indexed by regular expression patterns.</value>
  </data>
  <data name="EnableFileVersioning.HelpText" xml:space="preserve">
    <value>Set whether or not File versioning is enabled or disabled for the site</value>
  </data>
  <data name="EnableFileVersioning.Text" xml:space="preserve">
    <value>Enable File Versioning:</value>
  </data>
  <data name="EnablePageVersioning.HelpText" xml:space="preserve">
    <value>Set whether or not Page versioning is enabled or disabled for the site</value>
  </data>
  <data name="EnablePageVersioning.Text" xml:space="preserve">
    <value>Enable Page Versioning:</value>
  </data>
  <data name="EnableSpidering.HelpText" xml:space="preserve">
    <value>Enable Spidering of this URL. If checked, the spider will create a new index for this site on its next run. If Unchecked, teh site will not be indexed, but any existing index will still be available for searches.</value>
  </data>
  <data name="EnableSpidering.Label" xml:space="preserve">
    <value>Enable Spidering</value>
  </data>
  <data name="ExcludedDirectories.HelpText" xml:space="preserve">
    <value>This feature allows you to manage directories that you would like to be excluded from the main search box. These are still searchable from within the DAM module.</value>
  </data>
  <data name="ExcludedDirectories.Label" xml:space="preserve">
    <value>Excluded Directories</value>
  </data>
  <data name="ExcludedFileExtensions.HelpText" xml:space="preserve">
    <value>This feature allows you to specify file extensions for files that you do not want to be displayed in search results.</value>
  </data>
  <data name="ExcludedFileExtensions.Label" xml:space="preserve">
    <value>Excluded File Extensions</value>
  </data>
  <data name="FileExtension.Label" xml:space="preserve">
    <value>File Extension</value>
  </data>
  <data name="FileType.Label" xml:space="preserve">
    <value>File Type</value>
  </data>
  <data name="IncludedDirectories.HelpText" xml:space="preserve">
    <value>This feature allows you to manage directories that you would like to be indexed by the search.</value>
  </data>
  <data name="IncludedDirectories.Label" xml:space="preserve">
    <value>Included Directories</value>
  </data>
  <data name="IncludedFileExtensions.HelpText" xml:space="preserve">
    <value>This feature makes the content of the documents in your system available to search. Here you may add file type extensions. Provided you have the appropriate iFilters installed on your system, the content will be crawled and available to be searched.</value>
  </data>
  <data name="IncludedFileExtensions.Label" xml:space="preserve">
    <value>Included File Extensions</value>
  </data>
  <data name="MaxNumFileVersions.HelpText" xml:space="preserve">
    <value>Set the number of file versions to keep. It must be between 5 and 25</value>
  </data>
  <data name="MaxNumFileVersions.Text" xml:space="preserve">
    <value>Maximum Number of File Versions Kept</value>
  </data>
  <data name="MaxNumPageVersions.HelpText" xml:space="preserve">
    <value>Set the number of page versions to keep. It must be between 1 and 20</value>
  </data>
  <data name="MaxNumPageVersions.Text" xml:space="preserve">
    <value>Maximum Number of Page Versions Kept</value>
  </data>
  <data name="NoFolderSelected.Label" xml:space="preserve">
    <value>&lt; Select A Directory &gt;</value>
  </data>
  <data name="RegexPattern.HelpText" xml:space="preserve">
    <value>The regular expression that will allow the spider to recognize the parameters that the module uses to post to the same page and create dynamic content.</value>
  </data>
  <data name="RegexPattern.Label" xml:space="preserve">
    <value>Regex Pattern</value>
  </data>
  <data name="Save.Button" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SelectFolder.Notify" xml:space="preserve">
    <value>Please select a folder.</value>
  </data>
  <data name="SitemapUrl.HelpText" xml:space="preserve">
    <value>Enter the URL of the sitemap file to use</value>
  </data>
  <data name="SitemapUrl.Label" xml:space="preserve">
    <value>Sitemap URL</value>
  </data>
  <data name="UnsavedChanges.Text" xml:space="preserve">
    <value>You have unsaved changes. Are you sure you want to continue?</value>
  </data>
  <data name="Url.HelpText" xml:space="preserve">
    <value>URL of the site to be spidered.</value>
  </data>
  <data name="Url.Label" xml:space="preserve">
    <value>Url</value>
  </data>
  <data name="UrlPaths.Header" xml:space="preserve">
    <value>Url Paths</value>
  </data>
  <data name="UrlPaths.HelpText" xml:space="preserve">
    <value>This feature allows you to specify sites to be searchable.</value>
  </data>
  <data name="Versioning.Header" xml:space="preserve">
    <value>Versioning</value>
  </data>
  <data name="WindowsAuth.Label" xml:space="preserve">
    <value>Windows Auth</value>
  </data>
  <data name="WindowsAuthentication.HelpText" xml:space="preserve">
    <value>Check this option if the Site's IIS security settings use Integrated Windows Authentication. If you leave user name and password blank, the Default Credentials Cache of the local server will be used.</value>
  </data>
  <data name="WindowsAuthentication.Label" xml:space="preserve">
    <value>Windows Authentication</value>
  </data>
  <data name="WindowsDomain.HelpText" xml:space="preserve">
    <value>Enter the Computer Domain of the user account that will be used.</value>
  </data>
  <data name="WindowsDomain.Label" xml:space="preserve">
    <value>Windows Domain (optional)</value>
  </data>
  <data name="WindowsUserAccount.HelpText" xml:space="preserve">
    <value>Enter the Login Name (user account) that will be used.</value>
  </data>
  <data name="WindowsUserAccount.Label" xml:space="preserve">
    <value>Windows User Account (optional)</value>
  </data>
  <data name="WindowsUserPassword.HelpText" xml:space="preserve">
    <value>Enter the Password that will be used.</value>
  </data>
  <data name="WindowsUserPassword.Label" xml:space="preserve">
    <value>Windows User Password (optional)</value>
  </data>
  <data name="ContentCrawlingUnavailable.Text" xml:space="preserve">
    <value>Content crawling is unavailable.</value>
  </data>
</root>