<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnSave.Text" xml:space="preserve">
    <value>Speichern</value>
  </data>
  <data name="lblDefaultHeight.Help" xml:space="preserve">
    <value>Im Falle eines nicht mit einer bestimmten Höhe dieser Höhe wird stattdessen verwendet werden.</value>
  </data>
  <data name="lblDefaultHeight.Text" xml:space="preserve">
    <value>Standard-Paket Höhe</value>
  </data>
  <data name="lblDefaultLength.Help" xml:space="preserve">
    <value>Im Falle eines nicht mit einer Länge angegeben dieser Länge wird stattdessen verwendet werden.</value>
  </data>
  <data name="lblDefaultLength.Text" xml:space="preserve">
    <value>Standard-Paket Länge</value>
  </data>
  <data name="lblDefaultSizes.Text" xml:space="preserve">
    <value>Im Falle eines Produkts im Warenkorb nicht Benutzer mit einer Höhe, Breite, Länge oder Gewicht Eigenschaft angegeben die unter Standardeinstellungen wird stattdessen verwendet werden, um das Paket benötigt, um Verkehr zu berechnen. Die Maßeinheit ist in der Filiale Admin-Einstellungen definiert. Beachten Sie die max Gewicht für diese Versandart Anbieter ist 70lb.</value>
  </data>
  <data name="lblDefaultWeight.Help" xml:space="preserve">
    <value>Im Falle eines nicht mit einem Gewicht angegeben dieses Gewicht wird stattdessen verwendet werden.</value>
  </data>
  <data name="lblDefaultWeight.Text" xml:space="preserve">
    <value>Standard Paket Gewicht</value>
  </data>
  <data name="lblDefaultWidth.Help" xml:space="preserve">
    <value>Im Falle eines nicht mit einer Breite angegeben dieser Breite wird stattdessen verwendet werden.</value>
  </data>
  <data name="lblDefaultWidth.Text" xml:space="preserve">
    <value>Standard-Paket Breite</value>
  </data>
  <data name="lblInfoMessage.Text" xml:space="preserve">
    <value>Diese Versand-Anbieter ermöglicht Versand in Echtzeit mit USPS berechnet werden. Diese Versand Anbieter unterliegen Sie der Anmeldung für ein Konto mit USPS: https: / / secure.shippingapis.com / registration /</value>
  </data>
  <data name="lblServiceEndPoint.Help" xml:space="preserve">
    <value>Die URL des Web-Service-Endpunkt USPS, wird diese zur Verfügung gestellt werden, wenn Sie für ein Konto mit USPS registrieren.</value>
  </data>
  <data name="lblServiceEndPoint.Text" xml:space="preserve">
    <value>USPS Webservice Endpoint</value>
  </data>
  <data name="lblShippingFromAddress1.Help" xml:space="preserve">
    <value>Die 1. Zeile der Lieferadresse, werden alle Kosten von hier berechnet werden.</value>
  </data>
  <data name="lblShippingFromAddress1.Text" xml:space="preserve">
    <value>Versandkosten ab Adresse 1</value>
  </data>
  <data name="lblShippingFromCity.Help" xml:space="preserve">
    <value>Die Stadt sind wir aus der Schifffahrt.</value>
  </data>
  <data name="lblShippingFromCity.Text" xml:space="preserve">
    <value>Liefer Von der Stadt</value>
  </data>
  <data name="lblShippingFromCountry.Help" xml:space="preserve">
    <value>Das Land, das wir Versandkosten von</value>
  </data>
  <data name="lblShippingFromCountry.Text" xml:space="preserve">
    <value>Versand aus der Grafschaft</value>
  </data>
  <data name="lblShippingFromPostcode.Help" xml:space="preserve">
    <value>Die Postleitzahl wir Versandkosten von sich</value>
  </data>
  <data name="lblShippingFromPostcode.Text" xml:space="preserve">
    <value>Versandkosten ab Postleitzahl</value>
  </data>
  <data name="lblUspsUsername.Help" xml:space="preserve">
    <value>USPS api Benutzername, beachten Sie dies nicht Ihren Benutzernamen an die USPS Website, sondern die API Login Benutzernamen, den Sie mit, wenn Sie sich für ein Konto zur Verfügung gestellt werden.</value>
  </data>
  <data name="lblUspsUsername.Text" xml:space="preserve">
    <value>USPS Benutzername</value>
  </data>
  <data name="rf.Text" xml:space="preserve">
    <value>Erforderlich.</value>
  </data>
</root>