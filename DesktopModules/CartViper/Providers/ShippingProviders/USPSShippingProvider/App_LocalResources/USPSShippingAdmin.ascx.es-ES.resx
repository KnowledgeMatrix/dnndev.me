<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnSave.Text" xml:space="preserve">
    <value>Guardar</value>
  </data>
  <data name="lblDefaultHeight.Help" xml:space="preserve">
    <value>En el caso de un producto que no tiene una altura especificada esta altura se utilizará en su lugar.</value>
  </data>
  <data name="lblDefaultHeight.Text" xml:space="preserve">
    <value>Altura del paquete por defecto</value>
  </data>
  <data name="lblDefaultLength.Help" xml:space="preserve">
    <value>En el caso de un producto que no tengan una longitud especificada esta longitud se utilizará en su lugar.</value>
  </data>
  <data name="lblDefaultLength.Text" xml:space="preserve">
    <value>Duración del paquete por defecto</value>
  </data>
  <data name="lblDefaultSizes.Text" xml:space="preserve">
    <value>En el caso de un producto en el carrito de los usuarios que no tengan una altura, anchura, longitud o la propiedad de peso especificado los siguientes valores por defecto, se utilizarán para calcular el paquete necesario para el transporte. La unidad de medida se define en la configuración de administrador de la tienda. Tenga en cuenta el peso máximo para este proveedor de envío es 70 libras.</value>
  </data>
  <data name="lblDefaultWeight.Help" xml:space="preserve">
    <value>En el caso de un producto que no tiene un peso especificado este peso se utilizará en su lugar.</value>
  </data>
  <data name="lblDefaultWeight.Text" xml:space="preserve">
    <value>Peso del paquete por defecto</value>
  </data>
  <data name="lblDefaultWidth.Help" xml:space="preserve">
    <value>En el caso de un producto que no tiene un ancho especificado esta anchura se utilizará en su lugar.</value>
  </data>
  <data name="lblDefaultWidth.Text" xml:space="preserve">
    <value>Ancho del paquete por defecto</value>
  </data>
  <data name="lblInfoMessage.Text" xml:space="preserve">
    <value>Este proveedor permite el envío de envío se calcula en tiempo real usando USPS. Este proveedor de envío está sujeto a la firma en una cuenta con USPS: https: / / secure.shippingapis.com / registro /</value>
  </data>
  <data name="lblServiceEndPoint.Help" xml:space="preserve">
    <value>La dirección URL del extremo de servicio web de USPS, éste será proporcionado a usted cuando se registra para una cuenta con USPS.</value>
  </data>
  <data name="lblServiceEndPoint.Text" xml:space="preserve">
    <value>USPS extremos de servicio web</value>
  </data>
  <data name="lblShippingFromAddress1.Help" xml:space="preserve">
    <value>La 1 ª línea de la dirección de envío, todos los costos se calcularán a partir de aquí.</value>
  </data>
  <data name="lblShippingFromAddress1.Text" xml:space="preserve">
    <value>Envío de una Dirección</value>
  </data>
  <data name="lblShippingFromCity.Help" xml:space="preserve">
    <value>La ciudad que son de envío de.</value>
  </data>
  <data name="lblShippingFromCity.Text" xml:space="preserve">
    <value>Envío de la ciudad</value>
  </data>
  <data name="lblShippingFromCountry.Help" xml:space="preserve">
    <value>El país que estamos enviando a</value>
  </data>
  <data name="lblShippingFromCountry.Text" xml:space="preserve">
    <value>Desde el Condado de envío</value>
  </data>
  <data name="lblShippingFromPostcode.Help" xml:space="preserve">
    <value>El código postal que se envío de</value>
  </data>
  <data name="lblShippingFromPostcode.Text" xml:space="preserve">
    <value>Envío de Código Postal</value>
  </data>
  <data name="lblUspsUsername.Help" xml:space="preserve">
    <value>USPS api nombre de usuario, tenga en cuenta este no es su nombre de usuario para iniciar sesión en el sitio web de USPS, pero el nombre de usuario api se le proporciona cuando se registra para una cuenta.</value>
  </data>
  <data name="lblUspsUsername.Text" xml:space="preserve">
    <value>USPS Nombre de usuario</value>
  </data>
  <data name="rf.Text" xml:space="preserve">
    <value>Requerido.</value>
  </data>
</root>