<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnSaveShippingFee.Text" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="ErrorCost.Text" xml:space="preserve">
    <value>You must provide a valid numeric cost (do not include currency symbols).</value>
  </data>
  <data name="ErrorMaxWeight.Text" xml:space="preserve">
    <value>You must provide a valid numeric {0}.</value>
  </data>
  <data name="ErrorMinWeight.Text" xml:space="preserve">
    <value>You must provide a valid numeric {0}.</value>
  </data>
  <data name="lblCostTitle.Text" xml:space="preserve">
    <value>Rate</value>
  </data>
  <data name="lblDelete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="lblFee.Text" xml:space="preserve">
    <value>Shipping Fee</value>
  </data>
  <data name="lblMaxWeightTitle.Text" xml:space="preserve">
    <value>Max. Weight</value>
  </data>
  <data name="lblMinWeightTitle.Text" xml:space="preserve">
    <value>Min. Weight</value>
  </data>
  <data name="lnkAddNew.Text" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="lblFreeShipping.Help" xml:space="preserve">
    <value>If selected shipping will not be charged on any orders regardless of the weight of the cart or the shipping destination address.</value>
  </data>
  <data name="lblFreeShipping.Text" xml:space="preserve">
    <value>Free Shipping</value>
  </data>
  <data name="lblFreeShippingOver.Help" xml:space="preserve">
    <value>Enter a value so when the SUBTOTAL of the cart is over this amount shipping will be free, otherwise shipping will be charged at the rates defined below. This is an optional settings.</value>
  </data>
  <data name="lblFreeShippingOver.Text" xml:space="preserve">
    <value>Free Shipping Over</value>
  </data>
  <data name="lblCountryTitle.Text" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="lblShippingValues.Help" xml:space="preserve">
    <value>Below are the shipping rates that will be applied to the cart at the point of checkout. Here you can specify shipping rates that are based on the weight of the cart OR the subtotal of the cart, you can add multiple rates per country. If a valid shipping rate is not entered for a country and a user tries to checkout their order will NOT be taken.</value>
  </data>
  <data name="lblShippingValues.Text" xml:space="preserve">
    <value>Shipping Rates </value>
  </data>
  <data name="ErrorRatePriority.Text" xml:space="preserve">
    <value>You must provide a priority e.g. standard</value>
  </data>
  <data name="lblShippingRatePriorityTitle.Text" xml:space="preserve">
    <value>Priority</value>
  </data>
  <data name="lblTextControlInfo.Text" xml:space="preserve">
    <value>&lt;p&gt;Shipping bands can be defined at a zip code level or at a country level, first Cart Viper will check 
the users zipcode for a matching zipcode band and charge them the defined rate, if no matching zip code
bands are found Cart Viper will then check the country shipping bands.&lt;/p&gt;
&lt;p&gt;You are able to define shipping bands by the sum weight of the basket or the subtotal of the items in the basket and the shipping destination or the number of items in the cart. &lt;/p&gt;&lt;p&gt;The cost of the shipping can be entered as a flat rate for each band, or if "Cost as % of Subtotal" is selected, the cost will be based on the rate you enter as a % of the users subtotal. e.g. shipping costs 5% of the cost the subtotal of the users cart.&lt;/p&gt; &lt;p&gt;You are also able to define a priority allowing you to create different banding for, saver, next day, etc delivery methods for each country. &lt;/p&gt;&lt;p&gt;By selecting a DNN role the customer must be in this role in order to meet the criteria for the band, if no bands are defined without a DNN role anonymous users will NOT be able to checkout.&lt;/p&gt;&lt;p&gt; Note if a delivery band is not specified for a country the user will not be able to place their order, however they will be prompted to contact the store to receive a shipping quote. By using the ROW country code, if a band is not defined for the country this will be used instead.&lt;/p&gt;</value>
  </data>
  <data name="lblCartSubtotal.Text" xml:space="preserve">
    <value>Cart Subtotal</value>
  </data>
  <data name="lblCartWeight.Text" xml:space="preserve">
    <value>Cart Weight</value>
  </data>
  <data name="lblChargeBy.Help" xml:space="preserve">
    <value>Either calculate shipping by the cart subtotal or the sum weight of the products in the cart or the total number of items in the cart.</value>
  </data>
  <data name="lblChargeBy.Text" xml:space="preserve">
    <value>Calculate Shipping By</value>
  </data>
  <data name="lblMaxSubtotalTitle.Text" xml:space="preserve">
    <value>Max. Subtotal</value>
  </data>
  <data name="lblMinSubtotalTitle.Text" xml:space="preserve">
    <value>Min. Subtotal</value>
  </data>
  <data name="rdShipBySubtotal.Text" xml:space="preserve">
    <value>Cart Subtotal</value>
  </data>
  <data name="rdShipByWeight.Text" xml:space="preserve">
    <value>Cart Weight</value>
  </data>
  <data name="lblCostAsPercentageTitle.Text" xml:space="preserve">
    <value>Cost as % of Subtotal</value>
  </data>
  <data name="lblDnnRoleTitle.Text" xml:space="preserve">
    <value>DNN Role</value>
  </data>
  <data name="lblDnnRoleNone.Text" xml:space="preserve">
    <value>--None--</value>
  </data>
  <data name="lblMaxItemsTitle.Text" xml:space="preserve">
    <value>N/A</value>
  </data>
  <data name="lblMinItemsTitle.Text" xml:space="preserve">
    <value>N/A</value>
  </data>
  <data name="rdNoItemInCart.Text" xml:space="preserve">
    <value>No: Items In Cart</value>
  </data>
  <data name="lblZipCodeBands.Help" xml:space="preserve">
    <value>Here you can enter a comma separated list of shipping bands based on a customers zipcode, note if a band is not entered for a zipcode we will then check the standard country shippinging bands.</value>
  </data>
  <data name="lblZipCodeBands.Text" xml:space="preserve">
    <value>Zip Code Shipping Bands</value>
  </data>
  <data name="lblZipCodePriorityTitle.Text" xml:space="preserve">
    <value>Priority</value>
  </data>
  <data name="lblZipCodeTitle.Text" xml:space="preserve">
    <value>Zip Codes</value>
  </data>
</root>