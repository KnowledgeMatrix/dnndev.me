<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnDelete.Text" xml:space="preserve">
    <value>Supprimer</value>
  </data>
  <data name="btnUpload.Text" xml:space="preserve">
    <value>Upload</value>
  </data>
  <data name="dshUploadNewBaseImage.Text" xml:space="preserve">
    <value>Upload Image de base Nouveau</value>
  </data>
  <data name="hypAddNew.Text" xml:space="preserve">
    <value>Ajouter un marqueur de New</value>
  </data>
  <data name="hypCancel.Text" xml:space="preserve">
    <value>Annuler</value>
  </data>
  <data name="hypEditproduct.Text" xml:space="preserve">
    <value>Modifier le produit</value>
  </data>
  <data name="hypSave.Text" xml:space="preserve">
    <value>Enregistrer</value>
  </data>
  <data name="lblBaseImage.Help" xml:space="preserve">
    <value>L'image de base actuelle qui sera utilisé dans le visualiseur de produits.</value>
  </data>
  <data name="lblBaseImage.Text" xml:space="preserve">
    <value>Image de base actuelle</value>
  </data>
  <data name="lblDeleteExistingBaseImage.Help" xml:space="preserve">
    <value>Ce bouton permet de supprimer l'image de base existantes et tous les marqueurs associés.</value>
  </data>
  <data name="lblDeleteExistingBaseImage.Text" xml:space="preserve">
    <value>Supprimer l'image de base existantes</value>
  </data>
  <data name="lblFont.Help" xml:space="preserve">
    <value>S'il s'agit d'un marqueur de laquelle le texte sera inséré, sélectionnez le style, le texte sera. Si ce n'est pas vierge de congé applicables.</value>
  </data>
  <data name="lblFont.Text" xml:space="preserve">
    <value>Style de police</value>
  </data>
  <data name="lblFontColour.Help" xml:space="preserve">
    <value>S'il s'agit d'un marqueur de laquelle le texte sera inséré, sélectionnez la couleur du texte sera. Si ce n'est pas applicable s'il vous plaît laissez vierge.</value>
  </data>
  <data name="lblFontColour.Text" xml:space="preserve">
    <value>Couleur de police</value>
  </data>
  <data name="lblHeaderText.Text" xml:space="preserve">
    <value>Produit Visualizer</value>
  </data>
  <data name="lblMaxNumberOfCharactersAllowed.Help" xml:space="preserve">
    <value>Le cas échéant, le nombre de caractères qui maximium l'utilisateur peut placer dans le marqueur.</value>
  </data>
  <data name="lblMaxNumberOfCharactersAllowed.Text" xml:space="preserve">
    <value>Aucun maximium: Personnages</value>
  </data>
  <data name="lblNoImageUploaded.Text" xml:space="preserve">
    <value>Aucune image téléchargée.</value>
  </data>
  <data name="lblTextAlignment.Help" xml:space="preserve">
    <value>S'il s'agit d'un marqueur de laquelle le texte sera inséré, comment devrait être aligné le texte dans le marqueur.</value>
  </data>
  <data name="lblTextAlignment.Text" xml:space="preserve">
    <value>Alignement du texte</value>
  </data>
  <data name="lblUploadBaseImage.Help" xml:space="preserve">
    <value>De là, vous pouvez télécharger une image de base qui seront utilisées dans le visualiseur de produits, une seule note d'image peuvent être téléchargés par produit.</value>
  </data>
  <data name="lblUploadBaseImage.Text" xml:space="preserve">
    <value>Upload Image de base</value>
  </data>
  <data name="lblVariantOption.Help" xml:space="preserve">
    <value>L'option la variante qui sera placé dans le marqueur lorsque l'image maquette est créée et affichée à l'utilisateur.</value>
  </data>
  <data name="lblVariantOption.Text" xml:space="preserve">
    <value>Option Variante</value>
  </data>
  <data name="lblVisualizerInfo.Text" xml:space="preserve">
    <value>Quand un produit a des variantes qu'il est possible de montrer à l'utilisateur ce que le produit va ressembler à la personnalisations qu'ils ont fait. D'abord télécharger une image de base, puis ajouter des marqueurs à l'image de base pour chaque personnalisation qu'un utilisateur peut faire, en faisant attention à la position du marqueur dans la position sur l'image de base où la personnalisation des utilisateurs apparaît. &lt;br /&gt; Si le texte de personnalisation insère dans le marqueur, s'il vous plaît choisissez une couleur de police, le style et la limite de caractères, sinon laissez ce champ vide. &lt;br /&gt; Si une image doit être insérée dans le repère de l'image utilisateurs seront automatiquement redimensionnées en fonction de la taille de marqueur que vous définissez.</value>
  </data>
</root>