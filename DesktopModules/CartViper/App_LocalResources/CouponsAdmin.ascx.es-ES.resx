<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnSave.Text" xml:space="preserve">
    <value>Ahorrar</value>
  </data>
  <data name="dshExpiredCoupons.Text" xml:space="preserve">
    <value>Los cupones caducados</value>
  </data>
  <data name="lblActiveTokens.Text" xml:space="preserve">
    <value>Cupones de activos</value>
  </data>
  <data name="lblCanUseMultipleTimes.Help" xml:space="preserve">
    <value>El cupón puede ser utilizado varias veces.</value>
  </data>
  <data name="lblCanUseMultipleTimes.Text" xml:space="preserve">
    <value>Puede utilizar varias veces</value>
  </data>
  <data name="lblCategory.Help" xml:space="preserve">
    <value>La categoría que el cupón se debe aplicar a, tenga en cuenta todos los productos de esta categoría serán elegibles para el descuento por el cupón. Este descuento no se aplica a los productos en las categorías sub de la categoría seleccionada.</value>
  </data>
  <data name="lblCategory.Text" xml:space="preserve">
    <value>Categoría</value>
  </data>
  <data name="lblCouponBasics.Text" xml:space="preserve">
    <value>Fundamentos de cupones</value>
  </data>
  <data name="lblCouponCode.Help" xml:space="preserve">
    <value>El código que el usuario ingrese a usar el cupón.</value>
  </data>
  <data name="lblCouponCode.Text" xml:space="preserve">
    <value>Código de Cupón</value>
  </data>
  <data name="lblCouponCodeIsNotUnique.Text" xml:space="preserve">
    <value>El código de descuento no es único, por favor, introduzca un código de descuento diferentes.</value>
  </data>
  <data name="lblCouponDateRestriction.Text" xml:space="preserve">
    <value>Restricciones cupón Fecha</value>
  </data>
  <data name="lblCouponRestrictions.Text" xml:space="preserve">
    <value>Restricciones de cupón</value>
  </data>
  <data name="lblCouponType.Help" xml:space="preserve">
    <value>El tipo de cupón, por ejemplo, el cupón debe ofrecer un descuento monetario o un porcentaje de la cesta de subtotal o debería derecho al usuario a la libre navegación.</value>
  </data>
  <data name="lblCouponType.Text" xml:space="preserve">
    <value>Tipo de cupón</value>
  </data>
  <data name="lblCustomerEmailAddress.Help" xml:space="preserve">
    <value>Esto permite que el cupón que se limita a una determinada dirección de correo electrónico, el cliente que tenemos que entrar en la dirección de correo electrónico correspondiente a canjear este cupón.</value>
  </data>
  <data name="lblCustomerEmailAddress.Text" xml:space="preserve">
    <value>De cliente única dirección de correo electrónico</value>
  </data>
  <data name="lblDescription.Help" xml:space="preserve">
    <value>Descripción del cupón.</value>
  </data>
  <data name="lblDescription.Text" xml:space="preserve">
    <value>Descripción</value>
  </data>
  <data name="lblDiscountAmount.Help" xml:space="preserve">
    <value>La cantidad de descuento, esto se debe ingresar como por ejemplo un número entero 50,00 si el "cupón de descuento del porcentaje" se selecciona la cantidad se descontará como% del subtotal de lo contrario será un valor monetario de la subtotal. Si cupones de envío gratis sin embargo se ha seleccionado esta opción no es aplicable.</value>
  </data>
  <data name="lblDiscountAmount.Text" xml:space="preserve">
    <value>Importe de descuento</value>
  </data>
  <data name="lblExpiredTokens.Text" xml:space="preserve">
    <value>Los cupones caducados</value>
  </data>
  <data name="lblExpiryDate.Help" xml:space="preserve">
    <value>También puede introducir una fecha de caducidad del cupón, déjese en blanco si no hay una fecha de caducidad.</value>
  </data>
  <data name="lblExpiryDate.Text" xml:space="preserve">
    <value>Fecha de Expiración cupón</value>
  </data>
  <data name="lblHeaderText.Text" xml:space="preserve">
    <value>Bonos Discount Store</value>
  </data>
  <data name="lblInfo.Text" xml:space="preserve">
    <value>Los cupones pueden ser creados aquí y los códigos distribuidos a los clientes, que en el punto de salida será capaz de entrar en ellos para recibir el descuento monetario o porcentaje de su envío subtotal o libre, siempre que cumplan los criterios a utilizar el cupón que ha definido. Más información sobre los cupones se pueden encontrar en la guía del usuario Cesta Viper.</value>
  </data>
  <data name="lblInvalidStartDate.Text" xml:space="preserve">
    <value>La fecha de inicio no puede ser posterior a la fecha de finalización.</value>
  </data>
  <data name="lblMinSubTotal.Help" xml:space="preserve">
    <value>Opcionalmente, con un mínimo subtotal antes de que el cupón se puede utilizar, dejar en blanco si no hay mínimo de subtotal.</value>
  </data>
  <data name="lblMinSubTotal.Text" xml:space="preserve">
    <value>Subtotal mínimo</value>
  </data>
  <data name="lblNumberTimesUsed.Text" xml:space="preserve">
    <value>No: Los tiempos usados</value>
  </data>
  <data name="lblProductSku.Help" xml:space="preserve">
    <value>Si se introduce el cupón sólo le dará un descuento para el producto que se ha introducido aquí, todos los demás productos se cobrarán a la tarifa estándar.</value>
  </data>
  <data name="lblProductSku.Text" xml:space="preserve">
    <value>Número de modelo</value>
  </data>
  <data name="lblStartDate.Help" xml:space="preserve">
    <value>Si se introduce el cupón no será válida hasta la fecha de inicio ha pasado.</value>
  </data>
  <data name="lblStartDate.Text" xml:space="preserve">
    <value>Fecha de inicio de cupón</value>
  </data>
  <data name="linkDelete.Text" xml:space="preserve">
    <value>Borrar</value>
  </data>
  <data name="linkEdit.Text" xml:space="preserve">
    <value>Editar</value>
  </data>
  <data name="rdFreeShipping.Text" xml:space="preserve">
    <value>Cupón de Envío Gratis</value>
  </data>
  <data name="rdMonetaryDiscount.Text" xml:space="preserve">
    <value>Cupones de descuento monetaria</value>
  </data>
  <data name="rdPercentageDiscount.Text" xml:space="preserve">
    <value>Porcentaje de vales de descuento</value>
  </data>
  <data name="reEmailAddress" xml:space="preserve">
    <value>Dirección de correo electrónico no válida.</value>
  </data>
</root>