<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnSave.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="EmptyComboValue.Text" xml:space="preserve">
    <value>--- Select ---</value>
  </data>
  <data name="GatewayNotSelected.Text" xml:space="preserve">
    <value>Please select a Gateway Provider.</value>
  </data>
  <data name="lblGateway.Help" xml:space="preserve">
    <value>Payment Gateway provider</value>
  </data>
  <data name="lblGateway.Text" xml:space="preserve">
    <value>Payment Gateway</value>
  </data>
  <data name="lblAllowOfflinePayment.Help" xml:space="preserve">
    <value>If selected along with taking online payment, users will be able to place their orders and then pay via an offline method. The order will be placed and the status set to "awaiting payment", once the user has paid via cheque, telephone, etc you can update the order status to "paid".</value>
  </data>
  <data name="lblAllowOfflinePayment.Text" xml:space="preserve">
    <value>Accept offline payment</value>
  </data>
  <data name="lblOffline.Text" xml:space="preserve">
    <value>Offline payment options.</value>
  </data>
  <data name="lblOnline.Text" xml:space="preserve">
    <value>Online payment options</value>
  </data>
  <data name="lblAllowGoogleCheckout.Help" xml:space="preserve">
    <value>Check to allow google checkout in addition to any other payment options.</value>
  </data>
  <data name="lblAllowGoogleCheckout.Text" xml:space="preserve">
    <value>Enable Google Checkout</value>
  </data>
  <data name="lblGoogleCheckout.Text" xml:space="preserve">
    <value>GoogleCheckout Options</value>
  </data>
  <data name="lblGoogleCheckoutNotSupported.Text" xml:space="preserve">
    <value>GoogleCheckout is not available for your selected currency.</value>
  </data>
  <data name="lblHeaderText.Text" xml:space="preserve">
    <value>Payment Gateway Settings</value>
  </data>
  <data name="lblCheckoutStyle.Text" xml:space="preserve">
    <value>Select Checkout Style</value>
  </data>
  <data name="lblChekoutStyle.Help" xml:space="preserve">
    <value>The checkout style we present to the customer, either a 3 or 4 step style interface. Based on the payment gateway selected some checkout styles are not supported.</value>
  </data>
  <data name="lblChekoutStyle.Text" xml:space="preserve">
    <value>Checkout Style</value>
  </data>
  <data name="lblCheckoutSelectionNotValid.Text" xml:space="preserve">
    <value>This checkout option is not supported by this gateway, please pick another.</value>
  </data>
  <data name="lblEnablePaypalStd.Help" xml:space="preserve">
    <value>When checked allows the customer to select PayPal to pay with their account.</value>
  </data>
  <data name="lblEnablePaypalStd.Text" xml:space="preserve">
    <value>Accept PayPal payment</value>
  </data>
  <data name="lblPayPalNotSupported.Text" xml:space="preserve">
    <value>Paypal is not available for your selected currency.</value>
  </data>
  <data name="lblPayPalStd.Text" xml:space="preserve">
    <value>PayPal Options</value>
  </data>
  <data name="lblDays.Text" xml:space="preserve">
    <value>Days</value>
  </data>
  <data name="lblOnlyAllowRegisteredUsers.Help" xml:space="preserve">
    <value>If selected only registered users will be able to pay via offline means.</value>
  </data>
  <data name="lblOnlyAllowRegisteredUsers.Text" xml:space="preserve">
    <value>Only Registered Users</value>
  </data>
  <data name="lblPaymentTerms.Help" xml:space="preserve">
    <value>The number of days that a customer will have to pay their balance.</value>
  </data>
  <data name="lblPaymentTerms.Text" xml:space="preserve">
    <value>Payment Terms</value>
  </data>
  <data name="lblOfflinePaymentInfo.Text" xml:space="preserve">
    <value>These fields are optional and allow you to control if only users with the defined role are allowed to checkout with the offline provider and to also display the number of days the customer has to pay for the order. &lt;br /&gt;&lt;br /&gt;You can also specify if ALL orders need to be moderated, if this is selected once an order is placed it will then have to be moderated by the store admin before an order confirmation is sent to the customer. During moderation they will be able to add/remove items to the order.&lt;br/&gt;&lt;br/&gt;See the Cart Viper manual for more information.</value>
  </data>
  <data name="lblModerateOffline.Help" xml:space="preserve">
    <value>If selected ALL orders will need to be moderated, selecting this will allow you to edit items in the order before they are placed.</value>
  </data>
  <data name="lblModerateOffline.Text" xml:space="preserve">
    <value>Moderate ALL Orders</value>
  </data>
  <data name="lblPostPaidPaymentTerms.Help" xml:space="preserve">
    <value>The number of days a customer has to pay their balance if they are "post paying"</value>
  </data>
  <data name="lblPostPaidPaymentTerms.Text" xml:space="preserve">
    <value>PostPaid Payment Terms</value>
  </data>
  <data name="lblGCheckNotAvailable.Text" xml:space="preserve">
    <value>Google Check can't be used when the offline payment provider has moderated orders enabled.</value>
  </data>
  <data name="lblOfflineRoles.Help" xml:space="preserve">
    <value>Defines the role that a user must have to checkout. If no items are selected then any user can checkout. A user only needs to have a single role from the selection to be allowed to checkout.</value>
  </data>
  <data name="lblOfflineRoles.Text" xml:space="preserve">
    <value>Role Required for Offline Checkout</value>
  </data>
  <data name="lblAdjustStockWhenPending.Help" xml:space="preserve">
    <value>When this is enabled the stock level for the items purchased will be decreased as soon as the order is created and while the order is still marked as awaiting payment.</value>
  </data>
  <data name="lblAdjustStockWhenPending.Text" xml:space="preserve">
    <value>Decrease Stock Straight Away</value>
  </data>
</root>