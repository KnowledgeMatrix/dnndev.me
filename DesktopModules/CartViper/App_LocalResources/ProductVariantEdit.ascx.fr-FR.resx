<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="hypCancel.Text" xml:space="preserve">
    <value>Annuler</value>
  </data>
  <data name="hypInventoryManagement.Text" xml:space="preserve">
    <value>Gestion des stocks de produits Variante</value>
  </data>
  <data name="hypProductVisualizer.Text" xml:space="preserve">
    <value>Produit Visualizer</value>
  </data>
  <data name="hypSave.Text" xml:space="preserve">
    <value>Enregistrer</value>
  </data>
  <data name="hypVariantImages.Text" xml:space="preserve">
    <value>Images Variante</value>
  </data>
  <data name="lblAddPriceAsPercent.Help" xml:space="preserve">
    <value>Si vous êtes choisi l'ajustement des prix en ligne item sera ajouté en tant que pourcentage du prix de base, sinon il sera simplement ajouté une somme d'argent au prix de base.</value>
  </data>
  <data name="lblAddPriceAsPercent.Text" xml:space="preserve">
    <value>Ajouter Ajustement des prix en%</value>
  </data>
  <data name="lblControlType.Text" xml:space="preserve">
    <value>Type de contrôle</value>
  </data>
  <data name="lblImageUploaderControlInfo.Text" xml:space="preserve">
    <value>Si vous souhaitez appliquer un ajustement de prix ou de poids lorsque l'utilisateur télécharge une image, vous devez entrer cela dans la première option ci-dessous.</value>
  </data>
  <data name="lblName.Text" xml:space="preserve">
    <value>Nom Variante</value>
  </data>
  <data name="lblOptionName.Text" xml:space="preserve">
    <value>Nom de l'option</value>
  </data>
  <data name="lblOptions.Text" xml:space="preserve">
    <value>Les options</value>
  </data>
  <data name="lblPriceAdjustment.Text" xml:space="preserve">
    <value>Ajustement des prix</value>
  </data>
  <data name="lblProductVariantEmpty.Text" xml:space="preserve">
    <value>Pas de variantes définies pour ce produit.</value>
  </data>
  <data name="lblRequired.Text" xml:space="preserve">
    <value>Obligatoires</value>
  </data>
  <data name="lblSortOrder.Text" xml:space="preserve">
    <value>Ordre de tri</value>
  </data>
  <data name="lblTextControlInfo.Text" xml:space="preserve">
    <value>Si vous souhaitez appliquer un ajustement de prix ou de poids lorsque l'utilisateur saisit des données dans le champ de texte, vous devez saisir ce à la première option ci-dessous.</value>
  </data>
  <data name="lblVariantName.Help" xml:space="preserve">
    <value>Nom de la variante de produit, il est affiché à l'utilisateur</value>
  </data>
  <data name="lblVariantName.Text" xml:space="preserve">
    <value>Nom Variante</value>
  </data>
  <data name="lblVariantSaveCaption.Text" xml:space="preserve">
    <value>Les modifications apportées aux variantes sont immédiatement enregistrées lorsque vous cliquez sur Enregistrer.</value>
  </data>
  <data name="lblWeightAdjustment.Text" xml:space="preserve">
    <value>L'ajustement de poids</value>
  </data>
  <data name="linkAddNew.Text" xml:space="preserve">
    <value>Ajouter la nouvelle variante</value>
  </data>
  <data name="linkDelete.Text" xml:space="preserve">
    <value>Supprimer</value>
  </data>
  <data name="linkEdit.Text" xml:space="preserve">
    <value>Modifier</value>
  </data>
  <data name="lnkDelete.Text" xml:space="preserve">
    <value>Supprimer</value>
  </data>
  <data name="plControlType.Help" xml:space="preserve">
    <value>Le contrôle pour afficher les options dans le catalogue à l'utilisateur.</value>
  </data>
  <data name="plControlType.Text" xml:space="preserve">
    <value>Type de contrôle</value>
  </data>
  <data name="plDefaultOptionPrompt.Help" xml:space="preserve">
    <value>Entrez une valeur par défaut qui est indiqué dans la liste déroulante, ce qui peut aider à expliquer le choix de l'utilisateur. "S'il vous plaît sélectionnez une couleur", "Choisissez une taille", etc</value>
  </data>
  <data name="plDefaultOptionPrompt.Text" xml:space="preserve">
    <value>Légende option par défaut</value>
  </data>
  <data name="plRequired.Help" xml:space="preserve">
    <value>Définit si la variante est obligatoire.</value>
  </data>
  <data name="plRequired.Text" xml:space="preserve">
    <value>Obligatoires</value>
  </data>
  <data name="plSortOrder.Help" xml:space="preserve">
    <value>Définit l'ordre d'affichage de la variante.</value>
  </data>
  <data name="plSortOrder.Text" xml:space="preserve">
    <value>Ordre de tri</value>
  </data>
  <data name="rbNotRequired.Text" xml:space="preserve">
    <value>Non obligatoire</value>
  </data>
  <data name="rbRequired.Text" xml:space="preserve">
    <value>Obligatoires</value>
  </data>
</root>