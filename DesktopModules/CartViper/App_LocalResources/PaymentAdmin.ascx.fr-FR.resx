<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnSave.Text" xml:space="preserve">
    <value>Enregistrer</value>
  </data>
  <data name="EmptyComboValue.Text" xml:space="preserve">
    <value>--- Choisissez ---</value>
  </data>
  <data name="GatewayNotSelected.Text" xml:space="preserve">
    <value>S'il vous plaît sélectionner un fournisseur de la passerelle.</value>
  </data>
  <data name="lblGateway.Help" xml:space="preserve">
    <value>Fournisseur de la passerelle de paiement</value>
  </data>
  <data name="lblGateway.Text" xml:space="preserve">
    <value>Passerelle de paiement</value>
  </data>
  <data name="lblAllowOfflinePayment.Help" xml:space="preserve">
    <value>Si sélectionné avec la prise de paiement en ligne, les utilisateurs seront en mesure de placer leurs commandes et ensuite de payer via une méthode hors ligne. La commande sera placée et le statut défini sur «l'attente de paiement", une fois que l'utilisateur a payé par chèque, téléphone, etc, vous pouvez mettre à jour l'état afin de "payer".</value>
  </data>
  <data name="lblAllowOfflinePayment.Text" xml:space="preserve">
    <value>Accepter les paiements hors ligne</value>
  </data>
  <data name="lblOffline.Text" xml:space="preserve">
    <value>Options de paiement hors ligne.</value>
  </data>
  <data name="lblOnline.Text" xml:space="preserve">
    <value>Options de paiement en ligne</value>
  </data>
  <data name="lblAllowGoogleCheckout.Help" xml:space="preserve">
    <value>Vérifiez pour permettre à Google Checkout en plus de tout autres options de paiement.</value>
  </data>
  <data name="lblAllowGoogleCheckout.Text" xml:space="preserve">
    <value>Activer Google Checkout</value>
  </data>
  <data name="lblGoogleCheckout.Text" xml:space="preserve">
    <value>Options de GoogleCheckout</value>
  </data>
  <data name="lblGoogleCheckoutNotSupported.Text" xml:space="preserve">
    <value>GoogleCheckout n'est pas disponible pour votre devise.</value>
  </data>
  <data name="lblHeaderText.Text" xml:space="preserve">
    <value>Paramètres de la passerelle de paiement</value>
  </data>
  <data name="lblCheckoutStyle.Text" xml:space="preserve">
    <value>Sélectionnez Commander style</value>
  </data>
  <data name="lblChekoutStyle.Help" xml:space="preserve">
    <value>Le style checkout nous présentons au client, soit une interface 3 ou 4 étapes de style. Basé sur la passerelle de paiement choisi certains styles de caisse ne sont pas pris en charge.</value>
  </data>
  <data name="lblChekoutStyle.Text" xml:space="preserve">
    <value>Style de Commander</value>
  </data>
  <data name="lblCheckoutSelectionNotValid.Text" xml:space="preserve">
    <value>Cette option la caisse n'est pas pris en charge par cette passerelle, s'il vous plaît choisir une autre.</value>
  </data>
  <data name="lblEnablePaypalStd.Help" xml:space="preserve">
    <value>Quand elle est cochée permet au client de sélectionner PayPal pour payer avec leur compte.</value>
  </data>
  <data name="lblEnablePaypalStd.Text" xml:space="preserve">
    <value>Accepter les paiements PayPal</value>
  </data>
  <data name="lblPayPalNotSupported.Text" xml:space="preserve">
    <value>Paypal n'est pas disponible pour votre devise.</value>
  </data>
  <data name="lblPayPalStd.Text" xml:space="preserve">
    <value>Options de PayPal</value>
  </data>
  <data name="lblDays.Text" xml:space="preserve">
    <value>Jours</value>
  </data>
  <data name="lblOnlyAllowRegisteredUsers.Help" xml:space="preserve">
    <value>S'il est sélectionné, seuls les utilisateurs inscrits seront en mesure de payer via des moyens hors ligne.</value>
  </data>
  <data name="lblOnlyAllowRegisteredUsers.Text" xml:space="preserve">
    <value>Seuls les utilisateurs enregistrés</value>
  </data>
  <data name="lblPaymentTerms.Help" xml:space="preserve">
    <value>Le nombre de jours que le client aura à payer leur solde.</value>
  </data>
  <data name="lblPaymentTerms.Text" xml:space="preserve">
    <value>Conditions de paiement</value>
  </data>
  <data name="lblOfflinePaymentInfo.Text" xml:space="preserve">
    <value>Ces champs sont facultatifs et vous permettra de contrôler si seuls les utilisateurs enregistrés sont autorisés à la caisse avec le fournisseur déconnecté et également d'afficher le nombre de jours le client doit payer pour l'ordre. &lt;br /&gt;&lt;br /&gt; Vous pouvez également spécifier si les commandes placées déconnecté besoin d'être modéré, si cette option est sélectionnée une fois la commande est placée, elle devra alors être modéré par l'administrateur du magasin avant une confirmation de commande est envoyé au client. Pendant la modération, ils seront en mesure d'ajouter / supprimer des éléments à l'ordre. &lt;br/&gt;&lt;br/&gt; Voir le panier Viper manuel pour plus d'informations.</value>
  </data>
  <data name="lblModerateOffline.Help" xml:space="preserve">
    <value>S'il est sélectionné commandes hors ligne devra être modéré, en sélectionnant ce qui vous permettra d'éditer des éléments dans l'ordre avant d'être placés.</value>
  </data>
  <data name="lblModerateOffline.Text" xml:space="preserve">
    <value>Modéré commandes hors ligne</value>
  </data>
  <data name="lblPostPaidPaymentTerms.Help" xml:space="preserve">
    <value>Le nombre de jours qu'un client a de payer leur solde s'ils sont «poste payeur"</value>
  </data>
  <data name="lblPostPaidPaymentTerms.Text" xml:space="preserve">
    <value>Conditions de paiement postpayés</value>
  </data>
</root>