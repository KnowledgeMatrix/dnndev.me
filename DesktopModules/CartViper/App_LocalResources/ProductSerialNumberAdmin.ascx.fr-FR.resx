<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lblAction.Text" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="lblDateAssigned.Text" xml:space="preserve">
    <value>Date affectées</value>
  </data>
  <data name="lblEmailAddress.Text" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="lblFilterAll.Text" xml:space="preserve">
    <value>Tous les numéros de série</value>
  </data>
  <data name="lblFilterAssigned.Text" xml:space="preserve">
    <value>Assigned Numbers série</value>
  </data>
  <data name="lblFilterNotAssigned.Text" xml:space="preserve">
    <value>Un-attribué des numéros de série</value>
  </data>
  <data name="lblFilterSerials.Help" xml:space="preserve">
    <value>Sélectionnez les critères pour filtrer les séries de produits pour ce produit.</value>
  </data>
  <data name="lblFilterSerials.Text" xml:space="preserve">
    <value>Serials Filtre produit</value>
  </data>
  <data name="lblHasBeenAssigned.Text" xml:space="preserve">
    <value>A été attribué</value>
  </data>
  <data name="lblHeader.Text" xml:space="preserve">
    <value>Attribution du numéro de série</value>
  </data>
  <data name="lblHelpInfo.Text" xml:space="preserve">
    <value>Cette section vous permet de rechercher un produit et consulter toutes les publications en série de produits pour ce produit et les détails de la commande, ils sont affectés, ainsi que l'exportation de cette information. Format de fichier csv. &lt;br/&gt;&lt;br/&gt; Pour ajouter de nouveaux numéros de série s'il vous plaît utiliser le produit page d'édition.</value>
  </data>
  <data name="lblOrderId.Text" xml:space="preserve">
    <value>Numéro de commande</value>
  </data>
  <data name="lblProductName.Text" xml:space="preserve">
    <value>Nom du produit</value>
  </data>
  <data name="lblProductNameSearch.Help" xml:space="preserve">
    <value>Entrez le nom du produit, que vous tapez le produit sera automatiquement proposé de vous. Une fois que vous avez trouvé votre produit, vous pourrez cliquer sur "view" pour afficher les numéros de série pour le produit sélectionné.</value>
  </data>
  <data name="lblProductNameSearch.Text" xml:space="preserve">
    <value>Nom du produit</value>
  </data>
  <data name="lblProductSku.Text" xml:space="preserve">
    <value>Produit Sku</value>
  </data>
  <data name="lblPurchaser.Text" xml:space="preserve">
    <value>Acheteur</value>
  </data>
  <data name="lblSerialNumber.Text" xml:space="preserve">
    <value>Numéro de série</value>
  </data>
  <data name="lblTotalNumberOfAvailable.Help" xml:space="preserve">
    <value>Il s'agit du nombre total de numéros de série disponibles pour le produit actuellement sélectionné</value>
  </data>
  <data name="lblTotalNumberOfAvailable.Text" xml:space="preserve">
    <value>Non: des périodiques disponibles</value>
  </data>
  <data name="lnkDelete.Text" xml:space="preserve">
    <value>Supprimer</value>
  </data>
  <data name="lnkExport.Text" xml:space="preserve">
    <value>Exporter vers un fichier CSV</value>
  </data>
  <data name="lnkView.Text" xml:space="preserve">
    <value>Numéros de série Voir l'info</value>
  </data>
  <data name="lnkViewOrder.Text" xml:space="preserve">
    <value>Commandez</value>
  </data>
  <data name="rfProductName.Text" xml:space="preserve">
    <value>Requis</value>
  </data>
</root>