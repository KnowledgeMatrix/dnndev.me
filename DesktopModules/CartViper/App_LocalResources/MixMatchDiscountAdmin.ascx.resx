<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnSave.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="cvCategory.Text" xml:space="preserve">
    <value>&lt;br/&gt;Please select at least one category</value>
  </data>
  <data name="DeleteItem.Text" xml:space="preserve">
    <value>Are you sure you want to delete this item?</value>
  </data>
  <data name="lblAddUpdate.Text" xml:space="preserve">
    <value>Add/Update Discount</value>
  </data>
  <data name="lblCategory.Help" xml:space="preserve">
    <value>Select the categories that the product needs to assigned to so that it will be included in the mix and match discount.</value>
  </data>
  <data name="lblCategory.Text" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="lblCouponCode.Text" xml:space="preserve">
    <value>Discount Name</value>
  </data>
  <data name="lblCouponType.Text" xml:space="preserve">
    <value>Requirement</value>
  </data>
  <data name="lblDiscountAmount.Help" xml:space="preserve">
    <value>Defines the amount of discount to apply, this can be a fixed amount or percentage discount.</value>
  </data>
  <data name="lblDiscountAmount.Text" xml:space="preserve">
    <value>Discount Amount</value>
  </data>
  <data name="lblDiscountAmountRow.Text" xml:space="preserve">
    <value>Discount Amount</value>
  </data>
  <data name="lblDiscountDesc.Help" xml:space="preserve">
    <value>Optional description for the mix and match discount</value>
  </data>
  <data name="lblDiscountDesc.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="lblDiscountName.Help" xml:space="preserve">
    <value>Name of the mix and match discount</value>
  </data>
  <data name="lblDiscountName.Text" xml:space="preserve">
    <value>Discount Name</value>
  </data>
  <data name="lblDiscountQty.Help" xml:space="preserve">
    <value>Defines the number of units needed to be purchased to get the mix and match discount.</value>
  </data>
  <data name="lblDiscountQty.Text" xml:space="preserve">
    <value>Quanity Required</value>
  </data>
  <data name="lblEnabled.Help" xml:space="preserve">
    <value>When ticked the discount will be applied at the checkout for the customer that meets the requirements.</value>
  </data>
  <data name="lblEnabled.Text" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="lblEnabledHeader.Text" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="lblExistingDiscounts.Text" xml:space="preserve">
    <value>Existing Mix and Match Discounts</value>
  </data>
  <data name="lblHeaderText.Text" xml:space="preserve">
    <value>Mix and Match Discount</value>
  </data>
  <data name="lblInfo.Text" xml:space="preserve">
    <value>&lt;p&gt;Mix and Match discounts allows you to apply a discount based on the quantity of items purchased from a category or selection of categories. The discount can be a fixed amount or percentage of the qualifying items sub total.&lt;/p&gt;
&lt;p&gt;For example it is possible to define discounts like, purchase 3 items from the category "Office Desks" to get 10% of the items.&lt;/p&gt;
&lt;p&gt;Its also possible to define multiple bands&lt;ul&gt;
&lt;li&gt;Any 6 items from Xbox360 Games 10%&lt;/li&gt;
&lt;li&gt;Any 12 Items from Xbox360 Games 15%&lt;/li&gt;&lt;/ul&gt;
Note when setting up this type of discount on quantity the discount is applied cumulatively, therefore the Xbox Games example would be setup as two discounts
&lt;ol style="margin-left:40px;"&gt;
&lt;li&gt;Qty required 6, percentage discount 10%&lt;/li&gt;
&lt;li&gt;Qty required 12, percentage discount 5%&lt;/li&gt;
&lt;/ol&gt;
Since these are applied together 12 or more items from the category would attract a discount of 10% + 5% = 15%
&lt;/p&gt;</value>
  </data>
  <data name="lblSelectAll.Text" xml:space="preserve">
    <value>Select/Deselect All Categories</value>
  </data>
  <data name="linkDelete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="linkEdit.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="rbDiscountAmount.Text" xml:space="preserve">
    <value>Fixed Amount</value>
  </data>
  <data name="rbDiscountPercentage.Text" xml:space="preserve">
    <value>Percentage</value>
  </data>
  <data name="revAmount.Text" xml:space="preserve">
    <value>&lt;br/&gt;Discount Amount is not valid</value>
  </data>
  <data name="revQty.Text" xml:space="preserve">
    <value>&lt;br/&gt;Quantiy Required is not valid</value>
  </data>
  <data name="rfvAmount.Text" xml:space="preserve">
    <value>&lt;br/&gt;Discount Amount is required</value>
  </data>
  <data name="rfvName.Text" xml:space="preserve">
    <value>&lt;br/&gt;Discount Name is required</value>
  </data>
  <data name="rfvQty.Text" xml:space="preserve">
    <value>&lt;br/&gt;Quantity Required is required</value>
  </data>
  <data name="lblDiscountRole.Help" xml:space="preserve">
    <value>Defines the optional role that the user needs to be a member of to get the discount. </value>
  </data>
  <data name="lblDiscountRole.Text" xml:space="preserve">
    <value>Role Required</value>
  </data>
  <data name="lblRoleNameRow.Text" xml:space="preserve">
    <value>Role</value>
  </data>
  <data name="rbNoRole.Text" xml:space="preserve">
    <value>No role required</value>
  </data>
  <data name="rbYesRole.Text" xml:space="preserve">
    <value>User requires role</value>
  </data>
  <data name="lblIsFreeShipping.Help" xml:space="preserve">
    <value>When checked this band and any band above this one will get free domestic shipping on the order</value>
  </data>
  <data name="lblIsFreeShipping.Text" xml:space="preserve">
    <value>Has Free Shipping</value>
  </data>
  <data name="lblRegisteredNotCumulative.Text" xml:space="preserve">
    <value>Do not applied "Registered User" discount to users which have additional security roles</value>
  </data>
  <data name="cvDiscountQtySubTotal.Text" xml:space="preserve">
    <value>&lt;br/&gt;Please enter a valid figure, quantity can only be a whole number</value>
  </data>
  <data name="lblDiscountSubTotal.Help" xml:space="preserve">
    <value>Sub total required for the selected categories before the discount will be applied</value>
  </data>
  <data name="lblDiscountSubTotal.Text" xml:space="preserve">
    <value>Sub Total Required</value>
  </data>
  <data name="rbQtyRequired.Text" xml:space="preserve">
    <value>Quantity Required</value>
  </data>
  <data name="rbSubTotalRequired.Text" xml:space="preserve">
    <value>Sub Total Required</value>
  </data>
  <data name="requiredQuantity.Text" xml:space="preserve">
    <value>Min Qty: {0}</value>
  </data>
  <data name="requiredSubTotal.Text" xml:space="preserve">
    <value>Min SubTotal: {0}</value>
  </data>
</root>