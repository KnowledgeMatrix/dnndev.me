<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnDelete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="btnUpload.Text" xml:space="preserve">
    <value>Upload</value>
  </data>
  <data name="dshUploadNewBaseImage.Text" xml:space="preserve">
    <value>Upload New Base Image</value>
  </data>
  <data name="hypAddNew.Text" xml:space="preserve">
    <value>Add New Marker</value>
  </data>
  <data name="hypCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="hypEditproduct.Text" xml:space="preserve">
    <value>Edit Product</value>
  </data>
  <data name="hypSave.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="lblBaseImage.Help" xml:space="preserve">
    <value>The current base image that will be used in the product visualizer.</value>
  </data>
  <data name="lblBaseImage.Text" xml:space="preserve">
    <value>Current Base Image</value>
  </data>
  <data name="lblDeleteExistingBaseImage.Help" xml:space="preserve">
    <value>This button will delete the existing base image and all associated markers.</value>
  </data>
  <data name="lblDeleteExistingBaseImage.Text" xml:space="preserve">
    <value>Delete Existing Base Image</value>
  </data>
  <data name="lblFont.Help" xml:space="preserve">
    <value>If this is a marker where text will be inserted, select the style the text will be. If this is not applicable leave blank.</value>
  </data>
  <data name="lblFont.Text" xml:space="preserve">
    <value>Font Style</value>
  </data>
  <data name="lblFontColour.Help" xml:space="preserve">
    <value>If this is a marker where text will be inserted, select the colour the text will be. If this is not applicable please leave blank.</value>
  </data>
  <data name="lblFontColour.Text" xml:space="preserve">
    <value>Font Colour</value>
  </data>
  <data name="lblHeaderText.Text" xml:space="preserve">
    <value>Product Visualizer</value>
  </data>
  <data name="lblMaxNumberOfCharactersAllowed.Help" xml:space="preserve">
    <value>If applicable the maximium number of characters that the user can place in the marker.</value>
  </data>
  <data name="lblMaxNumberOfCharactersAllowed.Text" xml:space="preserve">
    <value>Maximium No: Characters</value>
  </data>
  <data name="lblNoImageUploaded.Text" xml:space="preserve">
    <value>No image uploaded.</value>
  </data>
  <data name="lblTextAlignment.Help" xml:space="preserve">
    <value>If this is a marker where text will be inserted, how should the text be aligned within the marker.</value>
  </data>
  <data name="lblTextAlignment.Text" xml:space="preserve">
    <value>Text Alignment</value>
  </data>
  <data name="lblUploadBaseImage.Help" xml:space="preserve">
    <value>From here you can upload a base image that will be used in the product visualizer, note only 1 image can be uploaded per product.</value>
  </data>
  <data name="lblUploadBaseImage.Text" xml:space="preserve">
    <value>Upload Base Image</value>
  </data>
  <data name="lblVariantOption.Help" xml:space="preserve">
    <value>The variant option that will be placed into the marker when the mockup image is created and displayed to the user.</value>
  </data>
  <data name="lblVariantOption.Text" xml:space="preserve">
    <value>Variant Option</value>
  </data>
  <data name="lblVisualizerInfo.Text" xml:space="preserve">
    <value>When a product has variants it is possible to show the user what the product will look like with the customizations they have made. First upload a base image, then add markers to the base image for each customization a user can make, being careful to position the marker in the position on the base image where the users customization will appear. &lt;br /&gt; If the customization inserts text into the marker, please select a font colour,style and character limit, otherwise leave this blank. &lt;br /&gt; If an image is to be inserted into the marker the users image will be auto-scaled to fit the marker size you define.</value>
  </data>
</root>