<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lblParentTitle.Text" xml:space="preserve">
    <value>Store General Settings</value>
  </data>
  <data name="lblStoreName.Text" xml:space="preserve">
    <value>Store Name</value>
  </data>
  <data name="lblDescription.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="lblKeywords.Text" xml:space="preserve">
    <value>Keywords</value>
  </data>
  <data name="lblEmail.Text" xml:space="preserve">
    <value>Primary Store Email</value>
  </data>
  <data name="lblShoppingCartPageID.Text" xml:space="preserve">
    <value>Store Account Page</value>
  </data>
  <data name="lblStoreName.Help" xml:space="preserve">
    <value>Name of your store</value>
  </data>
  <data name="lblDescription.Help" xml:space="preserve">
    <value>Description of your store</value>
  </data>
  <data name="lblKeywords.Help" xml:space="preserve">
    <value>Keywords that pertain to your store</value>
  </data>
  <data name="lblEmail.Help" xml:space="preserve">
    <value>The primary email address of your store</value>
  </data>
  <data name="lblShoppingCartPageID.Help" xml:space="preserve">
    <value>Page containing the store account module</value>
  </data>
  <data name="btnSave.Text" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="CouldNotFind.Text" xml:space="preserve">
    <value>Could not find</value>
  </data>
  <data name="EmptyComboValue.Text" xml:space="preserve">
    <value>--- Select ---</value>
  </data>
  <data name="GatewayNotSelected.Text" xml:space="preserve">
    <value>Please select a Gateway Provider.</value>
  </data>
  <data name="lblStorePageID.Help" xml:space="preserve">
    <value>Page containing the store catalog module</value>
  </data>
  <data name="lblStorePageID.Text" xml:space="preserve">
    <value>Store Page</value>
  </data>
  <data name="dshShippingProvider.Text" xml:space="preserve">
    <value>Shipping Administration</value>
  </data>
  <data name="lblUsePortalTemplates.Text" xml:space="preserve">
    <value>Portal Templates</value>
  </data>
  <data name="lblUsePortalTemplates.Help" xml:space="preserve">
    <value>Check for using portal templates</value>
  </data>
  <data name="lblAuthorizeCancel.Help" xml:space="preserve">
    <value>Check to authorize the cancellation of order by clients.</value>
  </data>
  <data name="lblAuthorizeCancel.Text" xml:space="preserve">
    <value>Authorize Cancel</value>
  </data>
  <data name="lblSEOFeature.Help" xml:space="preserve">
    <value>When SEO feature is checked the store fields Title, Description and Keywords are injected to the corresponding META fields of the page where the catalog module is placed. This allow a better indexing by search engines and produce higher ranking. When product details are displayed, the product's fields model name, summary and keywords are used.</value>
  </data>
  <data name="lblSEOFeature.Text" xml:space="preserve">
    <value>SEO Feature</value>
  </data>
  <data name="lblOutOfStock.Help" xml:space="preserve">
    <value>Choose the message to display when a product is out of stock. This feature work only when the [STOCKQUANTITY] token is used in templates.</value>
  </data>
  <data name="lblOutOfStock.Text" xml:space="preserve">
    <value>On Out of Stock</value>
  </data>
  <data name="OOStockQuantity.Text" xml:space="preserve">
    <value>Quantity in stock</value>
  </data>
  <data name="OOStockRestocking.Text" xml:space="preserve">
    <value>Restocking in progress</value>
  </data>
  <data name="OOStockUnavailable.Text" xml:space="preserve">
    <value>Product Unavailable</value>
  </data>
  <data name="BehaviorAccept.Text" xml:space="preserve">
    <value>Accept order if a product is out of stock</value>
  </data>
  <data name="BehaviorHideProduct.Text" xml:space="preserve">
    <value>Hide the product</value>
  </data>
  <data name="lblProductsBehavior.Help" xml:space="preserve">
    <value>If a product is out of stock, you can: 1) accept his ordering; 2) hide the field quantity, links/buttons "Add to Cart" and "Buy now!"; 3) Hide the product.</value>
  </data>
  <data name="lblProductsBehavior.Text" xml:space="preserve">
    <value>Product's Behavior</value>
  </data>
  <data name="BehaviorHideControls.Text" xml:space="preserve">
    <value>Hide quantity, links and buttons</value>
  </data>
  <data name="lblCatalogRole.Help" xml:space="preserve">
    <value>Select the role allowed to manage the catalog (Categories, Products, Reviews). By default, members of the group Administors and host accounts are allowed to manage the catalog.</value>
  </data>
  <data name="lblCatalogRole.Text" xml:space="preserve">
    <value>Manage Catalog</value>
  </data>
  <data name="lblOrderRole.Help" xml:space="preserve">
    <value>Select the role allowed to manage orders. By default, members of the group Administors and host accounts are allowed to manage orders.</value>
  </data>
  <data name="lblOrderRole.Text" xml:space="preserve">
    <value>Manage Orders</value>
  </data>
  <data name="TabHidden.Text" xml:space="preserve">
    <value> (Hidden!)</value>
  </data>
  <data name="lblSecureCookie.Help" xml:space="preserve">
    <value>Check to encrypt cookie values</value>
  </data>
  <data name="lblSecureCookie.Text" xml:space="preserve">
    <value>Secure Cookie</value>
  </data>
  <data name="lblLargeImageWidth.Help" xml:space="preserve">
    <value>Size in pixel of the width of the large image</value>
  </data>
  <data name="lblLargeImageWidth.Text" xml:space="preserve">
    <value>Large Image Width</value>
  </data>
  <data name="lblMediumImageWidth.Help" xml:space="preserve">
    <value>Size in pixel of the width of the medium image</value>
  </data>
  <data name="lblMediumImageWidth.Text" xml:space="preserve">
    <value>Medium Image Width</value>
  </data>
  <data name="lblThumbnailImageWidth.Help" xml:space="preserve">
    <value>Size in pixel of the width of the thumbnail image</value>
  </data>
  <data name="lblThumbnailImageWidth.Text" xml:space="preserve">
    <value>Thumbnail Image Width</value>
  </data>
  <data name="lblLicenseError.Text" xml:space="preserve">
    <value>Your current license does not support multiple stores, please upgrade your license.</value>
  </data>
  <data name="lblRepcatchPrivateKey.Help" xml:space="preserve">
    <value>When using the email a friend functionality, we have added a captcha to stop spam, here you enter the private key you are given when you sign up for a recaptcha account at:http://www.google.com/recaptcha</value>
  </data>
  <data name="lblRepcatchPrivateKey.Text" xml:space="preserve">
    <value>Recaptcha Private Key</value>
  </data>
  <data name="lblRepcatchPublicKey.Help" xml:space="preserve">
    <value>When using the email a friend functionality, we have added a captcha to stop spam, here you enter the private key you are given when you sign up for a recaptcha account at:http://www.google.com/recaptcha</value>
  </data>
  <data name="lblRepcatchPublicKey.Text" xml:space="preserve">
    <value>Recaptcha Public Key</value>
  </data>
  <data name="lblEnableWishlist.Help" xml:space="preserve">
    <value>If checked the user is able to store a wishlist of items they would like to purchase</value>
  </data>
  <data name="lblEnableWishlist.Text" xml:space="preserve">
    <value>Enable Wishlist</value>
  </data>
  <data name="lblEnableProductNewsLetter.Help" xml:space="preserve">
    <value>If enabled you can automatically send out a news letter relating to new products that have been added to your store, users will have the option of subscribing or unsubscribing to the news letter.</value>
  </data>
  <data name="lblEnableProductNewsLetter.Text" xml:space="preserve">
    <value>Enable Product News Letter</value>
  </data>
  <data name="lblNewsLetterFrequency.Help" xml:space="preserve">
    <value>How often should the news letter be emailed, e.g. every 5 days.</value>
  </data>
  <data name="lblNewsLetterFrequency.Text" xml:space="preserve">
    <value>Send Frequency</value>
  </data>
  <data name="lblProductModifiedDate.Help" xml:space="preserve">
    <value>Define the products that will be included in the news letter, e.g. include all products that were added within the last 3 days of the news letter being sent.</value>
  </data>
  <data name="lblProductModifiedDate.Text" xml:space="preserve">
    <value>Include Products Added Within</value>
  </data>
  <data name="lblDomain.Help" xml:space="preserve">
    <value>The websites domain, even if the store is ran in a child portal please enter the primary domain the following format.&lt;br /&gt;, e.g. http://www.cartviper.com</value>
  </data>
  <data name="lblDomain.Text" xml:space="preserve">
    <value>Website Domain</value>
  </data>
  <data name="lblMaxNumberProducts.Help" xml:space="preserve">
    <value>The maximium number of products that we should display in the newsletter.</value>
  </data>
  <data name="lblMaxNumberProducts.Text" xml:space="preserve">
    <value>Max Number Of Products</value>
  </data>
  <data name="ranMaxNumberProducts.Text" xml:space="preserve">
    <value>&lt;br/&gt;Value needs to be between 1 and 30</value>
  </data>
  <data name="regDomain.Text" xml:space="preserve">
    <value>&lt;br/&gt;This value should start with http:// or https://</value>
  </data>
  <data name="rfDomain.Text" xml:space="preserve">
    <value>&lt;br/&gt;Required Field</value>
  </data>
  <data name="rfMaxNumberProducts.Text" xml:space="preserve">
    <value>&lt;br/&gt;Required Field</value>
  </data>
  <data name="dshGeneralSettings.Text" xml:space="preserve">
    <value>General Settings</value>
  </data>
  <data name="dshNewsLetterSettings.Text" xml:space="preserve">
    <value>Product Newsletter Settings</value>
  </data>
  <data name="dshStoreSettings.Text" xml:space="preserve">
    <value>Store Settings</value>
  </data>
  <data name="lblOrderPdfIcon.Help" xml:space="preserve">
    <value>The icon we should use to display on the PDF that contains an order details. Note the image will automatically be scaled to fit into the PDF.</value>
  </data>
  <data name="lblOrderPdfIcon.Text" xml:space="preserve">
    <value>Order PDF Icon</value>
  </data>
  <data name="dshOrderPdfSettings.Text" xml:space="preserve">
    <value>Order PDF Settings</value>
  </data>
  <data name="lblOrderPdfFooter.Help" xml:space="preserve">
    <value>The text that should appear in the footer section of the order PDF, note text can be placed on a new line in the pdf by pressing the enter key.</value>
  </data>
  <data name="lblOrderPdfFooter.Text" xml:space="preserve">
    <value>Footer Text</value>
  </data>
  <data name="lblOrderPdfHeader.Help" xml:space="preserve">
    <value>The text that should appear in the header section of the order PDF, note text can be placed on a new line in the pdf by pressing the enter key.</value>
  </data>
  <data name="lblOrderPdfHeader.Text" xml:space="preserve">
    <value>Header Text</value>
  </data>
  <data name="lblEnableCustomEmails.Help" xml:space="preserve">
    <value>Tick this option to use custom HTML template driven emails when the customer places an order</value>
  </data>
  <data name="lblEnableCustomEmails.Text" xml:space="preserve">
    <value>Enable Custom Order Emails</value>
  </data>
  <data name="lblOrderDetailsTemplate.Help" xml:space="preserve">
    <value>HTML template used to output each line item into the Order Confirm Email Template</value>
  </data>
  <data name="lblOrderDetailsTemplate.Text" xml:space="preserve">
    <value>Order Details Confirm Template</value>
  </data>
  <data name="lblOrderTemplate.Help" xml:space="preserve">
    <value>HTML template used to create the order confirmation email that is sent to the user when they checkout.</value>
  </data>
  <data name="lblOrderTemplate.Text" xml:space="preserve">
    <value>Order Confirm Email Template</value>
  </data>
  <data name="lblStatusAwaitingTemplate.Help" xml:space="preserve">
    <value>HTML template used when the status of the order is awaiting payment, this occurs if the user elects to pay offline.</value>
  </data>
  <data name="lblStatusAwaitingTemplate.Text" xml:space="preserve">
    <value>Status Awaiting Payment Email Template</value>
  </data>
  <data name="lblStatusTemplate.Help" xml:space="preserve">
    <value>HTML template used when the status of the order is updated</value>
  </data>
  <data name="lblStatusTemplate.Text" xml:space="preserve">
    <value>Status Changed Email Template</value>
  </data>
  <data name="dshEmailTemplates.Text" xml:space="preserve">
    <value>Store Email Templates</value>
  </data>
  <data name="lblProductNewsLetterTemplate.Help" xml:space="preserve">
    <value>The template that will be used for the product news letter template</value>
  </data>
  <data name="lblProductNewsLetterTemplate.Text" xml:space="preserve">
    <value>Product News Letter Email Template</value>
  </data>
  <data name="lblProductNewsLetterProductItemTemplate.Help" xml:space="preserve">
    <value>The tempalte that will be used to output the individual product in the product newsletter template.</value>
  </data>
  <data name="lblProductNewsLetterProductItemTemplate.Text" xml:space="preserve">
    <value>Product News Letter Product Item Template</value>
  </data>
  <data name="btnSendNewsletter.Text" xml:space="preserve">
    <value>Send Newsletter</value>
  </data>
  <data name="lblManuallySendNewsLetter.Help" xml:space="preserve">
    <value>Manually send the product newsletter, note the newsletter will be sent to all the subscribers once this is clicked.</value>
  </data>
  <data name="lblManuallySendNewsLetter.Text" xml:space="preserve">
    <value>Manually Send Newsletter</value>
  </data>
  <data name="lblProductSizeMeasurement.Help" xml:space="preserve">
    <value>The unit all products size will be used to calculate in.</value>
  </data>
  <data name="lblProductSizeMeasurement.Text" xml:space="preserve">
    <value>Product Size Measurement</value>
  </data>
  <data name="lblProductWeightMeasurement.Help" xml:space="preserve">
    <value>The unit that all products on the store will be used to calculate a products weight.</value>
  </data>
  <data name="lblProductWeightMeasurement.Text" xml:space="preserve">
    <value>Product Weight Measurement</value>
  </data>
  <data name="lblNewsLetterNotSent.Text" xml:space="preserve">
    <value>Newsletter not sent</value>
  </data>
  <data name="lblNewsLetterSent.Text" xml:space="preserve">
    <value>Newsletter sent</value>
  </data>
  <data name="lblOrderTemplateAnon.Help" xml:space="preserve">
    <value>HTML template used to create the anonymous order confirmation email that is sent to the user when they checkout.</value>
  </data>
  <data name="lblOrderTemplateAnon.Text" xml:space="preserve">
    <value>Anonymous Order Confirm Email Template</value>
  </data>
  <data name="lblAnonymousUserEmailCaption.Text" xml:space="preserve">
    <value>Anonymous User Order Confirmation Email</value>
  </data>
  <data name="lblNewsLetterEmailCaption.Text" xml:space="preserve">
    <value>Product Newsletter Email</value>
  </data>
  <data name="lblOrderDetailsTemplateAnon.Help" xml:space="preserve">
    <value>HTML template used to output each line item into the Order Confirm Email Template when the order is placed by an anonymous user</value>
  </data>
  <data name="lblOrderDetailsTemplateAnon.Text" xml:space="preserve">
    <value>Anonymous Order Details Confirm Template</value>
  </data>
  <data name="lblRegisterUserEmailCaption.Text" xml:space="preserve">
    <value>Registered User Order Confirmation Email</value>
  </data>
  <data name="lblStatusEmailCaption.Text" xml:space="preserve">
    <value>Status Change Email</value>
  </data>
  <data name="charCount.Text" xml:space="preserve">
    <value>characters remaining</value>
  </data>
  <data name="dshStoreLocation.Text" xml:space="preserve">
    <value>Store Location</value>
  </data>
  <data name="lblAddress1.Help" xml:space="preserve">
    <value>The 1st line of the address of your store.</value>
  </data>
  <data name="lblAddress1.Text" xml:space="preserve">
    <value>Store Address 1</value>
  </data>
  <data name="lblAddress2.Help" xml:space="preserve">
    <value>The 2nd line of the address your store is located in.</value>
  </data>
  <data name="lblAddress2.Text" xml:space="preserve">
    <value>Store Address 2</value>
  </data>
  <data name="lblCity.Help" xml:space="preserve">
    <value>The city that your store is located in.</value>
  </data>
  <data name="lblCity.Text" xml:space="preserve">
    <value>Store City</value>
  </data>
  <data name="lblStates.Help" xml:space="preserve">
    <value>The state or province of your store.</value>
  </data>
  <data name="lblStates.Text" xml:space="preserve">
    <value>Store State / Province</value>
  </data>
  <data name="lblStoreCountry.Help" xml:space="preserve">
    <value>The country that your store is based in.</value>
  </data>
  <data name="lblStoreCountry.Text" xml:space="preserve">
    <value>Store Country</value>
  </data>
  <data name="lblStoreZip.Help" xml:space="preserve">
    <value>The zip or postal code where the store is located.</value>
  </data>
  <data name="lblStoreZip.Text" xml:space="preserve">
    <value>Store Zip / Postal Code</value>
  </data>
  <data name="lblStoreCurrency.Help" xml:space="preserve">
    <value>The currency that the store will sell its products in.</value>
  </data>
  <data name="lblStoreCurrency.Text" xml:space="preserve">
    <value>Store Currency</value>
  </data>
  <data name="dshProductComparison.Text" xml:space="preserve">
    <value>Product Comparison Settings</value>
  </data>
  <data name="lblProductComparisionOptions.Text" xml:space="preserve">
    <value>The below options allow you to define when a user is comparing products via the product comparison option, which items will appear in the comparison. Note if all comparison options are not selected the product comparison feature will be disabled.</value>
  </data>
  <data name="lblProductComparisonAvgRating.Help" xml:space="preserve">
    <value>Allow the user to compare the average customer rating of the product.</value>
  </data>
  <data name="lblProductComparisonAvgRating.Text" xml:space="preserve">
    <value>Average Customer Rating</value>
  </data>
  <data name="lblProductComparisonHeight.Help" xml:space="preserve">
    <value>Allow the user to compare product height.</value>
  </data>
  <data name="lblProductComparisonHeight.Text" xml:space="preserve">
    <value>Product Height</value>
  </data>
  <data name="lblProductComparisonLength.Help" xml:space="preserve">
    <value>Allow the user to compare the product length.</value>
  </data>
  <data name="lblProductComparisonLength.Text" xml:space="preserve">
    <value>Product Length</value>
  </data>
  <data name="lblProductComparisonManufacturer.Help" xml:space="preserve">
    <value>Allow the user to compare the product manufacturer</value>
  </data>
  <data name="lblProductComparisonManufacturer.Text" xml:space="preserve">
    <value>Product Manufacturer</value>
  </data>
  <data name="lblProductComparisonModelNumber.Help" xml:space="preserve">
    <value>Allow the user to compare the product model number.</value>
  </data>
  <data name="lblProductComparisonModelNumber.Text" xml:space="preserve">
    <value>Product Model Number</value>
  </data>
  <data name="lblProductComparisonPrice.Help" xml:space="preserve">
    <value>Allow the user to compare the products price.</value>
  </data>
  <data name="lblProductComparisonPrice.Text" xml:space="preserve">
    <value>Product Price</value>
  </data>
  <data name="lblProductComparisonProductName.Help" xml:space="preserve">
    <value>Allow the user to compare the product name.</value>
  </data>
  <data name="lblProductComparisonProductName.Text" xml:space="preserve">
    <value>Product Name</value>
  </data>
  <data name="lblProductComparisonQtyInStock.Help" xml:space="preserve">
    <value>Allow the user to compare the quantity in stock for the products.</value>
  </data>
  <data name="lblProductComparisonQtyInStock.Text" xml:space="preserve">
    <value>Product Qty In Stock</value>
  </data>
  <data name="lblProductComparisonWeight.Help" xml:space="preserve">
    <value>Allow the user to compare the product weight.</value>
  </data>
  <data name="lblProductComparisonWeight.Text" xml:space="preserve">
    <value>Product Weight</value>
  </data>
  <data name="lblProductComparisonWidth.Help" xml:space="preserve">
    <value>Allow the user to compare the product width.</value>
  </data>
  <data name="lblProductComparisonWidth.Text" xml:space="preserve">
    <value>Product Width</value>
  </data>
  <data name="lblProductComparisonProductSummary.Help" xml:space="preserve">
    <value>Allows the user to compare the product summary on the product comparison section.</value>
  </data>
  <data name="lblProductComparisonProductSummary.Text" xml:space="preserve">
    <value>Product Summary</value>
  </data>
  <data name="lblProductVisualizerImageWidth.Help" xml:space="preserve">
    <value>The width we should scale the product visualizer base image to</value>
  </data>
  <data name="lblProductVisualizerImageWidth.Text" xml:space="preserve">
    <value>Product Visualizer Base Image Width</value>
  </data>
  <data name="dshGATracking.Text" xml:space="preserve">
    <value>Google Analytics Tracking</value>
  </data>
  <data name="lblGaTrackingEnable.Help" xml:space="preserve">
    <value>When checked Cart Viper will record ecommerce sales and events directly to Google Analytics</value>
  </data>
  <data name="lblGaTrackingEnable.Text" xml:space="preserve">
    <value>Enable Google Analytics Tracking</value>
  </data>
  <data name="lblGaTrackingInfo.Text" xml:space="preserve">
    <value>Enabling this feature will track ecommerce transactions and various events in Google Analytics. &lt;br/&gt;You should already have the main GA tracking code loaded in the &amp;lt;head&amp;gt; or somewhere near the top of your portal skin. &lt;br/&gt;&lt;br/&gt;Please see the Cart Viper manual for more information.</value>
  </data>
  <data name="lblGaTrackingMode.Help" xml:space="preserve">
    <value>Defines the mode in which Google Analytics will be called. See the Cart Viper manual for more information.</value>
  </data>
  <data name="lblGaTrackingMode.Text" xml:space="preserve">
    <value>Tracking Mode</value>
  </data>
  <data name="rbGaTrackingAsync.Text" xml:space="preserve">
    <value>Asynchronous</value>
  </data>
  <data name="rbGaTrackingSync.Text" xml:space="preserve">
    <value>Synchronous</value>
  </data>
  <data name="dshOrderNotification.Text" xml:space="preserve">
    <value>Order Notification Callback</value>
  </data>
  <data name="lblOrderNotifyEnabled.Help" xml:space="preserve">
    <value>When checked the url below is called with a HTTP POST containing the details of the order just placed.</value>
  </data>
  <data name="lblOrderNotifyEnabled.Text" xml:space="preserve">
    <value>Enable Order Notification</value>
  </data>
  <data name="lblOrderNotifySecret.Help" xml:space="preserve">
    <value>Option secret which is used to create a hash so that the remote callback URL can determine if the message is valid.</value>
  </data>
  <data name="lblOrderNotifySecret.Text" xml:space="preserve">
    <value>Shared Secret</value>
  </data>
  <data name="lblOrderNotifyUrl.Help" xml:space="preserve">
    <value>URL to call with the HTTP POST request</value>
  </data>
  <data name="lblOrderNotifyUrl.Text" xml:space="preserve">
    <value>Callback URL</value>
  </data>
  <data name="cvOrderNotifyUrl.Text" xml:space="preserve">
    <value>&lt;br/&gt;Please enter a url, this should start with http:// or https://</value>
  </data>
  <data name="lblLuceneDefaultOperator.Help" xml:space="preserve">
    <value>Defines the default operator used between each word in the search query</value>
  </data>
  <data name="lblLuceneDefaultOperator.Text" xml:space="preserve">
    <value>Search Default Operator</value>
  </data>
  <data name="rbLuceneDefaultOperatorAnd.Text" xml:space="preserve">
    <value>AND</value>
  </data>
  <data name="rbLuceneDefaultOperatorOr.Text" xml:space="preserve">
    <value>OR</value>
  </data>
  <data name="lblBitlyApiKey.Help" xml:space="preserve">
    <value>API Key for the Bit.ly shorten Url service</value>
  </data>
  <data name="lblBitlyApiKey.Text" xml:space="preserve">
    <value>Bit.ly API Key</value>
  </data>
  <data name="lblBitlyUsername.Help" xml:space="preserve">
    <value>Username for the Bit.ly shorten Url service</value>
  </data>
  <data name="lblBitlyUsername.Text" xml:space="preserve">
    <value>Bit.ly Username</value>
  </data>
  <data name="lblUsStateFormat.Help" xml:space="preserve">
    <value>Defines if we display the US States as codes or full names, eg. FL or Florida</value>
  </data>
  <data name="lblUsStateFormat.Text" xml:space="preserve">
    <value>US State Format</value>
  </data>
  <data name="rbStateCode.Text" xml:space="preserve">
    <value>State Code</value>
  </data>
  <data name="rbStateName.Text" xml:space="preserve">
    <value>State Name</value>
  </data>
  <data name="lblPdfItemPrefix.Help" xml:space="preserve">
    <value>Allows you to output the Model Number or SKU of each product in the order PDF</value>
  </data>
  <data name="lblPdfItemPrefix.Text" xml:space="preserve">
    <value>Product Name Prefix</value>
  </data>
  <data name="rbPdfItemPrefixModelNumber.Text" xml:space="preserve">
    <value>Model Number</value>
  </data>
  <data name="rbPdfItemPrefixNone.Text" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="rbPdfItemPrefixSku.Text" xml:space="preserve">
    <value>SKU</value>
  </data>
  <data name="lblManageStoreRole.Help" xml:space="preserve">
    <value>The role that will allow the user to manage the store, users in this role will only have access to: Coupons,Orders,Sales Stats,Reports,Categories,Products and Review.</value>
  </data>
  <data name="lblManageStoreRole.Text" xml:space="preserve">
    <value>Manage Store Role</value>
  </data>
  <data name="lblCategoryImageWidth.Help" xml:space="preserve">
    <value>The width of the images that are outputted for the product categories.</value>
  </data>
  <data name="lblCategoryImageWidth.Text" xml:space="preserve">
    <value>Category Image Width</value>
  </data>
  <data name="lblGenerateRegistrationCode.Help" xml:space="preserve">
    <value>If selected when a user purchases a digital download when they have not registered for an account a random alphanumeric string will be generated and sent to them. This could then be used in for redemption purchases etc.</value>
  </data>
  <data name="lblGenerateRegistrationCode.Text" xml:space="preserve">
    <value>Generate Registration Code</value>
  </data>
  <data name="lblEmailToCustomer.Help" xml:space="preserve">
    <value>If selected once a customer has placed an order along with their email confirming their purchase they will also be emailed a copy of the order PDF.</value>
  </data>
  <data name="lblEmailToCustomer.Text" xml:space="preserve">
    <value>Email To Customer When Order Placed</value>
  </data>
  <data name="revEmail.Text" xml:space="preserve">
    <value>Invalid email address</value>
  </data>
  <data name="rfvEmail.Text" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="lblOrderAwaitingModerationCaption.Text" xml:space="preserve">
    <value>Order Moderation Email</value>
  </data>
  <data name="lblOrderToCustomerAwaitingModeration.Help" xml:space="preserve">
    <value>The email that is sent to the customer once they have placed an order that needs to be moderated.</value>
  </data>
  <data name="lblOrderToCustomerAwaitingModeration.Text" xml:space="preserve">
    <value>Order Confirm Awaiting Moderation</value>
  </data>
  <data name="lblModerationCompleteOrderDetailsEmail.Help" xml:space="preserve">
    <value>HTML template used to output each line item into the Moderation Complete Order Details Email Template</value>
  </data>
  <data name="lblModerationCompleteOrderDetailsEmail.Text" xml:space="preserve">
    <value>Moderation Complete Order Details Email</value>
  </data>
  <data name="lblModerationCompleteOrderEmail.Help" xml:space="preserve">
    <value>The email that is sent to the customer once their order has been moderated by the store admin.</value>
  </data>
  <data name="lblModerationCompleteOrderEmail.Text" xml:space="preserve">
    <value>Moderation Complete Order Email</value>
  </data>
  <data name="lblPurchaseOrderDetailsEmailTemplate.Help" xml:space="preserve">
    <value>This template is used with Purchase Order Email template to output the items in the purchase order.</value>
  </data>
  <data name="lblPurchaseOrderDetailsEmailTemplate.Text" xml:space="preserve">
    <value>Purchase Order Details Email Template</value>
  </data>
  <data name="lblPurchaseOrderEmail.Text" xml:space="preserve">
    <value>Purchase Order Email</value>
  </data>
  <data name="lblPurchaseOrderEmailTemplate.Help" xml:space="preserve">
    <value>Once an order has been moderated this email is then generated and sent to the store admin confirming the purchase order that has been created.</value>
  </data>
  <data name="lblPurchaseOrderEmailTemplate.Text" xml:space="preserve">
    <value>Purchase Order Email Template</value>
  </data>
  <data name="lblMinOrderValue.Help" xml:space="preserve">
    <value>The minimum value ex vat / tax that a users subtotal must meet before they are allowed to checkout.</value>
  </data>
  <data name="lblMinOrderValue.Text" xml:space="preserve">
    <value>Minimum Subtotal Value</value>
  </data>
  <data name="lblQtyRestriction.Help" xml:space="preserve">
    <value>You can optionally enter values here that would define in what qty's this item can be purchased in. You can enter the qtys comma seperated or a range of numbers. This will be used globally for all products if selected, however it will also be possible to override this on a per product basis.</value>
  </data>
  <data name="lblQtyRestriction.Text" xml:space="preserve">
    <value>Global Qty Restriction</value>
  </data>
  <data name="dshPreCheckoutNotification.Text" xml:space="preserve">
    <value>Pre Checkout Notification Callback</value>
  </data>
  <data name="lblPrecheckoutNotification.Help" xml:space="preserve">
    <value>If selected before the user can place the order we will send a HTTP post with the users order to the supplied URl. If the order is verified the user will be able to checkout, if not they wont and the reason will be displayed to them.</value>
  </data>
  <data name="lblPrecheckoutNotification.Text" xml:space="preserve">
    <value>Enable Pre Checkout Notification</value>
  </data>
  <data name="lblPrecheckoutNotifySecret.Help" xml:space="preserve">
    <value>The shared secret we should use for the pre checkout notification</value>
  </data>
  <data name="lblPrecheckoutNotifySecret.Text" xml:space="preserve">
    <value>Precheckout Notification Shared Secret</value>
  </data>
  <data name="lblPreCheckoutOrderNotifyUrl.Help" xml:space="preserve">
    <value>The URL we should use to post the data to for verification.</value>
  </data>
  <data name="lblPreCheckoutOrderNotifyUrl.Text" xml:space="preserve">
    <value>Pre Checkout Order Notification URL</value>
  </data>
  <data name="lblAdditionalStoreEmailAddress.Help" xml:space="preserve">
    <value>Here you can optionally enter a list of separate email addresses. Each address should be separated using ";". Each email address will receive confirmation once an order is placed by a customer.</value>
  </data>
  <data name="lblAdditionalStoreEmailAddress.Text" xml:space="preserve">
    <value>Additional Email Addresses</value>
  </data>
  <data name="lblEmailHelp.Text" xml:space="preserve">
    <value>e.g. test@com.net;test2@com.net;test3@com.net</value>
  </data>
  <data name="btnInstallSiteMap.Text" xml:space="preserve">
    <value>Install SiteMap</value>
  </data>
  <data name="lblSiteMap.Help" xml:space="preserve">
    <value>When installed this will list all your products in the sitemap generated by DNN. This feature can only be used in DNN 5.3 or greater.</value>
  </data>
  <data name="lblSiteMap.Text" xml:space="preserve">
    <value>SiteMap</value>
  </data>
  <data name="lblSiteMapAlreadyInstalled.Text" xml:space="preserve">
    <value>SiteMap is already installed.</value>
  </data>
  <data name="lblSiteMapNotSupported.Text" xml:space="preserve">
    <value>SiteMap is only supported in DNN 5.3 or greater</value>
  </data>
  <data name="lblYouTubeVideoHeight.Help" xml:space="preserve">
    <value>The height in PX that we should output the YouTube videos for the product.</value>
  </data>
  <data name="lblYouTubeVideoHeight.Text" xml:space="preserve">
    <value>YouTube Video Height</value>
  </data>
  <data name="lblYouTubeVideoWidth.Help" xml:space="preserve">
    <value>The width in PX that we should output the YouTube videos for the product.</value>
  </data>
  <data name="lblYouTubeVideoWidth.Text" xml:space="preserve">
    <value>YouTube Video Width</value>
  </data>
  <data name="dshAwsMessageQueue.Text" xml:space="preserve">
    <value>Amazon Order Message Queue</value>
  </data>
  <data name="lblAwsAccessKey.Help" xml:space="preserve">
    <value>The access key you were given when you signed up for your AWS account.</value>
  </data>
  <data name="lblAwsAccessKey.Text" xml:space="preserve">
    <value>AWS Access Key</value>
  </data>
  <data name="lblAwsSecretKey.Help" xml:space="preserve">
    <value>The secret key that you were given when you signed up for your AWS account.</value>
  </data>
  <data name="lblAwsSecretKey.Text" xml:space="preserve">
    <value>AWS Secret Key</value>
  </data>
  <data name="lblEnableAwsOrderQueue.Help" xml:space="preserve">
    <value>If checked after an order is placed we will place the order in the AWS message queue to be processed by a 3rd party resource.</value>
  </data>
  <data name="lblEnableAwsOrderQueue.Text" xml:space="preserve">
    <value>Enable AWS Message Queue</value>
  </data>
  <data name="lblAwsQueueName.Help" xml:space="preserve">
    <value>The name of the queue we should add the order messages to, note the queue does not need to exist, Cart Viper will make the queue with this name if it does not exist.</value>
  </data>
  <data name="lblAwsQueueName.Text" xml:space="preserve">
    <value>AWS Queue Name</value>
  </data>
  <data name="lblAwsQueueFormat.Help" xml:space="preserve">
    <value>Defines the format of the message sent to the AWS SQS queue.</value>
  </data>
  <data name="lblAwsQueueFormat.Text" xml:space="preserve">
    <value>Payload Format</value>
  </data>
  <data name="lblQuoteThreshold.Help" xml:space="preserve">
    <value>Enter the sub total value that a cart needs before the user is presented with the option to get a quote for the items. A value of less than zero turns off the quote feature.</value>
  </data>
  <data name="lblQuoteThreshold.Text" xml:space="preserve">
    <value>Quote Threshold Amount</value>
  </data>
  <data name="btnInstallQuoteImportJob.Text" xml:space="preserve">
    <value>Install Job</value>
  </data>
  <data name="lblInstallQuoteImportJob.Help" xml:space="preserve">
    <value>Installs the schedule job used to import xml files from the quote import table. This job runs at a 30 minute interval by default.</value>
  </data>
  <data name="lblInstallQuoteImportJob.Text" xml:space="preserve">
    <value>Install Quote Import Job</value>
  </data>
  <data name="lblQuoteDayLimit.Help" xml:space="preserve">
    <value>The number of days a quote is value for once approved by the store admin. The customer can only purchase the quote when within this time limit. Once expired the quote can't be purchased. A value of less than zero means no time limit is applied to the quote.</value>
  </data>
  <data name="lblQuoteDayLimit.Text" xml:space="preserve">
    <value>Quote Expiry Limit (days)</value>
  </data>
  <data name="lblQuoteImportJobAlreadyInstalled.Text" xml:space="preserve">
    <value>Job is already installed</value>
  </data>
  <data name="lblEnableCustomerModeration.Help" xml:space="preserve">
    <value>When enable it allows customer accounts to require approve from a manager account before the order can be placed in the system</value>
  </data>
  <data name="lblEnableCustomerModeration.Text" xml:space="preserve">
    <value>Enable Customer Order Moderation</value>
  </data>
  <data name="lblManagerAcceptOrderEmail.Help" xml:space="preserve">
    <value>The email template we should use to email the user when a manager accepts their order.</value>
  </data>
  <data name="lblManagerAcceptOrderEmail.Text" xml:space="preserve">
    <value>Manager Accept Order Email</value>
  </data>
  <data name="lblManagerApproveOrdersEmail.Text" xml:space="preserve">
    <value>Manager Approves User Order Email</value>
  </data>
  <data name="lblManagerDeclineOrderEmail.Help" xml:space="preserve">
    <value>The email template we should use to email the user when the manager rejects their order.</value>
  </data>
  <data name="lblManagerDeclineOrderEmail.Text" xml:space="preserve">
    <value>Manager Decline Order Email</value>
  </data>
  <data name="lblManagerModerationPending.Help" xml:space="preserve">
    <value>Email that is sent to the customer and customer manager when the order is first placed, this prompts the customer manager to moderate the pending order.</value>
  </data>
  <data name="lblManagerModerationPending.Text" xml:space="preserve">
    <value>Pending Moderation Request</value>
  </data>
  <data name="lblEnableAuditLog.Help" xml:space="preserve">
    <value>When checked all changes made to the products, categories, offers and reviews will be record in an audit log.</value>
  </data>
  <data name="lblEnableAuditLog.Text" xml:space="preserve">
    <value>Enable Audit Log</value>
  </data>
  <data name="lblDays.Text" xml:space="preserve">
    <value>Days</value>
  </data>
  <data name="lblGlobalDigitalDownloadExpiry.Help" xml:space="preserve">
    <value>The number of days after a user has purchased the product they have to download the item. This can be overidden on a per product basis. If there is no limit leave blank.</value>
  </data>
  <data name="lblGlobalDigitalDownloadExpiry.Text" xml:space="preserve">
    <value>Global Digital Download Expiry</value>
  </data>
  <data name="lblGlobalDigitalDownloadLimit.Help" xml:space="preserve">
    <value>The global limit digital download files can be downloaded once purchased by a user, this can be overridden on a per product basis. If there is no limit leave this option blank.</value>
  </data>
  <data name="lblGlobalDigitalDownloadLimit.Text" xml:space="preserve">
    <value>Global Digital Download Limit</value>
  </data>
  <data name="lblCartCookieExpiry.Help" xml:space="preserve">
    <value>The number of days in the future that the cookie used to hold the customers cart is stored. Set this value to zero to have the cookie removed when the browser is closed.</value>
  </data>
  <data name="lblCartCookieExpiry.Text" xml:space="preserve">
    <value>Cart Cookie Expiry Days</value>
  </data>
  <data name="lblGACheckoutHelp.Text" xml:space="preserve">
    <value>It is very important that in addition to enabling this setting you have your Google analytics tracking code in your portal skin. If you do not have this code in the skin you will cause a javascript error that will result in the add / delete from cart functions with Cart Viper ceasing to work.</value>
  </data>
  <data name="lblShowRestrictedCategories.Help" xml:space="preserve">
    <value>When selected restricted categories/products will be shown to all users. If the user doesn't have the required permission a caption will be shown when they attempt to add the item to their cart.</value>
  </data>
  <data name="lblShowRestrictedCategories.Text" xml:space="preserve">
    <value>Show Restricted Categories/Products</value>
  </data>
  <data name="lblRestrictionOverrideMessage.Help" xml:space="preserve">
    <value>Message shown to uses that don't have the required permission to add a restricted item into the their cart.</value>
  </data>
  <data name="lblRestrictionOverrideMessage.Text" xml:space="preserve">
    <value>Products Restriction Caption</value>
  </data>
  <data name="lblDisableAnonOrderConfirmationEmail.Help" xml:space="preserve">
    <value>If selected the email that confirms an anonymous users order will not be sent.</value>
  </data>
  <data name="lblDisableAnonOrderConfirmationEmail.Text" xml:space="preserve">
    <value>Disable Anon Order Confirmation Email</value>
  </data>
  <data name="lblDisableEmail.Help" xml:space="preserve">
    <value>If selected this email will NOT be sent an email confirming their order.</value>
  </data>
  <data name="lblDisableEmail.Text" xml:space="preserve">
    <value>Disable Order Confirmation Email</value>
  </data>
  <data name="lblDisableModerationResult.Help" xml:space="preserve">
    <value>If selected we will not send the user an email once their order has been moderated.</value>
  </data>
  <data name="lblDisableModerationResult.Text" xml:space="preserve">
    <value>Disable Order Moderation Result Email</value>
  </data>
  <data name="lblDisableOrderAwaitingModeration.Help" xml:space="preserve">
    <value>If selected the email that is sent to the user when their order is awaiting moderation will not be sent.</value>
  </data>
  <data name="lblDisableOrderAwaitingModeration.Text" xml:space="preserve">
    <value>Disable Order Awaiting Moderation Email</value>
  </data>
  <data name="lblDisableOrderCompleteModeration.Help" xml:space="preserve">
    <value>If selected the user will NOT be sent an email when their order has completed moderation.</value>
  </data>
  <data name="lblDisableOrderCompleteModeration.Text" xml:space="preserve">
    <value>Disable Order Complete Moderation Email</value>
  </data>
  <data name="lblDisableOrderModerationEmail.Help" xml:space="preserve">
    <value>If selected we will not send the order moderation email.</value>
  </data>
  <data name="lblDisableOrderModerationEmail.Text" xml:space="preserve">
    <value>Disable Order Moderation Email</value>
  </data>
  <data name="lblDisableOrderStatusChangeEmail.Help" xml:space="preserve">
    <value>If selected the user will NOT be sent an email confirming when their order status has changed.</value>
  </data>
  <data name="lblDisableOrderStatusChangeEmail.Text" xml:space="preserve">
    <value>Disable Order Status Changed Email</value>
  </data>
  <data name="lblDisablePurchaseOrderEmail.Help" xml:space="preserve">
    <value>If selected the purchase order email will not be sent.</value>
  </data>
  <data name="lblDisablePurchaseOrderEmail.Text" xml:space="preserve">
    <value>Disable Purchase Order Email</value>
  </data>
  <data name="lblAddProductsRole.Help" xml:space="preserve">
    <value>Users in this role will only be able to add products, note when they add a product it will need approved by a store admin before it is live.</value>
  </data>
  <data name="lblAddProductsRole.Text" xml:space="preserve">
    <value>Add Products Only Role</value>
  </data>
  <data name="lblDownloadExtensions.Help" xml:space="preserve">
    <value>Comma separated list of extensions which can be used as a digital download for a product.</value>
  </data>
  <data name="lblDownloadExtensions.Text" xml:space="preserve">
    <value>Allowable Download Extensions</value>
  </data>
  <data name="lblRequiredField.Text" xml:space="preserve">
    <value>Fields marked with &lt;span class="NormalRed"&gt;*&lt;/span&gt; are required</value>
  </data>
  <data name="lblDataSheetExtensions.Help" xml:space="preserve">
    <value>Extensions that we allow for the product datasheets</value>
  </data>
  <data name="lblDataSheetExtensions.Text" xml:space="preserve">
    <value>Allowed Product Datasheet Extensions</value>
  </data>
  <data name="lblAdminCreateCustomerOrders.Help" xml:space="preserve">
    <value>Allows the store admin the ability to create an order for a customer. The customer can then just purchase the order using their credit card.</value>
  </data>
  <data name="lblAdminCreateCustomerOrders.Text" xml:space="preserve">
    <value>Create Orders on Behalf of Customers</value>
  </data>
  <data name="lblNewsLetterAutoSubscribe.Help" xml:space="preserve">
    <value>When checked any user will be added tot he subscribers list without having to validate their email address.</value>
  </data>
  <data name="lblNewsLetterAutoSubscribe.Text" xml:space="preserve">
    <value>Auto Subscribe User</value>
  </data>
  <data name="lblEnableGoogleProductFeed.Help" xml:space="preserve">
    <value>When enable you will be export your products to the Google Merchant Center</value>
  </data>
  <data name="lblEnableGoogleProductFeed.Text" xml:space="preserve">
    <value>Enable Google Product Feed</value>
  </data>
  <data name="lblGoogleProductFeedHelp.Text" xml:space="preserve">
    <value>You have now turned on the Google Product Feed, you will need to set some values at the category and product level to define the data needed. See the user manual for more information.&lt;br/&gt; &lt;br/&gt;The URL to submit your products via the Google Merchant Center is shown below.</value>
  </data>
  <data name="lblChargeShippingOnEvents.Help" xml:space="preserve">
    <value>If selected we will charge shipping on events products.</value>
  </data>
  <data name="lblChargeShippingOnEvents.Text" xml:space="preserve">
    <value>Charge Shipping On Events Products</value>
  </data>
  <data name="dshAffiliateTracking.Text" xml:space="preserve">
    <value>Affiliate Tracking</value>
  </data>
  <data name="lblAffiliateHelp.Text" xml:space="preserve">
    <value>Here you can enter any affiliate tracking code that should be outputted on the order confirmation page. A token system is supported where the tokens are replaced with the actual values:&lt;br /&gt;&lt;br /&gt; e.g. &lt;br /&gt;http://www.someurl.com?orderID=[ORDERID]&amp;ordervalue=[ORDERTOTAL]&amp;coupon=[COUPONCODE]&lt;br /&gt;&lt;br /&gt;Please see our userguide for more information.</value>
  </data>
  <data name="lblAffiliateTracking.Help" xml:space="preserve">
    <value>Here you can enter any affiliate tracking code that should be outputted on order confirmation page.</value>
  </data>
  <data name="lblAffiliateTracking.Text" xml:space="preserve">
    <value>Affiliate Tracking HTML</value>
  </data>
  <data name="lblOrderPdfShowUsername.Help" xml:space="preserve">
    <value>When ticked the the username and display name of the customer will be shown in the order PDF.</value>
  </data>
  <data name="lblOrderPdfShowUsername.Text" xml:space="preserve">
    <value>Display Username in PDF</value>
  </data>
  <data name="dshThub.Text" xml:space="preserve">
    <value>T-Hub QuickBooks Integration</value>
  </data>
  <data name="lblAllowThub.Help" xml:space="preserve">
    <value>If selected we will support exporting orders to T-Hub web service which in turn will import your orders into QuickBooks</value>
  </data>
  <data name="lblAllowThub.Text" xml:space="preserve">
    <value>Allow T-Hub Integration</value>
  </data>
  <data name="lblThubPassword.Help" xml:space="preserve">
    <value>Your T-Hub password</value>
  </data>
  <data name="lblThubPassword.Text" xml:space="preserve">
    <value>T-Hub Password</value>
  </data>
  <data name="lblThubUsername.Help" xml:space="preserve">
    <value>Your T-Hub username</value>
  </data>
  <data name="lblThubUsername.Text" xml:space="preserve">
    <value>T-Hub Username</value>
  </data>
  <data name="lblThubHelp.Text" xml:space="preserve">
    <value>Enter the below URL into the T-Hub product to query your store for orders:&lt;br /&gt;&lt;br /&gt;{0}</value>
  </data>
  <data name="lblAdminEmailConfirmCaption.Text" xml:space="preserve">
    <value>Admin Order Confirmation Email</value>
  </data>
  <data name="lblAdminOrderConfirm.Help" xml:space="preserve">
    <value>HTML template used to create the order confirmation email that is sent to the store admin when an order is placed.</value>
  </data>
  <data name="lblAdminOrderConfirm.Text" xml:space="preserve">
    <value>Order Confirm Email Template</value>
  </data>
  <data name="lblAdminOrderDetailsConfirm.Help" xml:space="preserve">
    <value>TML template used to output each line item into the Order Confirm Email Template</value>
  </data>
  <data name="lblAdminOrderDetailsConfirm.Text" xml:space="preserve">
    <value>Admin Order Details Confirm Template</value>
  </data>
  <data name="lblDisableAdminEmail.Help" xml:space="preserve">
    <value>If selected the email that confirms an order to the store admin will not be sent.</value>
  </data>
  <data name="lblDisableAdminEmail.Text" xml:space="preserve">
    <value>Disable Admin Order Confirmation Email</value>
  </data>
  <data name="lblUseDNNFilePicker.Help" xml:space="preserve">
    <value>If selected rather than use the Silverlight control we will use the DNN file picker to assign product images.</value>
  </data>
  <data name="lblUseDNNFilePicker.Text" xml:space="preserve">
    <value>DNN picker for product images</value>
  </data>
  <data name="lblEnableHttpModuleRedirect.Help" xml:space="preserve">
    <value>When enabled you are able to define urls which are then mapped to a product or category in Cart Viper. </value>
  </data>
  <data name="lblEnableHttpModuleRedirect.Text" xml:space="preserve">
    <value>Enable Category and Product Redirection Rules</value>
  </data>
  <data name="dshProductCategoryWorkFlow.Text" xml:space="preserve">
    <value>Product &amp; Category Workflow</value>
  </data>
  <data name="lblContentCreatorRole.Help" xml:space="preserve">
    <value>Users in this role can add / edit products and categories however before their changes need to be moderated by the store admin before they appear within the store.</value>
  </data>
  <data name="lblContentCreatorRole.Text" xml:space="preserve">
    <value>Content Creator Role</value>
  </data>
  <data name="lblHours.Text" xml:space="preserve">
    <value>Hours</value>
  </data>
  <data name="lblHrsBeforeReminderSent.Help" xml:space="preserve">
    <value>The number of hours the admin has to moderate a change before a reminder email is sent to them.</value>
  </data>
  <data name="lblHrsBeforeReminderSent.Text" xml:space="preserve">
    <value>Hours Before Reminder Sent</value>
  </data>
  <data name="lblWorkFlowHelp.Text" xml:space="preserve">
    <value>By selecting a role for the content creator you are defining that any users in this role can add / edit categories and products however before their changes appear in the store front they need to be moderated by the store admin. You can also specify the number of hours before a reminder email is sent to the admin if they have not moderated a change within the given time period.</value>
  </data>
  <data name="lblAdditionalProductImageWidth.Help" xml:space="preserve">
    <value>If a product has additional images this is the width they will be outputted at.</value>
  </data>
  <data name="lblAdditionalProductImageWidth.Text" xml:space="preserve">
    <value>Additional Product Image Width</value>
  </data>
  <data name="lblUseCustomAddressLayout.Help" xml:space="preserve">
    <value>If selected we will use the template "UIBillingAddressLayout.htm" and "UIShippingAddressLayout.htm" to render addresses in the UI, emails and pdf.</value>
  </data>
  <data name="lblUseCustomAddressLayout.Text" xml:space="preserve">
    <value>Use Custom Address Layout</value>
  </data>
  <data name="lblDisplayZeroRatedVatPrices.Help" xml:space="preserve">
    <value>Select if you wish to display the inc VAT price of a product that is marked as zero rated</value>
  </data>
  <data name="lblDisplayZeroRatedVatPrices.Text" xml:space="preserve">
    <value>Display Zero Rated Vat Price</value>
  </data>
  <data name="lblRenderEngine.Help" xml:space="preserve">
    <value>Defines if the store front should render with the original template engine or the newer Razor templates.</value>
  </data>
  <data name="lblRenderEngine.Text" xml:space="preserve">
    <value>Template Engine</value>
  </data>
  <data name="rbOriginalTemplates.Text" xml:space="preserve">
    <value>Original Templates</value>
  </data>
  <data name="rbRazorTemplates.Text" xml:space="preserve">
    <value>Razor Templates</value>
  </data>
  <data name="lblTemplateTheme.Help" xml:space="preserve">
    <value>Defined which template to use for rendering the store front</value>
  </data>
  <data name="lblTemplateTheme.Text" xml:space="preserve">
    <value>Template Type</value>
  </data>
  <data name="rbTemplateThemeOriginal.Text" xml:space="preserve">
    <value>Original</value>
  </data>
  <data name="rbTemplateThemeResponsive.Text" xml:space="preserve">
    <value>Responsive</value>
  </data>
  <data name="lblOnlyCompareProductsSameCat.Help" xml:space="preserve">
    <value>If selected we will only allow a customer to compare products from the same category.</value>
  </data>
  <data name="lblOnlyCompareProductsSameCat.Text" xml:space="preserve">
    <value>Only Compare Products Same Category</value>
  </data>
  <data name="lblResponsiveNote.Text" xml:space="preserve">
    <value>&lt;strong&gt;Important&lt;/strong&gt;&lt;p&gt;Responsive Templates need you to use a skin which is already responsive and using Twitter Bootstrap version 3 or greater. The skin is responsible for loading the Twitter Bootstrap css file.&lt;/p&gt;&lt;p&gt;Further information is available in the user manual&lt;/p&gt;</value>
  </data>
  <data name="dshAwsAccount.Text" xml:space="preserve">
    <value>AWS Account</value>
  </data>
  <data name="dshAzureAccount.Text" xml:space="preserve">
    <value>Azure Account</value>
  </data>
  <data name="lblAzureAccount.Help" xml:space="preserve">
    <value>Azure Account name</value>
  </data>
  <data name="lblAzureAccount.Text" xml:space="preserve">
    <value>Azure Account</value>
  </data>
  <data name="lblAzureKey.Help" xml:space="preserve">
    <value>Security key to access the Azure service</value>
  </data>
  <data name="lblAzureKey.Text" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="lblDeleteAbandonCarts.Help" xml:space="preserve">
    <value>When selected we will purge any abandoned carts older than 90 days from the database. This is done using a scheduler task.</value>
  </data>
  <data name="lblDeleteAbandonCarts.Text" xml:space="preserve">
    <value>Delete Abandoned Carts</value>
  </data>
  <data name="lblLuceneAutoComplete.Help" xml:space="preserve">
    <value>When check the search box will automatically suggest search terms based on what the user types.</value>
  </data>
  <data name="lblLuceneAutoComplete.Text" xml:space="preserve">
    <value>Search Auto Complete</value>
  </data>
  <data name="lblIssueSerialPerLineQty.Help" xml:space="preserve">
    <value>If we are assigning product serials when a product is purchase this setting assigns 1 serial for every item purchased. Otherwise we will issue 1 per line item in the cart.</value>
  </data>
  <data name="lblIssueSerialPerLineQty.Text" xml:space="preserve">
    <value>Issue Product Serial Per Line Qty</value>
  </data>
  <data name="lblLuceneWildCardSearches.Help" xml:space="preserve">
    <value>If selected we will allow wild card searching meaning more results will be provided based on the search term.</value>
  </data>
  <data name="lblLuceneWildCardSearches.Text" xml:space="preserve">
    <value>Allow WildCard Searches</value>
  </data>
  <data name="lblAlternateShippingTemplate.Help" xml:space="preserve">
    <value>If the user enters a different email address for the shipping address this is the template we will use to email them.</value>
  </data>
  <data name="lblAlternateShippingTemplate.Text" xml:space="preserve">
    <value>Alternate Shipping Email Address Order Confirm Template</value>
  </data>
  <data name="lblAlternateShippingTemplate1.Help" xml:space="preserve">
    <value>If the user enters a different email address for the shipping address this is the template we will use to email them.</value>
  </data>
  <data name="lblAlternateShippingTemplate1.Text" xml:space="preserve">
    <value>Alternate Shipping Email Address Order Confirm Template</value>
  </data>
  <data name="lblWaterMarkCaption.Help" xml:space="preserve">
    <value>When text is entered this will appear on the large image. If this is blank no water mark will be added.</value>
  </data>
  <data name="lblWaterMarkCaption.Text" xml:space="preserve">
    <value>Water Mark Caption</value>
  </data>
  <data name="lblDisableAlternateShippingEmail.Help" xml:space="preserve">
    <value>If selected and the customer enters a different shipping email address, this email address will not be sent a copy of the order email.</value>
  </data>
  <data name="lblDisableAlternateShippingEmail.Text" xml:space="preserve">
    <value>Disable Alternate Shipping Email </value>
  </data>
  <data name="lblInstallReindexProductsJob.Help" xml:space="preserve">
    <value>Allows you to install a job that will automatically re-index the stores products. Note this is not required.</value>
  </data>
  <data name="lblInstallReindexProductsJob.Text" xml:space="preserve">
    <value>Install Re-Index Products Job</value>
  </data>
  <data name="lblReindexProductsJobAlreadyInstalled.Text" xml:space="preserve">
    <value>Job has been installed.</value>
  </data>
  <data name="lblMailChimpApiKey.Help" xml:space="preserve">
    <value>The api key we should use to communicate with MailChimp, this is  so we can integrate into their ecommerce 360 feature.</value>
  </data>
  <data name="lblMailChimpApiKey.Text" xml:space="preserve">
    <value>MailChimp Api Key</value>
  </data>
  <data name="lblVariantFileUploadExtensions.Help" xml:space="preserve">
    <value>Defines the file extensions which are allowed to be uploaded via the FileUpload variant option.</value>
  </data>
  <data name="lblVariantFileUploadExtensions.Text" xml:space="preserve">
    <value>Allowed Variant File Upload Extensions</value>
  </data>
  <data name="lblAutoUpsellRelatedProducts.Help" xml:space="preserve">
    <value>If selected when a product is added to the cart we will automatically add any related products to the cart at the same time. Note only products without variants will be auto added.</value>
  </data>
  <data name="lblAutoUpsellRelatedProducts.Text" xml:space="preserve">
    <value>Auto Upsell Related Products</value>
  </data>
  <data name="lblDisableRecurringBillingPaymentFailedEmail.Help" xml:space="preserve">
    <value>If selected we will not send the email when a recurring billing payment fails.</value>
  </data>
  <data name="lblDisableRecurringBillingPaymentFailedEmail.Text" xml:space="preserve">
    <value>Disable Recurring Billing Payment Failed Email</value>
  </data>
  <data name="lblRecurringBillingPaymentFailed.Help" xml:space="preserve">
    <value>The template we should use for sending the email when a recurring billing payment fails.</value>
  </data>
  <data name="lblRecurringBillingPaymentFailed.Text" xml:space="preserve">
    <value>Recurring Billing Payment Failed</value>
  </data>
  <data name="lblProductCompareHideAddToAdd.Help" xml:space="preserve">
    <value>If selected we will not show the add to cart button from the product comparison view.</value>
  </data>
  <data name="lblProductCompareHideAddToAdd.Text" xml:space="preserve">
    <value>Hide Add To Cart</value>
  </data>
  <data name="lblAwsRegion.Help" xml:space="preserve">
    <value>Select the region where your AWS objects are deployed</value>
  </data>
  <data name="lblAwsRegion.Text" xml:space="preserve">
    <value>AWS Region</value>
  </data>
  <data name="lblNonConsecutiveOrderNumbers.Help" xml:space="preserve">
    <value>When enabled orders will revert back to use the old way of displaying the internal order ID</value>
  </data>
  <data name="lblNonConsecutiveOrderNumbers.Text" xml:space="preserve">
    <value>Enable None Consecutive Order Numbers</value>
  </data>
</root>