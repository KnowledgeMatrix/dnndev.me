<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>Carro Viper Configuración del producto Widget</value>
  </data>
  <data name="lblItemLimit.Help" xml:space="preserve">
    <value>El número de productos para volver a la consulta, esta debe estar entre 1 y 10.Nota esta opción no es válida si el "producto único" es el tipo de filtro seleccionado.</value>
  </data>
  <data name="lblItemLimit.Text" xml:space="preserve">
    <value>Punto límite</value>
  </data>
  <data name="lblQueryParameter.Help" xml:space="preserve">
    <value>Opcionalmente proporcionar los parámetros necesarios para la consulta</value>
  </data>
  <data name="lblQueryParameter.Text" xml:space="preserve">
    <value>Consulta de parámetros</value>
  </data>
  <data name="lblQueryType.Help" xml:space="preserve">
    <value>Define el tipo de consulta utilizado para seleccionar los productos del catálogo</value>
  </data>
  <data name="lblQueryType.Text" xml:space="preserve">
    <value>Tipo de consulta</value>
  </data>
  <data name="lblTemplate.Help" xml:space="preserve">
    <value>Plantilla que se utiliza para transformar los productos que el en el código HTML</value>
  </data>
  <data name="lblTemplate.Text" xml:space="preserve">
    <value>Plantilla</value>
  </data>
  <data name="lbnManageTemplates.Text" xml:space="preserve">
    <value>Administrar plantillas</value>
  </data>
  <data name="QueryType.ManualSelection" xml:space="preserve">
    <value>Manual de Selección</value>
  </data>
  <data name="QueryType.NewItems" xml:space="preserve">
    <value>Nuevos productos</value>
  </data>
  <data name="QueryType.TopSellers" xml:space="preserve">
    <value>Los más vendidos</value>
  </data>
  <data name="rfvItemCount.Text" xml:space="preserve">
    <value>&lt;br/&gt; Punto Límite es necesario</value>
  </data>
  <data name="rvItemCount.Text" xml:space="preserve">
    <value>&lt;br/&gt; Punto límite debe estar entre 1 y 10</value>
  </data>
  <data name="QueryType.FeaturedItems" xml:space="preserve">
    <value>Artículos destacados</value>
  </data>
  <data name="lblAllCategories.Text" xml:space="preserve">
    <value>Todos los</value>
  </data>
  <data name="lblCategory.Help" xml:space="preserve">
    <value>Opcionalmente, seleccione una categoría, si los productos seleccionados serán seleccionados de esta categoría sobre la base de los criterios anteriores, u optar por elegir entre todas las categorías en la tienda. Tenga en cuenta que esta opción no es válida Identificación del "producto único" es el tipo de filtro.</value>
  </data>
  <data name="lblCategory.Text" xml:space="preserve">
    <value>Categoría de producto del filtro</value>
  </data>
  <data name="QueryType.RandomItems" xml:space="preserve">
    <value>Artículos al azar</value>
  </data>
  <data name="lblProduct.Help" xml:space="preserve">
    <value>Si queremos mostrar un solo producto, aquí es donde se selecciona el producto que se muestra en el widget de productos. Nota: esta opción sólo está disponible si el "producto único" es el filtro seleccionado.</value>
  </data>
  <data name="lblProduct.Text" xml:space="preserve">
    <value>Seleccionados del producto</value>
  </data>
  <data name="QueryType.SingleProduct" xml:space="preserve">
    <value>Un solo producto</value>
  </data>
  <data name="QueryType.SpecialOffer" xml:space="preserve">
    <value>Productos en oferta especial</value>
  </data>
</root>