<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnDelete.Text" xml:space="preserve">
    <value>Borrar</value>
  </data>
  <data name="btnUpload.Text" xml:space="preserve">
    <value>Subir</value>
  </data>
  <data name="dshUploadNewBaseImage.Text" xml:space="preserve">
    <value>Subir imagen nueva base</value>
  </data>
  <data name="hypAddNew.Text" xml:space="preserve">
    <value>Agregar nuevo marcador</value>
  </data>
  <data name="hypCancel.Text" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="hypEditproduct.Text" xml:space="preserve">
    <value>Edición del producto</value>
  </data>
  <data name="hypSave.Text" xml:space="preserve">
    <value>Ahorrar</value>
  </data>
  <data name="lblBaseImage.Help" xml:space="preserve">
    <value>La imagen de la corriente de base que se utilizará en el visualizador del producto.</value>
  </data>
  <data name="lblBaseImage.Text" xml:space="preserve">
    <value>Banco de Imágenes actuales</value>
  </data>
  <data name="lblDeleteExistingBaseImage.Help" xml:space="preserve">
    <value>Este botón elimina la imagen de base existentes y todos los marcadores asociados.</value>
  </data>
  <data name="lblDeleteExistingBaseImage.Text" xml:space="preserve">
    <value>Borrar la imagen actual base</value>
  </data>
  <data name="lblFont.Help" xml:space="preserve">
    <value>Si se trata de un marcador de texto se pueden insertar, seleccionar el estilo del texto será. Si esto no es aplicable en blanco salir.</value>
  </data>
  <data name="lblFont.Text" xml:space="preserve">
    <value>Estilo de la fuente</value>
  </data>
  <data name="lblFontColour.Help" xml:space="preserve">
    <value>Si se trata de un marcador de texto se pueden insertar, seleccionar el color del texto será. Si esto no es aplicable deje en blanco.</value>
  </data>
  <data name="lblFontColour.Text" xml:space="preserve">
    <value>Color de la fuente</value>
  </data>
  <data name="lblHeaderText.Text" xml:space="preserve">
    <value>Producto visualizador</value>
  </data>
  <data name="lblMaxNumberOfCharactersAllowed.Help" xml:space="preserve">
    <value>Si se aplica el maximium número de caracteres que el usuario puede colocar en el marcador.</value>
  </data>
  <data name="lblMaxNumberOfCharactersAllowed.Text" xml:space="preserve">
    <value>Maximium No: Personajes</value>
  </data>
  <data name="lblNoImageUploaded.Text" xml:space="preserve">
    <value>No hay imagen cargada.</value>
  </data>
  <data name="lblTextAlignment.Help" xml:space="preserve">
    <value>Si se trata de un marcador de texto se inserta, como si el texto se alinea en el marcador.</value>
  </data>
  <data name="lblTextAlignment.Text" xml:space="preserve">
    <value>Alineación del Texto</value>
  </data>
  <data name="lblUploadBaseImage.Help" xml:space="preserve">
    <value>Desde aquí se puede subir una imagen de base que se utilizará en el visualizador del producto, tenga en cuenta sólo una imagen puede ser cargado por cada producto.</value>
  </data>
  <data name="lblUploadBaseImage.Text" xml:space="preserve">
    <value>Sube Banco de Imágenes</value>
  </data>
  <data name="lblVariantOption.Help" xml:space="preserve">
    <value>La opción de la variante que se colocará en el marcador cuando la imagen maqueta se crea y se muestra al usuario.</value>
  </data>
  <data name="lblVariantOption.Text" xml:space="preserve">
    <value>Variante de la opción</value>
  </data>
  <data name="lblVisualizerInfo.Text" xml:space="preserve">
    <value>Cuando un producto tiene variantes, es posible mostrar al usuario lo que el producto se verá así con las personalizaciones que han hecho. En primer lugar cargar una imagen de base, a continuación, añadir marcadores a la imagen de base para cada personalización que el usuario puede hacer, teniendo cuidado de colocar el marcador en la posición en la imagen base, donde la personalización de los usuarios van a aparecer. &lt;br /&gt; Si el texto de personalización se inserta en el marcador, por favor, seleccione un color de fuente, el estilo y el límite de caracteres, de lo contrario dejarlo en blanco. &lt;br /&gt; Si una imagen se inserta en el marcador de la imagen de los usuarios se auto-escala para ajustarse al tamaño del marcador que usted defina.</value>
  </data>
</root>