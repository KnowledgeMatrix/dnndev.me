<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="labelCatalogPage.Text" xml:space="preserve">
    <value>Catalog Page</value>
  </data>
  <data name="labelCatalogPage.Help" xml:space="preserve">
    <value>The page where the contents of the store's catalog are displayed.</value>
  </data>
  <data name="SamePage.Text" xml:space="preserve">
    <value>Default Store Page</value>
  </data>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>Category Menu Settings</value>
  </data>
  <data name="lblDisplayItemCount.Help" xml:space="preserve">
    <value>Displays the number of items in the categories and subcategories in the category menu</value>
  </data>
  <data name="lblDisplayItemCount.Text" xml:space="preserve">
    <value>Display Product Count</value>
  </data>
  <data name="lblOverrideCategorySorting.Help" xml:space="preserve">
    <value>If selected we will ignore the default sort ordering defined in the category admin, but instead will order A-Z by category name.</value>
  </data>
  <data name="lblOverrideCategorySorting.Text" xml:space="preserve">
    <value>Override Category Sorting</value>
  </data>
  <data name="lblDisplayExpandCollapseButtons.Help" xml:space="preserve">
    <value>If selected if a category has sub-categories, an expand or collapse icon will be displayed next to the current category so when clicked it will either hide or show the subcategories.</value>
  </data>
  <data name="lblDisplayExpandCollapseButtons.Text" xml:space="preserve">
    <value>Display Expand Collapse Options</value>
  </data>
  <data name="lblAnchorName.Help" xml:space="preserve">
    <value>Optional anchor name to append to the category menu links, this allows you to jump to an anchor tag in the page.</value>
  </data>
  <data name="lblAnchorName.Text" xml:space="preserve">
    <value>Anchor Name</value>
  </data>
  <data name="lblCategoryMenu.Help" xml:space="preserve">
    <value>Defines the menu used to output the categories in the store</value>
  </data>
  <data name="lblCategoryMenu.Text" xml:space="preserve">
    <value>Category Menu Type</value>
  </data>
  <data name="lblIncludeDnnMenu.Help" xml:space="preserve">
    <value>When checked we output the DNN menu items at the start of the mega menu</value>
  </data>
  <data name="lblIncludeDnnMenu.Text" xml:space="preserve">
    <value>Include DNN Menu</value>
  </data>
  <data name="lblRootCategory.Help" xml:space="preserve">
    <value>Select the category to display as the root item in the category menu. Leave blank to show all category items.</value>
  </data>
  <data name="lblRootCategory.Text" xml:space="preserve">
    <value>Root Category</value>
  </data>
  <data name="lblDisableFacets.Help" xml:space="preserve">
    <value>Tick to disable facet search</value>
  </data>
  <data name="lblDisableFacets.Text" xml:space="preserve">
    <value>Disable Facet Search</value>
  </data>
  <data name="lblFacetDisplay.Help" xml:space="preserve">
    <value>Defines how the facet values are displayed to the customer. If you selected checkboxes the customer can select multiple values where as dropdown display only allows a single value to be selected.</value>
  </data>
  <data name="lblFacetDisplay.Text" xml:space="preserve">
    <value>Facet Display Mode</value>
  </data>
  <data name="rbFacetDisplayCheckBox.Text" xml:space="preserve">
    <value>Check Boxes</value>
  </data>
  <data name="rbFacetDisplayDropdown.Text" xml:space="preserve">
    <value>Drop down list</value>
  </data>
  <data name="lblExpandAll.Help" xml:space="preserve">
    <value>When ticked the menu is fully expanded</value>
  </data>
  <data name="lblExpandAll.Text" xml:space="preserve">
    <value>Expand All Categories</value>
  </data>
  <data name="lblHideEmpty.Help" xml:space="preserve">
    <value>When ticked categories which don't contain any items will be hidden from been shown in the menu.</value>
  </data>
  <data name="lblHideEmpty.Text" xml:space="preserve">
    <value>Hide Empty Categories</value>
  </data>
  <data name="lblRazorScript.Help" xml:space="preserve">
    <value>Select the script to use to render the categories</value>
  </data>
  <data name="lblRazorScript.Text" xml:space="preserve">
    <value>Razor Script</value>
  </data>
</root>