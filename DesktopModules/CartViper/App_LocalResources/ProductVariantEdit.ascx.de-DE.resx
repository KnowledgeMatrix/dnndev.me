<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="hypCancel.Text" xml:space="preserve">
    <value>Stornieren</value>
  </data>
  <data name="hypInventoryManagement.Text" xml:space="preserve">
    <value>Product Variant Inventory Management</value>
  </data>
  <data name="hypProductVisualizer.Text" xml:space="preserve">
    <value>Produkt Visualizer</value>
  </data>
  <data name="hypSave.Text" xml:space="preserve">
    <value>Sparen</value>
  </data>
  <data name="hypVariantImages.Text" xml:space="preserve">
    <value>Variant Images</value>
  </data>
  <data name="lblAddPriceAsPercent.Help" xml:space="preserve">
    <value>Wenn diese Option aktiviert den Posten Preisanpassung wird als Prozentsatz des Basispreises hinzugefügt werden, wenn es nicht einfach wird als Geldbetrag auf dem Basispreis hinzugerechnet werden.</value>
  </data>
  <data name="lblAddPriceAsPercent.Text" xml:space="preserve">
    <value>Add Preisanpassung in%</value>
  </data>
  <data name="lblControlType.Text" xml:space="preserve">
    <value>Control Type</value>
  </data>
  <data name="lblImageUploaderControlInfo.Text" xml:space="preserve">
    <value>Wenn Sie einen Preis oder Gewicht Einstellung anwenden möchten, wenn der Benutzer lädt ein Bild, das Sie diese in die erste Option unten treten sollte.</value>
  </data>
  <data name="lblName.Text" xml:space="preserve">
    <value>Variant Namen</value>
  </data>
  <data name="lblOptionName.Text" xml:space="preserve">
    <value>Option Name</value>
  </data>
  <data name="lblOptions.Text" xml:space="preserve">
    <value>Optionen</value>
  </data>
  <data name="lblPriceAdjustment.Text" xml:space="preserve">
    <value>Preisanpassung</value>
  </data>
  <data name="lblProductVariantEmpty.Text" xml:space="preserve">
    <value>Keine Varianten für dieses Produkt definiert.</value>
  </data>
  <data name="lblRequired.Text" xml:space="preserve">
    <value>Erforderlich</value>
  </data>
  <data name="lblSortOrder.Text" xml:space="preserve">
    <value>Sortierung</value>
  </data>
  <data name="lblTextControlInfo.Text" xml:space="preserve">
    <value>Wenn Sie einen Preis oder Gewicht Anpassung vornehmen, wenn der Benutzer so etwas in das Textfeld möchten, sollten Sie diese auf die erste Option unten eingeben.</value>
  </data>
  <data name="lblVariantName.Help" xml:space="preserve">
    <value>Der Name des Produkts Variante wird diese dem Benutzer angezeigt</value>
  </data>
  <data name="lblVariantName.Text" xml:space="preserve">
    <value>Variant Namen</value>
  </data>
  <data name="lblVariantSaveCaption.Text" xml:space="preserve">
    <value>Änderungen an den Varianten sind sofort, wenn Sie auf Speichern abgelegt.</value>
  </data>
  <data name="lblWeightAdjustment.Text" xml:space="preserve">
    <value>Gewicht Adjustment</value>
  </data>
  <data name="linkAddNew.Text" xml:space="preserve">
    <value>Add New Variant</value>
  </data>
  <data name="linkDelete.Text" xml:space="preserve">
    <value>Löschen</value>
  </data>
  <data name="linkEdit.Text" xml:space="preserve">
    <value>Bearbeiten</value>
  </data>
  <data name="lnkDelete.Text" xml:space="preserve">
    <value>Löschen</value>
  </data>
  <data name="plControlType.Help" xml:space="preserve">
    <value>Die Steuerung, um die Optionen in den Katalog, um den Benutzer anzuzeigen.</value>
  </data>
  <data name="plControlType.Text" xml:space="preserve">
    <value>Control Type</value>
  </data>
  <data name="plDefaultOptionPrompt.Help" xml:space="preserve">
    <value>Geben Sie einen Standardwert, die in der Dropdown-Liste angezeigt wird, können diese bei der Erläuterung der Option für den Benutzer. "Bitte wählen Sie eine Farbe", "Wählen Sie eine Größe", etc</value>
  </data>
  <data name="plDefaultOptionPrompt.Text" xml:space="preserve">
    <value>Standard Option Caption</value>
  </data>
  <data name="plRequired.Help" xml:space="preserve">
    <value>Legt fest, ob die Variante ist zwingend erforderlich.</value>
  </data>
  <data name="plRequired.Text" xml:space="preserve">
    <value>Erforderlich</value>
  </data>
  <data name="plSortOrder.Help" xml:space="preserve">
    <value>Definiert die Reihenfolge der Anzeige der Variante.</value>
  </data>
  <data name="plSortOrder.Text" xml:space="preserve">
    <value>Sortierung</value>
  </data>
  <data name="rbNotRequired.Text" xml:space="preserve">
    <value>Nicht obligatorisch</value>
  </data>
  <data name="rbRequired.Text" xml:space="preserve">
    <value>Verpflichtend</value>
  </data>
</root>