<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnDelete.Text" xml:space="preserve">
    <value>Verwijderen</value>
  </data>
  <data name="btnUpload.Text" xml:space="preserve">
    <value>Uploaden</value>
  </data>
  <data name="dshUploadNewBaseImage.Text" xml:space="preserve">
    <value>Upload Nieuwe Base Image</value>
  </data>
  <data name="hypAddNew.Text" xml:space="preserve">
    <value>Voeg een nieuwe Marker</value>
  </data>
  <data name="hypCancel.Text" xml:space="preserve">
    <value>Annuleren</value>
  </data>
  <data name="hypEditproduct.Text" xml:space="preserve">
    <value>Product bewerken</value>
  </data>
  <data name="hypSave.Text" xml:space="preserve">
    <value>Besparen</value>
  </data>
  <data name="lblBaseImage.Help" xml:space="preserve">
    <value>De huidige basis beeld dat wordt gebruikt in het product visualizer.</value>
  </data>
  <data name="lblBaseImage.Text" xml:space="preserve">
    <value>De huidige Base Image</value>
  </data>
  <data name="lblDeleteExistingBaseImage.Help" xml:space="preserve">
    <value>Deze knop verwijdert de bestaande basis image en alle bijbehorende markers.</value>
  </data>
  <data name="lblDeleteExistingBaseImage.Text" xml:space="preserve">
    <value>Verwijder Bestaande Base Image</value>
  </data>
  <data name="lblFont.Help" xml:space="preserve">
    <value>Als dit is een marker waar de tekst zal worden ingevoegd, selecteert u de stijl van de tekst zal worden. Indien dit niet van toepassing is laat leeg.</value>
  </data>
  <data name="lblFont.Text" xml:space="preserve">
    <value>Tekenstijl</value>
  </data>
  <data name="lblFontColour.Help" xml:space="preserve">
    <value>Als dit is een marker waar de tekst zal worden ingevoegd, selecteert u de kleur van de tekst zal worden. Indien dit niet van toepassing is laat dan leeg.</value>
  </data>
  <data name="lblFontColour.Text" xml:space="preserve">
    <value>Font kleur</value>
  </data>
  <data name="lblHeaderText.Text" xml:space="preserve">
    <value>Product Visualizer</value>
  </data>
  <data name="lblMaxNumberOfCharactersAllowed.Help" xml:space="preserve">
    <value>Indien van toepassing de maximium aantal tekens dat de gebruiker kan in de marker.</value>
  </data>
  <data name="lblMaxNumberOfCharactersAllowed.Text" xml:space="preserve">
    <value>Maximium No: Characters</value>
  </data>
  <data name="lblNoImageUploaded.Text" xml:space="preserve">
    <value>Geen afbeelding geüpload.</value>
  </data>
  <data name="lblTextAlignment.Help" xml:space="preserve">
    <value>Als dit is een marker waar de tekst zal worden ingevoegd, hoe moet de tekst worden uitgelijnd in de marker.</value>
  </data>
  <data name="lblTextAlignment.Text" xml:space="preserve">
    <value>Tekstuitlijning</value>
  </data>
  <data name="lblUploadBaseImage.Help" xml:space="preserve">
    <value>Vanaf hier kunt u een basis beeld dat wordt gebruikt in het product visualizer te uploaden, let alleen een beeld kan worden ge-upload per product.</value>
  </data>
  <data name="lblUploadBaseImage.Text" xml:space="preserve">
    <value>Upload Base Image</value>
  </data>
  <data name="lblVariantOption.Help" xml:space="preserve">
    <value>De variant optie die zal worden geplaatst in de marker als de mockup beeld wordt gemaakt en getoond aan de gebruiker.</value>
  </data>
  <data name="lblVariantOption.Text" xml:space="preserve">
    <value>Variant Optie</value>
  </data>
  <data name="lblVisualizerInfo.Text" xml:space="preserve">
    <value>Wanneer een product-varianten is het mogelijk om aan te tonen de gebruiker wat het product eruit zal zien met de aanpassingen die zij hebben gemaakt. Eerste upload een basis image en voeg markers om de basis afbeelding voor elke aanpassing een gebruiker kan maken, let daarbij goed op de marker positie in de positie op de voet beeld waar de gebruikers maatwerk zal verschijnen. &lt;br /&gt; Als de aanpassingen voegt tekst in de marker, selecteer aub een kleur van het lettertype, stijl en karakter te beperken, anders laat u deze leeg. &lt;br /&gt; Als een afbeelding moet worden ingevoegd in de marker de gebruikers beeld wordt automatisch geschaald naar de grootte van de markering die u definieert past.</value>
  </data>
</root>