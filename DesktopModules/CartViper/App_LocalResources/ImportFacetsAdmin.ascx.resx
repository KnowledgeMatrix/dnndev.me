<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnImportProductFacets.Text" xml:space="preserve">
    <value>Import Product Facets</value>
  </data>
  <data name="btnUploadCategoryFacets.Text" xml:space="preserve">
    <value>Import Category Facets</value>
  </data>
  <data name="hypShowHelp.Text" xml:space="preserve">
    <value>Show Help</value>
  </data>
  <data name="lblCategoryError.Text" xml:space="preserve">
    <value>No categories found for or multiple categories for product: {0} , line number: {1}&lt;br /&gt;</value>
  </data>
  <data name="lblCatsError.Text" xml:space="preserve">
    <value>No categories found for: {0} , line number: {1}</value>
  </data>
  <data name="lblCouldNotFindCategoryFacet.Text" xml:space="preserve">
    <value>Could not find facet: {0} in category: {1}&lt;br /&gt;</value>
  </data>
  <data name="lblCsvHelp.Text" xml:space="preserve">
    <value>&lt;p&gt;All csv files must have a header on the first line, this defines what each column in the csv repsents. Note if a facet name is defined for category that does not exist the facet name will still be created 
however the category will not be created.&lt;/p&gt;

&lt;p&gt;All columns must be included in defined order.&lt;/p&gt;

&lt;table class="csvHelpTable" cellspacing="0" cellpadding="3" border="0"&gt;
	&lt;tr&gt;
		&lt;td&gt;&lt;strong&gt;Field Name&lt;/strong&gt;&lt;/td&gt;
		&lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;
		&lt;td&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/td&gt;
	&lt;/tr&gt;	
	&lt;tr&gt;
		&lt;td valign="top"&gt;Category&lt;/td&gt;
		&lt;td valign="top"&gt;string&lt;/td&gt;
		&lt;td&gt;Name of the category to assign the facet name to. A category should be listed fully with any parent categories defined. The format should be
		"parent&gt;subcat&gt;mycategory", each category level should be split by a "&gt;". &lt;br/&gt;
		Additionally it is also possible to assign a product to mulitple categories by separating each one with a semicolon. ie.
		"parent&gt;subcat&gt;mycategory;parent&gt;subcat&gt;othercategory"&lt;br /&gt; Note if the category does not already exist in the store then the category will &lt;b&gt;NOT&lt;/b&gt; be auto-created.
		&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td valign="top"&gt;FacetName&lt;/td&gt;
		&lt;td valign="top"&gt;string&lt;/td&gt;
		&lt;td&gt;The name of the facet e.g. "brand", "size", etc&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;</value>
  </data>
  <data name="lblError.Text" xml:space="preserve">
    <value>Error: {0}&lt;br /&gt;</value>
  </data>
  <data name="lblGeneralError.Text" xml:space="preserve">
    <value>Error at line number: {0}, message: {1}&lt;br /&gt;</value>
  </data>
  <data name="lblHeader.Text" xml:space="preserve">
    <value>Import Facet Admin</value>
  </data>
  <data name="lblImportCategoryFacets.Help" xml:space="preserve">
    <value>Import the facets and the categories that are assigned to each facet.</value>
  </data>
  <data name="lblImportCategoryFacets.Text" xml:space="preserve">
    <value>Import Category Facets</value>
  </data>
  <data name="lblImportProductFacets.Help" xml:space="preserve">
    <value>Import the facets values for each product.</value>
  </data>
  <data name="lblImportProductFacets.Text" xml:space="preserve">
    <value>Import Product Facets</value>
  </data>
  <data name="lblImportSuccess.Text" xml:space="preserve">
    <value>Import Successfull</value>
  </data>
  <data name="lblMainHelp.Text" xml:space="preserve">
    <value>From here it is possible to import facet data, 2 different files must be used:&lt;br /&gt;&lt;br /&gt;&lt;b&gt;File 1:&lt;/b&gt; Category facets, this file contains the facet name e.g. "brand" and the categories that this facet should be assigned to. Note the categories must already exist before this file is uploaded.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;File 2:&lt;/b&gt; Facet product values, this file contains which products are associated with each facet and the values this product has for each facet. Note the facets and products must already exist before this file can be imported.</value>
  </data>
  <data name="lblProductError.Text" xml:space="preserve">
    <value>Could not find product or multiple products found for sku:{0}&lt;br /&gt;</value>
  </data>
  <data name="lblProductImportHelp.Text" xml:space="preserve">
    <value>&lt;p&gt;All csv files must have a header on the first line, this defines what each column in the csv repsents. Note if the product or facet does not exist neither will be 
auto created and that row will fail to import.&lt;/p&gt;

&lt;p&gt;All columns must be included in defined order.&lt;/p&gt;

&lt;table class="csvHelpTable" cellspacing="0" cellpadding="3" border="0"&gt;
	&lt;tr&gt;
		&lt;td&gt;&lt;strong&gt;Field Name&lt;/strong&gt;&lt;/td&gt;
		&lt;td&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/td&gt;
		&lt;td&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/td&gt;
	&lt;/tr&gt;	
	&lt;tr&gt;
		&lt;td valign="top"&gt;ModelNumber&lt;/td&gt;
		&lt;td valign="top"&gt;string&lt;/td&gt;
		&lt;td&gt;The model number of the product to assign the facet values to, note the product must already exist within cart viper&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td valign="top"&gt;Category&lt;/td&gt;
		&lt;td valign="top"&gt;string&lt;/td&gt;
		&lt;td&gt;Name of the category that the facet name belongs to. A category should be listed fully with any parent categories defined. The format should be
		"parent&gt;subcat&gt;mycategory", each category level should be split by a "&gt;". &lt;br/&gt;
		Only a single category can be entered here.&lt;br /&gt; Note if the category does not already exist in the store then the category will &lt;b&gt;NOT&lt;/b&gt; be auto-created.
		&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td valign="top"&gt;FacetName&lt;/td&gt;
		&lt;td valign="top"&gt;string&lt;/td&gt;
		&lt;td&gt;The name of the facet the values will be assigned to, note the facet name must already exist at the defined category.&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr&gt;
		&lt;td valign="top"&gt;FacetValue&lt;/td&gt;
		&lt;td valign="top"&gt;string&lt;/td&gt;
		&lt;td&gt;The values that are to be assigned to this facet for this product. Any number of values can be entered here ; separated.&lt;br /&gt; For example&lt;br /&gt; value1;value2;value3&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;</value>
  </data>
</root>