<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lblCatTemplate.Text" xml:space="preserve">
    <value>Catalog Template:</value>
  </data>
  <data name="lblDefaultCategory.Text" xml:space="preserve">
    <value>Default Category:</value>
  </data>
  <data name="lblUseDefaultCategory.Text" xml:space="preserve">
    <value>Default Category Behaviour:</value>
  </data>
  <data name="lblShowCategoryMsg.Text" xml:space="preserve">
    <value>Show Category Message:</value>
  </data>
  <data name="lblShowProductDetail.Text" xml:space="preserve">
    <value>Show Product Detail:</value>
  </data>
  <data name="lblPDSThumbnailWidth.Text" xml:space="preserve">
    <value>Thumbnail Width:</value>
  </data>
  <data name="lblPDSShowThumbnail.Text" xml:space="preserve">
    <value>Show Thumbnail:</value>
  </data>
  <data name="lblDetailTemplate.Text" xml:space="preserve">
    <value>Detail Template:</value>
  </data>
  <data name="lblPPSDetailPage.Text" xml:space="preserve">
    <value>Detail Page:</value>
  </data>
  <data name="lblCSThumbnailWidth.Text" xml:space="preserve">
    <value>Thumbnail Width:</value>
  </data>
  <data name="lblCSShowThumbnail.Text" xml:space="preserve">
    <value>Show Thumbnail:</value>
  </data>
  <data name="lblCSRows.Text" xml:space="preserve">
    <value>Rows:</value>
  </data>
  <data name="lblCSListTemplate.Text" xml:space="preserve">
    <value>List Template:</value>
  </data>
  <data name="lblCSColumnWidth.Text" xml:space="preserve">
    <value>Column Width:</value>
  </data>
  <data name="lblCSDetailPage.Text" xml:space="preserve">
    <value>Detail Page:</value>
  </data>
  <data name="lblPPSListTemplate.Text" xml:space="preserve">
    <value>List Template:</value>
  </data>
  <data name="lblPPSRows.Text" xml:space="preserve">
    <value>Rows:</value>
  </data>
  <data name="lblPPSColumns.Text" xml:space="preserve">
    <value>Columns:</value>
  </data>
  <data name="lblPPSColumnWidth.Text" xml:space="preserve">
    <value>Column Width:</value>
  </data>
  <data name="lblPPSShowThumbnail.Text" xml:space="preserve">
    <value>Show Thumbnail:</value>
  </data>
  <data name="lblPPSThumbnailWidth.Text" xml:space="preserve">
    <value>Thumbnail Width:</value>
  </data>
  <data name="lblCSColumns.Text" xml:space="preserve">
    <value>Columns:</value>
  </data>
  <data name="SelectDefaultCategory.Text" xml:space="preserve">
    <value>(none)</value>
  </data>
  <data name="FPLSamePage.Text" xml:space="preserve">
    <value>Same Page</value>
  </data>
  <data name="PPLSamePage.Text" xml:space="preserve">
    <value>Same Page</value>
  </data>
  <data name="CPLSamePage.Text" xml:space="preserve">
    <value>Same Page</value>
  </data>
  <data name="dshGenSettings.Text" xml:space="preserve">
    <value>General Settings</value>
  </data>
  <data name="dshFeaturedProductList.Text" xml:space="preserve">
    <value>Featured Product Settings</value>
  </data>
  <data name="dshCategoryProductList.Text" xml:space="preserve">
    <value>Category Product Settings</value>
  </data>
  <data name="dshProductDetails.Text" xml:space="preserve">
    <value>Product Details Settings</value>
  </data>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>Catalog Settings</value>
  </data>
  <data name="NPLSamePage.Text" xml:space="preserve">
    <value>Same Page</value>
  </data>
  <data name="lblPDSReturnPage.Text" xml:space="preserve">
    <value>Return To:</value>
  </data>
  <data name="PDSSamePage.Text" xml:space="preserve">
    <value>Same Page</value>
  </data>
  <data name="lblCSShowPageInfo.Text" xml:space="preserve">
    <value>Show Page Info:</value>
  </data>
  <data name="lblCSShowPageNav.Text" xml:space="preserve">
    <value>Show Page Navigation:</value>
  </data>
  <data name="lblCSContainerTemplate.Text" xml:space="preserve">
    <value>Container Template:</value>
  </data>
  <data name="lblPPSContainerTemplate.Text" xml:space="preserve">
    <value>Container Template:</value>
  </data>
  <data name="lblPDSShowReviews.Text" xml:space="preserve">
    <value>Show Reviews:</value>
  </data>
  <data name="lblCSRepeatDirection.Text" xml:space="preserve">
    <value>Repeat Direction:</value>
  </data>
  <data name="lblPPSRepeatDirection.Text" xml:space="preserve">
    <value>Repeat Direction:</value>
  </data>
  <data name="RepeatDirectionHoriz.Text" xml:space="preserve">
    <value>Horizontal</value>
  </data>
  <data name="RepeatDirectionVert.Text" xml:space="preserve">
    <value>Vertical</value>
  </data>
  <data name="chkSortCreatedDate.Text" xml:space="preserve">
    <value>Neweset</value>
  </data>
  <data name="chkSortManufacturer.Text" xml:space="preserve">
    <value>Manufacturer</value>
  </data>
  <data name="chkSortModelName.Text" xml:space="preserve">
    <value>Model Name</value>
  </data>
  <data name="chkSortModelNumber.Text" xml:space="preserve">
    <value>Model Number</value>
  </data>
  <data name="chkSortUnitPrice.Text" xml:space="preserve">
    <value>Unit Price</value>
  </data>
  <data name="SortAscending.Text" xml:space="preserve">
    <value>Ascending</value>
  </data>
  <data name="SortDescending.Text" xml:space="preserve">
    <value>Descending</value>
  </data>
  <data name="lblCSSortBy.Text" xml:space="preserve">
    <value>Sort By:</value>
  </data>
  <data name="lblCSSortDir.Text" xml:space="preserve">
    <value>Direction :</value>
  </data>
  <data name="lblCSSubCategories.Text" xml:space="preserve">
    <value>Sub-Categories:</value>
  </data>
  <data name="lblCatTemplate.Help" xml:space="preserve">
    <value>Select a template for the catalog. Default template is Catalog.htm.</value>
  </data>
  <data name="lblCSColumns.Help" xml:space="preserve">
    <value>Enter the column number to display products.</value>
  </data>
  <data name="lblCSColumnWidth.Help" xml:space="preserve">
    <value>Enter the column width in pixel. If the value is higher than 0, the value will be inserted to the style attribute of the corresponding table cell. For a better control display, you should set this value to 0 and use the css classes: td.StoreCategoryProductItem and td.StoreCategoryProductAlternatingItem defined in the file StoreFront.css.</value>
  </data>
  <data name="lblCSContainerTemplate.Help" xml:space="preserve">
    <value>Select a template for the category product container. Default template is CategoryContainer.htm.</value>
  </data>
  <data name="lblCSDetailPage.Help" xml:space="preserve">
    <value>Select the page where is placed the Cart Viper Catalog module to display the product detail. Generally, it is the same page, unless you use multiple Cart Viper Catalog modules.</value>
  </data>
  <data name="lblCSListTemplate.Help" xml:space="preserve">
    <value>Select a template for the product list. Default template is ProductList.htm.</value>
  </data>
  <data name="lblCSRepeatDirection.Help" xml:space="preserve">
    <value>Select the directon to display product list.</value>
  </data>
  <data name="lblCSRows.Help" xml:space="preserve">
    <value>Enter the row number to display products.</value>
  </data>
  <data name="lblCSShowThumbnail.Help" xml:space="preserve">
    <value>Check to display product thumbnail.</value>
  </data>
  <data name="lblCSSortBy.Help" xml:space="preserve">
    <value>Select the product column on which the list should be sorted.</value>
  </data>
  <data name="lblCSSortDir.Help" xml:space="preserve">
    <value>Select the sort direction.</value>
  </data>
  <data name="lblCSSubCategories.Help" xml:space="preserve">
    <value>Check to include in the list products of the sub categories of the selected category.</value>
  </data>
  <data name="lblCSThumbnailWidth.Help" xml:space="preserve">
    <value>Enter the width of pixel products thumbnails view.</value>
  </data>
  <data name="lblDefaultCategory.Help" xml:space="preserve">
    <value>Select the default category to display.</value>
  </data>
  <data name="lblDetailTemplate.Help" xml:space="preserve">
    <value>Select a template for the product detail section. Default template is ProductDetail.htm.</value>
  </data>
  <data name="lblPDSReturnPage.Help" xml:space="preserve">
    <value>Select the page back to the catalog. Generally, it is the same page, unless you use multiple Cart ViperCatalog modules.</value>
  </data>
  <data name="lblPDSShowReviews.Help" xml:space="preserve">
    <value>Check to see the reviews.</value>
  </data>
  <data name="lblPDSShowThumbnail.Help" xml:space="preserve">
    <value>Check to display product's thumbnail.</value>
  </data>
  <data name="lblPDSThumbnailWidth.Help" xml:space="preserve">
    <value>Enter the thumbnail width in pixels.</value>
  </data>
  <data name="lblPPSColumns.Help" xml:space="preserve">
    <value>Enter the column number to display products.</value>
  </data>
  <data name="lblPPSColumnWidth.Help" xml:space="preserve">
    <value>Enter the column width in pixel. If the value is higher than 0, the value will be inserted to the style attribut of the corresponding table cell. For a better control display, you should set this value to 0 and use the css classes: td.StorePopularProductItem and td.StorePopularProductAlternatingItem defined in the file StoreFront.css.</value>
  </data>
  <data name="lblPPSContainerTemplate.Help" xml:space="preserve">
    <value>Select a template for the popular product container. Default template is ListContainer.htm.</value>
  </data>
  <data name="lblPPSDetailPage.Help" xml:space="preserve">
    <value>Select the page where is placed the Cart Viper Catalog module to display the product detail. Generally, it is the same page, unless you use multiple Cart Viper Catalog modules.</value>
  </data>
  <data name="lblPPSListTemplate.Help" xml:space="preserve">
    <value>Select a template for the product list. Default templates are PopularProduct.htm and PopularProduct_Small.htm.</value>
  </data>
  <data name="lblPPSRepeatDirection.Help" xml:space="preserve">
    <value>Select the directon to display product list.</value>
  </data>
  <data name="lblPPSRows.Help" xml:space="preserve">
    <value>Enter the row number to display products.</value>
  </data>
  <data name="lblPPSShowThumbnail.Help" xml:space="preserve">
    <value>Check to display product thumbnail.</value>
  </data>
  <data name="lblPPSThumbnailWidth.Help" xml:space="preserve">
    <value>Enter the thumbnail width in pixels.</value>
  </data>
  <data name="lblShowCategoryMsg.Help" xml:space="preserve">
    <value>Check to display the category message.</value>
  </data>
  <data name="lblShowProductDetail.Help" xml:space="preserve">
    <value>Check to display the detail product section.</value>
  </data>
  <data name="lblUseDefaultCategory.Help" xml:space="preserve">
    <value>Select how the catalog should behave if the user is viewing the catalog page, but as yet have not selected a category. e.g. do nothing, display the selected category or display all products.</value>
  </data>
  <data name="lblEnableContentIndexing.Help" xml:space="preserve">
    <value>Check to enable content indexing by the DotNetNuke search engine. If you use several Cart Viper Catalog module, you should check this setting to ONLY one Cart Viper Catalog module instance. Otherwise, your products will indexed twice (or more) by the search engine.</value>
  </data>
  <data name="lblEnableContentIndexing.Text" xml:space="preserve">
    <value>Enable Content Indexing:</value>
  </data>
  <data name="lblCPSGIFBgColor.Help" xml:space="preserve">
    <value>Enter the hex value of the background color to use with GIF image format. Valid values: #FFFFFF, #f00, FF0000,  F09, ...</value>
  </data>
  <data name="lblCPSGIFBgColor.Text" xml:space="preserve">
    <value>GIF Background:</value>
  </data>
  <data name="lblPDSGIFBgColor.Help" xml:space="preserve">
    <value>Enter the hex value of the background color to use with GIF image format. Valid values: #FFFFFF, #f00, FF0000,  F09, ...</value>
  </data>
  <data name="lblPDSGIFBgColor.Text" xml:space="preserve">
    <value>GIF Background:</value>
  </data>
  <data name="lblPPSGIFBgColor.Help" xml:space="preserve">
    <value>Enter the hex value of the background color to use with GIF image format. Valid values: #FFFFFF, #f00, FF0000,  F09, ...</value>
  </data>
  <data name="lblPPSGIFBgColor.Text" xml:space="preserve">
    <value>GIF Background:</value>
  </data>
  <data name="lblSSListTemplate.Help" xml:space="preserve">
    <value>Select a template for the search results list. Default templates is SearchResultsList.htm.</value>
  </data>
  <data name="lblSSListTemplate.Text" xml:space="preserve">
    <value>Search Results Template:</value>
  </data>
  <data name="lblSSSearchColumn.Help" xml:space="preserve">
    <value>Select the default search column.</value>
  </data>
  <data name="lblSSSearchColumn.Text" xml:space="preserve">
    <value>Search By:</value>
  </data>
  <data name="chkSearchSummary.Text" xml:space="preserve">
    <value>Product Summary</value>
  </data>
  <data name="dshSearchProduct.Text" xml:space="preserve">
    <value>Search Settings</value>
  </data>
  <data name="lblCSSortColumns.Help" xml:space="preserve">
    <value>Select the columns allowed to sort on.</value>
  </data>
  <data name="lblCSSortColumns.Text" xml:space="preserve">
    <value>Sort Columns:</value>
  </data>
  <data name="lblCSSearchColumns.Help" xml:space="preserve">
    <value>Select the columns allowed to search on.</value>
  </data>
  <data name="lblCSSearchColumns.Text" xml:space="preserve">
    <value>Search Columns:</value>
  </data>
  <data name="lblEnableImageCaching.Help" xml:space="preserve">
    <value>Check to enable image caching. Please uncheck while designing the Store or you will have to wait for the cache duration to see your image changes (impacted settings are size and background color for GIF images).</value>
  </data>
  <data name="lblEnableImageCaching.Text" xml:space="preserve">
    <value>Enable Image Caching:</value>
  </data>
  <data name="lblCacheDuration.Help" xml:space="preserve">
    <value>Enter the cache duration (in minutes) for images. Default value: 2 minutes.</value>
  </data>
  <data name="lblCacheDuration.Text" xml:space="preserve">
    <value>Cache Duration:</value>
  </data>
  <data name="dshSortProduct.Text" xml:space="preserve">
    <value>Sort Settings</value>
  </data>
  <data name="lblAllowPrint.Help" xml:space="preserve">
    <value>When checked the default print module setting is disabled. You have to add the StorePrint.Action button to your container skin to be able to use this feature. Please read the Templating Guide for details.</value>
  </data>
  <data name="lblAllowPrint.Text" xml:space="preserve">
    <value>Allow Print?</value>
  </data>
  <data name="lblProductSpecificationTemplate.Help" xml:space="preserve">
    <value>The template that we should use to display the product specification.</value>
  </data>
  <data name="lblProductSpecificationTemplate.Text" xml:space="preserve">
    <value>Product Specification Template</value>
  </data>
  <data name="lblEnableDefaultImage.Help" xml:space="preserve">
    <value>When enabled any products which do not have an image defined will display a standard default image.</value>
  </data>
  <data name="lblEnableDefaultImage.Text" xml:space="preserve">
    <value>Enable Default Image</value>
  </data>
  <data name="lblLargeImageWidth.Help" xml:space="preserve">
    <value>Size in pixel of the width of the large image</value>
  </data>
  <data name="lblLargeImageWidth.Text" xml:space="preserve">
    <value>Large Image Width</value>
  </data>
  <data name="lblMediumImageWidth.Help" xml:space="preserve">
    <value>Size in pixel of the width of the medium image</value>
  </data>
  <data name="lblMediumImageWidth.Text" xml:space="preserve">
    <value>Medium Image Width</value>
  </data>
  <data name="lblThumbnailImageWidth.Help" xml:space="preserve">
    <value>Size in pixel of the width of the thumbnail image</value>
  </data>
  <data name="lblThumbnailImageWidth.Text" xml:space="preserve">
    <value>Thumbnail Image Width</value>
  </data>
  <data name="lblRelatedProductsTemplate.Help" xml:space="preserve">
    <value>The template that we should use to display the related products on the product details page.</value>
  </data>
  <data name="lblRelatedProductsTemplate.Text" xml:space="preserve">
    <value>Related Products Template</value>
  </data>
  <data name="lblShowProcSpec.Help" xml:space="preserve">
    <value>Defines if we should display the product specification tab.</value>
  </data>
  <data name="lblShowProcSpec.Text" xml:space="preserve">
    <value>Show Product Specification</value>
  </data>
  <data name="lblReviewProfanityFilter.Help" xml:space="preserve">
    <value>If selected reviews that have profanity in them will be accepted.</value>
  </data>
  <data name="lblReviewProfanityFilter.Text" xml:space="preserve">
    <value>Allow Review To Contain Profanity</value>
  </data>
  <data name="lblEnableGoToCart.Help" xml:space="preserve">
    <value>Optionally select a page that the user will be redirected to after they have added an item to their cart.</value>
  </data>
  <data name="lblEnableGoToCart.Text" xml:space="preserve">
    <value>Page To Redirect User To After Add To Cart</value>
  </data>
  <data name="lblAjaxCartSuccessNotification.Help" xml:space="preserve">
    <value>If checked we display a javascript modal popup  when an item is added to the cart successfully. Otherwise we use a notification control to display this information.</value>
  </data>
  <data name="lblAjaxCartSuccessNotification.Text" xml:space="preserve">
    <value>Enable Modal Popup for Ajax Cart</value>
  </data>
  <data name="rdDefaultAllProducts.Text" xml:space="preserve">
    <value>All Products</value>
  </data>
  <data name="rdDefaultCategory.Text" xml:space="preserve">
    <value>Default Category</value>
  </data>
  <data name="rdDefaultNone.Text" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="lblProductBundlesTemplate.Help" xml:space="preserve">
    <value>The template we should use when outputting the product discount bundles data.</value>
  </data>
  <data name="lblProductBundlesTemplate.Text" xml:space="preserve">
    <value>Product Bundles Template</value>
  </data>
  <data name="dshRssFeeds.Text" xml:space="preserve">
    <value>RSS Feed Settings</value>
  </data>
  <data name="lblEnableRssFeeds.Help" xml:space="preserve">
    <value>When check RSS feeds are displayed at the the bottom of the catalog module.</value>
  </data>
  <data name="lblEnableRssFeeds.Text" xml:space="preserve">
    <value>Enable RSS Feeds:</value>
  </data>
  <data name="lblRssItemLimit.Help" xml:space="preserve">
    <value>Defines the maximum number of items to return in a RSS feed. If this value is 0 then no limit will be applied.</value>
  </data>
  <data name="lblRssItemLimit.Text" xml:space="preserve">
    <value>RSS Item Limit</value>
  </data>
  <data name="lblProductAnchorName.Help" xml:space="preserve">
    <value>Optional anchor name to append to the product details links, this allows you to jump to an anchor tag in the page.</value>
  </data>
  <data name="lblProductAnchorName.Text" xml:space="preserve">
    <value>Anchor Name</value>
  </data>
  <data name="lblShowAddVariantCaption.Help" xml:space="preserve">
    <value>If selected when viewing the product catalogue and a product has variants, instead of showing the standard add to cart button we will show an image that better explains whey the user gets redirected to the product details page.</value>
  </data>
  <data name="lblShowAddVariantCaption.Text" xml:space="preserve">
    <value>Show Add Variant To Cart Caption</value>
  </data>
  <data name="lblPDImageMode.Help" xml:space="preserve">
    <value>Define the mode used to display the images for the product on the details page.</value>
  </data>
  <data name="lblPDImageMode.Text" xml:space="preserve">
    <value>Image Mode</value>
  </data>
  <data name="ProductDetailsImageMode.ModalPopup.Text" xml:space="preserve">
    <value>Modal Popup</value>
  </data>
  <data name="ProductDetailsImageMode.Zoom.Text" xml:space="preserve">
    <value>Image Zoom</value>
  </data>
  <data name="lblDisableStoreForAnonymous.Help" xml:space="preserve">
    <value>When checked the prices and store checkout are disable for anonymous users. This can be used to create a B2B site which only lists prices to authenicated users.</value>
  </data>
  <data name="lblDisableStoreForAnonymous.Text" xml:space="preserve">
    <value>Disable Price/Checkout for Anonymous</value>
  </data>
  <data name="lblNone.Text" xml:space="preserve">
    <value>-- None --</value>
  </data>
  <data name="lblPDSShowRelated.Help" xml:space="preserve">
    <value>Flag to determine if the related products control is shown on the product details page in the tab control. If this is not checked the you can use the token  [RELATEDPRODUCTS] to display this control anywhere in your product details layout.</value>
  </data>
  <data name="lblPDSShowRelated.Text" xml:space="preserve">
    <value>Show Related Products in Tab</value>
  </data>
  <data name="lblTabAutoSelectHover.Help" xml:space="preserve">
    <value>When check the product tabs will display when the mouse hovers over the tab name</value>
  </data>
  <data name="lblTabAutoSelectHover.Text" xml:space="preserve">
    <value>Tab Auto Select on Hover</value>
  </data>
  <data name="lblDiscountBundlesTabSortOrder.Help" xml:space="preserve">
    <value>The sort order for the discount bundle tab on the product details page, this can be overridden on a per product basis.</value>
  </data>
  <data name="lblDiscountBundlesTabSortOrder.Text" xml:space="preserve">
    <value>Discount Bundles Tab Sort Order</value>
  </data>
  <data name="lblReviewsTabsSortOrder.Help" xml:space="preserve">
    <value>The sort order for the reviews tab on the product details page, this can be overridden on a per product basis.</value>
  </data>
  <data name="lblReviewsTabsSortOrder.Text" xml:space="preserve">
    <value>Reviews Tab Sort Order</value>
  </data>
  <data name="lblSpecificationTabSortOrder.Help" xml:space="preserve">
    <value>The sort order for the specification tab on the product details page, this can be overridden on a per product basis.</value>
  </data>
  <data name="lblSpecificationTabSortOrder.Text" xml:space="preserve">
    <value>Specification Tab Sort Order</value>
  </data>
  <data name="rf.Text" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="lblDisplayTabsBeforeCustomTabs.Help" xml:space="preserve">
    <value>Should we display the default tabs before or after any custom tabs that have been added for a product, this can be overriden on a per product basis.</value>
  </data>
  <data name="lblDisplayTabsBeforeCustomTabs.Text" xml:space="preserve">
    <value>Display Default Tabs Position</value>
  </data>
  <data name="rdTabsAfter.Text" xml:space="preserve">
    <value>After Custom Product Tabs</value>
  </data>
  <data name="rdTabsBefore.Text" xml:space="preserve">
    <value>Before Custom Product Tabs</value>
  </data>
  <data name="lblRelatedProductsTabOrder.Help" xml:space="preserve">
    <value>Defines the sort ordering of the related products tab</value>
  </data>
  <data name="lblRelatedProductsTabOrder.Text" xml:space="preserve">
    <value>Releated Products Tab Sort Order</value>
  </data>
  <data name="rdTopLevelCategories.Text" xml:space="preserve">
    <value>Top Level Categories</value>
  </data>
  <data name="lblTopLevelCategories.Help" xml:space="preserve">
    <value>The template we should use to output the top level category details.</value>
  </data>
  <data name="lblTopLevelCategories.Text" xml:space="preserve">
    <value>Top Level Category Template</value>
  </data>
  <data name="lblTopLevelCategoriesDetails.Help" xml:space="preserve">
    <value>Template we should use to output the top level category details.</value>
  </data>
  <data name="lblTopLevelCategoriesDetails.Text" xml:space="preserve">
    <value>Top Level Category Details Template</value>
  </data>
  <data name="rdCategorySameAsPageName.Text" xml:space="preserve">
    <value>Same Category as Page Name</value>
  </data>
  <data name="lblCartNotificationScript.Help" xml:space="preserve">
    <value>This is the razor script which generates the notification when an item is added to the cart, wishlist and comparison list. It allows you to create your own custom version. See the manual for more information.</value>
  </data>
  <data name="lblCartNotificationScript.Text" xml:space="preserve">
    <value>Cart Notification Razor Script</value>
  </data>
</root>