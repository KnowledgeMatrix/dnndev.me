<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllItems.Text" xml:space="preserve">
    <value>- Alle Artikel -</value>
  </data>
  <data name="btnSearch.Text" xml:space="preserve">
    <value>View Abverkaufsdaten</value>
  </data>
  <data name="lblCategory.Help" xml:space="preserve">
    <value>Wählen Sie eine Kategorie</value>
  </data>
  <data name="lblCategory.Text" xml:space="preserve">
    <value>Kategorie</value>
  </data>
  <data name="lblEndDate.Help" xml:space="preserve">
    <value>Wählen Sie das Enddatum, um Produktdaten für.</value>
  </data>
  <data name="lblEndDate.Text" xml:space="preserve">
    <value>Angebotsende</value>
  </data>
  <data name="lblError.Text" xml:space="preserve">
    <value>Bitte wählen Sie entweder ein Produkt oder eine Kategorie, um einen Bericht für sowie eine erstellen &lt;br /&gt; gültige Start-und Enddatum.</value>
  </data>
  <data name="lblModelNumber.Text" xml:space="preserve">
    <value>Modellnummer</value>
  </data>
  <data name="lblParentTitle.Text" xml:space="preserve">
    <value>Produkte</value>
  </data>
  <data name="lblProductName.Text" xml:space="preserve">
    <value>Name des Produkts</value>
  </data>
  <data name="lblSalesCount.Text" xml:space="preserve">
    <value>Anzahl Verkäufe</value>
  </data>
  <data name="lblStartDate.Help" xml:space="preserve">
    <value>Wählen Sie Start-Datum auf Produktverkäufe Daten auswählen für.</value>
  </data>
  <data name="lblStartDate.Text" xml:space="preserve">
    <value>Startdatum</value>
  </data>
  <data name="lblTotals.Text" xml:space="preserve">
    <value>Summen</value>
  </data>
  <data name="lblTotalSalesPrice.Text" xml:space="preserve">
    <value>Gesamtumsatz</value>
  </data>
  <data name="btnDownloadAsSpreadSheet.Text" xml:space="preserve">
    <value>Download als. Xls</value>
  </data>
  <data name="AllOrders.Text" xml:space="preserve">
    <value>Alle Verkäufe von Daten aus</value>
  </data>
  <data name="SelectedCategory.Text" xml:space="preserve">
    <value>Sales-Daten gefiltert nach {0} von</value>
  </data>
  <data name="lblHowPageWorks.Help" xml:space="preserve">
    <value>1. Wählen Sie entweder ein Produkt oder eine Kategorie, um einen Kundenauftrag Bericht zu erstellen, dann wählen Sie eine Start-und Enddatum zu Verkaufsdaten für Ansicht und klicken Sie auf "View Abverkaufsdaten." Ein Gitter wird dann mit dem Vertrieb Daten gefüllt werden, wenn das Raster enthält Abverkaufsdaten Sie haben dann die Möglichkeit, die Verkaufszahlen im Download. Xls-Format.</value>
  </data>
  <data name="lblHowPageWorks.Text" xml:space="preserve">
    <value>Erstellen Sie Berichte über die Verkäufe</value>
  </data>
  <data name="lblOr.Text" xml:space="preserve">
    <value>Oder wählen Sie</value>
  </data>
  <data name="lblPleaseSelect.Text" xml:space="preserve">
    <value>Bitte wählen Sie ......</value>
  </data>
  <data name="lblProducts.Help" xml:space="preserve">
    <value>Wählen Sie ein Produkt zur Ansicht</value>
  </data>
  <data name="lblProducts.Text" xml:space="preserve">
    <value>Produkt-</value>
  </data>
  <data name="SelectedProduct.Text" xml:space="preserve">
    <value>Sales-Daten gefiltert nach Produkt {0} von</value>
  </data>
  <data name="lblHeaderText.Text" xml:space="preserve">
    <value>Store Sales Reporting</value>
  </data>
</root>