<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="btnCreateCategory.Text" xml:space="preserve">
    <value>Create Category In Selected Locale</value>
  </data>
  <data name="btnCreateProduct.Text" xml:space="preserve">
    <value>Create Product In Selected Locale</value>
  </data>
  <data name="btnSave.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="lblAction.Text" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="lblCategoryError.Text" xml:space="preserve">
    <value>This category already exists is the selected locale</value>
  </data>
  <data name="lblCateogryHelp.Text" xml:space="preserve">
    <value>From here it is possible to select a category that has been entered in the store primary language and then duplicate that in the selected langauge, so it can then be selected via the category admin and edited so it will appear correctly in the given language.</value>
  </data>
  <data name="lblDefaultStoreLanguage.Help" xml:space="preserve">
    <value>The default language that your store will use.</value>
  </data>
  <data name="lblDefaultStoreLanguage.Text" xml:space="preserve">
    <value>Default Store Language</value>
  </data>
  <data name="lblHeaderText.Text" xml:space="preserve">
    <value>Store Localization</value>
  </data>
  <data name="lblHelp.Text" xml:space="preserve">
    <value>From here it is possible to define the different languages that the store will support, allowing you to create product and categories in these languages. Therefore if your website supports multiple languages when the user changes languages the product and category information will change to the selected language.&lt;br /&gt;&lt;br /&gt;The default language entered here is the language the products will be returned in if no language is selected.&lt;br /&gt;&lt;br /&gt;If you do not enter anything below we will return the product and category names in the language they were entered in, regardless of the language selected by the user when viewing your store.</value>
  </data>
  <data name="lblLanguage.Help" xml:space="preserve">
    <value>Select the language you wish to add support for.</value>
  </data>
  <data name="lblLanguage.Text" xml:space="preserve">
    <value>Add Language</value>
  </data>
  <data name="lblLanguageName.Text" xml:space="preserve">
    <value>Language Name</value>
  </data>
  <data name="lblLocale.Text" xml:space="preserve">
    <value>Language Locale</value>
  </data>
  <data name="lblManageLanguageRoles.Help" xml:space="preserve">
    <value>The roles that can manage products / categories in this lanaguage, this must be used in conjucntion with the "manage catalogue" role as defined in store info section.</value>
  </data>
  <data name="lblManageLanguageRoles.Text" xml:space="preserve">
    <value>Manage Language Roles</value>
  </data>
  <data name="lblProductCreateHelp.Text" xml:space="preserve">
    <value>From here it is possible to select a product that has been entered in the store primary language and then duplicate that in the selected langauge, so it can then be selected via the product admin and edited so it will appear correctly in the given language.</value>
  </data>
  <data name="lblProductError.Text" xml:space="preserve">
    <value>We could not copy the selected product.</value>
  </data>
  <data name="lblRolesHelp.Text" xml:space="preserve">
    <value>This section is optional and if you are applying a role to the "manage catalog" setting in the store admin -&gt; store info you can limit the languages users in this role can administrate.</value>
  </data>
  <data name="lblSupportLanguages.Text" xml:space="preserve">
    <value>Supported Languages:</value>
  </data>
  <data name="lnkDelete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="lnkEdit.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="rf.Text" xml:space="preserve">
    <value>Required</value>
  </data>
</root>