<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lblAction.Text" xml:space="preserve">
    <value>Acción</value>
  </data>
  <data name="lblDateAssigned.Text" xml:space="preserve">
    <value>Fecha de Asignación</value>
  </data>
  <data name="lblEmailAddress.Text" xml:space="preserve">
    <value>Correo electrónico</value>
  </data>
  <data name="lblFilterAll.Text" xml:space="preserve">
    <value>Todos los números de serie</value>
  </data>
  <data name="lblFilterAssigned.Text" xml:space="preserve">
    <value>Asignación de números de serie</value>
  </data>
  <data name="lblFilterNotAssigned.Text" xml:space="preserve">
    <value>Los números de serie no asignadas</value>
  </data>
  <data name="lblFilterSerials.Help" xml:space="preserve">
    <value>Seleccione los criterios para filtrar las series de productos para este producto.</value>
  </data>
  <data name="lblFilterSerials.Text" xml:space="preserve">
    <value>Filtro de Publicaciones Seriadas del producto</value>
  </data>
  <data name="lblHasBeenAssigned.Text" xml:space="preserve">
    <value>Se le ha asignado</value>
  </data>
  <data name="lblHeader.Text" xml:space="preserve">
    <value>Asignación de número de serie</value>
  </data>
  <data name="lblHelpInfo.Text" xml:space="preserve">
    <value>Esta sección le permite buscar un producto y ver todas las series de productos para ese producto y los detalles del pedido que se asignan a, así como la exportación de esta información al formato de archivo. Csv. &lt;br/&gt;&lt;br/&gt; Para añadir nuevos números de serie por favor use el producto página de edición.</value>
  </data>
  <data name="lblOrderId.Text" xml:space="preserve">
    <value>ID del pedido</value>
  </data>
  <data name="lblProductName.Text" xml:space="preserve">
    <value>Nombre del producto</value>
  </data>
  <data name="lblProductNameSearch.Help" xml:space="preserve">
    <value>Escriba el nombre del producto, a medida que escribe el producto se auto sugirió a usted. Una vez que haya encontrado el producto que se pueda hacer clic en "Ver" para ver los números de serie para el producto seleccionado.</value>
  </data>
  <data name="lblProductNameSearch.Text" xml:space="preserve">
    <value>Nombre del producto</value>
  </data>
  <data name="lblProductSku.Text" xml:space="preserve">
    <value>SKU del producto</value>
  </data>
  <data name="lblPurchaser.Text" xml:space="preserve">
    <value>Comprador</value>
  </data>
  <data name="lblSerialNumber.Text" xml:space="preserve">
    <value>Número de serie</value>
  </data>
  <data name="lblTotalNumberOfAvailable.Help" xml:space="preserve">
    <value>Este es el número total de números de series disponibles para el producto seleccionado actual</value>
  </data>
  <data name="lblTotalNumberOfAvailable.Text" xml:space="preserve">
    <value>No: de las publicaciones seriadas disponibles</value>
  </data>
  <data name="lnkDelete.Text" xml:space="preserve">
    <value>Eliminar</value>
  </data>
  <data name="lnkExport.Text" xml:space="preserve">
    <value>Exportar a archivo CSV</value>
  </data>
  <data name="lnkView.Text" xml:space="preserve">
    <value>Ver los números de serie Información</value>
  </data>
  <data name="lnkViewOrder.Text" xml:space="preserve">
    <value>Orden</value>
  </data>
  <data name="rfProductName.Text" xml:space="preserve">
    <value>Requerido</value>
  </data>
</root>