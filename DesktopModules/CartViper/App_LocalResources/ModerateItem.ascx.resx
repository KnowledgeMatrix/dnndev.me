<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="btnSave.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="lblChangeDetails.Help" xml:space="preserve">
    <value>The details that have been changed.</value>
  </data>
  <data name="lblChangeDetails.Text" xml:space="preserve">
    <value>Change Details</value>
  </data>
  <data name="lblChangeTypeLabel.Help" xml:space="preserve">
    <value>The type of change whether its an add , edit or delete</value>
  </data>
  <data name="lblChangeTypeLabel.Text" xml:space="preserve">
    <value>Change Type</value>
  </data>
  <data name="lblCreatedByLabel.Help" xml:space="preserve">
    <value>The user that made this change.</value>
  </data>
  <data name="lblCreatedByLabel.Text" xml:space="preserve">
    <value>Created By</value>
  </data>
  <data name="lblCreatedDataLabel.Help" xml:space="preserve">
    <value>The date this item was created.</value>
  </data>
  <data name="lblCreatedDataLabel.Text" xml:space="preserve">
    <value>Date Created</value>
  </data>
  <data name="lblDecision.Help" xml:space="preserve">
    <value>Your decision whether to accept or decline.</value>
  </data>
  <data name="lblDecision.Text" xml:space="preserve">
    <value>Decision</value>
  </data>
  <data name="lblFieldChanged.Text" xml:space="preserve">
    <value>Field Changed.</value>
  </data>
  <data name="lblHeaderText.Text" xml:space="preserve">
    <value>Moderate Item</value>
  </data>
  <data name="lblHelp.Text" xml:space="preserve">
    <value>From here it is possible to accept or decline the below changes, if you accept the changes the changes will immediately visible in the store front.&lt;br /&gt;&lt;br /&gt;The creator of this change will be emailed your decision along with any message that is entered below.</value>
  </data>
  <data name="lblNameLabel.Help" xml:space="preserve">
    <value>The name of the item you are moderating.</value>
  </data>
  <data name="lblNameLabel.Text" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="lblNotesToCreator.Help" xml:space="preserve">
    <value>Any notes you have to the reason behind your decision, they will be included in the email to the creator informing them of your decision.</value>
  </data>
  <data name="lblNotesToCreator.Text" xml:space="preserve">
    <value>Notes To Creator</value>
  </data>
  <data name="lblObjectTypeLabel.Help" xml:space="preserve">
    <value>The type of object that has been edited, e.g. product or category.</value>
  </data>
  <data name="lblObjectTypeLabel.Text" xml:space="preserve">
    <value>Change Set Type</value>
  </data>
  <data name="lblOriginalValue.Text" xml:space="preserve">
    <value>Original Value</value>
  </data>
  <data name="lblProposedValue.Text" xml:space="preserve">
    <value>Proposed Value</value>
  </data>
  <data name="lblRollBackHeaderText.Text" xml:space="preserve">
    <value>Rollback To Previous Version</value>
  </data>
  <data name="lblRollBackHelp.Text" xml:space="preserve">
    <value>From here it is possible to rollback to this version history and set the properties to the proposed values.</value>
  </data>
</root>