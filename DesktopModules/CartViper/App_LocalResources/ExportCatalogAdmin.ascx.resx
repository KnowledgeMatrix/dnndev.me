<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnExport.Text" xml:space="preserve">
    <value>Export</value>
  </data>
  <data name="btnImport.Text" xml:space="preserve">
    <value>Import</value>
  </data>
  <data name="lblDataType.Help" xml:space="preserve">
    <value>The type of data we should export.</value>
  </data>
  <data name="lblDataType.Text" xml:space="preserve">
    <value>Data Type To Export</value>
  </data>
  <data name="lblFile.Help" xml:space="preserve">
    <value>The xml we should upload.</value>
  </data>
  <data name="lblFile.Text" xml:space="preserve">
    <value>File To Upload</value>
  </data>
  <data name="lblHeaderText.Text" xml:space="preserve">
    <value>Import / Export Catalog Data</value>
  </data>
  <data name="lblHelp.Text" xml:space="preserve">
    <value>From here it is possible to select which type of product catalog data to export and in the required language to an xml file. This xml file can then be downloaded and modified and finally restored using the below UI.&lt;br /&gt;&lt;br /&gt;

&lt;b&gt;Product Import Notes&lt;/b&gt;&lt;br /&gt;
If a product is found with a matching model number for the imported language this product will be updated rather than added. Product assignment to facet
values is handled during the facet import.&lt;br /&gt;&lt;Br /&gt;

&lt;b&gt;Categories Import Notes&lt;/b&gt;&lt;br /&gt;
If a category is found at the matching CategoryPath for the imported language the category will be updated rather than added.&lt;br /&gt;&lt;Br /&gt;

&lt;b&gt;Facet Import Notes&lt;/b&gt;&lt;br /&gt;
The facet name must be unique for the language selected, categories will be assigned to the facet and auto-created if they do not exist. Products
will also be assigned to facet values if a matching product model number is found for that language, however products will NOT be auto-created during this import.</value>
  </data>
  <data name="lblImportDataType.Help" xml:space="preserve">
    <value>The data type we are importing, this needs to match the data type the data was exported as.</value>
  </data>
  <data name="lblImportDataType.Text" xml:space="preserve">
    <value>Data Type To Import</value>
  </data>
  <data name="lblImportLanguage.Help" xml:space="preserve">
    <value>The language we should import the data for.</value>
  </data>
  <data name="lblImportLanguage.Text" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="lblLanguage.Help" xml:space="preserve">
    <value>The language we should export the data for</value>
  </data>
  <data name="lblLanguage.Text" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="lblSiteDefault.Text" xml:space="preserve">
    <value>-- Site Default --</value>
  </data>
</root>