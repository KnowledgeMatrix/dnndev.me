<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>Cart Viper Product Widget Settings</value>
  </data>
  <data name="lblItemLimit.Help" xml:space="preserve">
    <value>Number of products to return from the query, this should be between 1 and 25.Note this option is not valid if "Single Product" is the selected filter type.</value>
  </data>
  <data name="lblItemLimit.Text" xml:space="preserve">
    <value>Item Limit</value>
  </data>
  <data name="lblQueryParameter.Help" xml:space="preserve">
    <value>Optionally supply any parameters needed for the query</value>
  </data>
  <data name="lblQueryParameter.Text" xml:space="preserve">
    <value>Query Parameter</value>
  </data>
  <data name="lblQueryType.Help" xml:space="preserve">
    <value>Defines the query type used to select the products from the catalog</value>
  </data>
  <data name="lblQueryType.Text" xml:space="preserve">
    <value>Query Type</value>
  </data>
  <data name="lblTemplate.Help" xml:space="preserve">
    <value>Template used to transform the the products into the HTML markup</value>
  </data>
  <data name="lblTemplate.Text" xml:space="preserve">
    <value>Template</value>
  </data>
  <data name="lbnManageTemplates.Text" xml:space="preserve">
    <value>Manage Templates</value>
  </data>
  <data name="QueryType.ManualSelection" xml:space="preserve">
    <value>Manual Selection</value>
  </data>
  <data name="QueryType.NewItems" xml:space="preserve">
    <value>New Items</value>
  </data>
  <data name="QueryType.TopSellers" xml:space="preserve">
    <value>Top Sellers</value>
  </data>
  <data name="rfvItemCount.Text" xml:space="preserve">
    <value>&lt;br/&gt;Item Limit is required</value>
  </data>
  <data name="rvItemCount.Text" xml:space="preserve">
    <value>&lt;br/&gt;Item Limit should be between 1 and 25</value>
  </data>
  <data name="QueryType.FeaturedItems" xml:space="preserve">
    <value>Featured Items</value>
  </data>
  <data name="lblAllCategories.Text" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="lblCategory.Help" xml:space="preserve">
    <value>Optionally select a category, if selected products will only be selected from this category based on the above criteria, or choose to select from all categories in the store. Note this option is not valid id "Single Product" is the filter type.</value>
  </data>
  <data name="lblCategory.Text" xml:space="preserve">
    <value>Product Category Filter</value>
  </data>
  <data name="QueryType.RandomItems" xml:space="preserve">
    <value>Random Items</value>
  </data>
  <data name="lblProduct.Help" xml:space="preserve">
    <value>If we are displaying a single product, here is where you select the product to be displayed in the product widget. Note this option is only available if "Single Product" is the selected filter.</value>
  </data>
  <data name="lblProduct.Text" xml:space="preserve">
    <value>Selected Product</value>
  </data>
  <data name="QueryType.SingleProduct" xml:space="preserve">
    <value>Single Product</value>
  </data>
  <data name="QueryType.SpecialOffer" xml:space="preserve">
    <value>Products On Special Offer</value>
  </data>
  <data name="lblCommaListModelNumbers.Text" xml:space="preserve">
    <value>Comma separated list of product model numbers e.g. 001,002,003</value>
  </data>
  <data name="lblCommaListProductIds.Text" xml:space="preserve">
    <value>Comma separated list of product ID's e.g. 1,2,3,4</value>
  </data>
  <data name="lblProducts.Help" xml:space="preserve">
    <value>The products to display, this option is only available if "manual section by product ID" or "manual section by model number" is selected.</value>
  </data>
  <data name="lblProducts.Text" xml:space="preserve">
    <value>Products To Display</value>
  </data>
  <data name="QueryType.ManualSelectionProductID" xml:space="preserve">
    <value>Manual Selection By Product ID's</value>
  </data>
  <data name="QueryType.ManualSelectionProductModelNumber" xml:space="preserve">
    <value>Manual Selection By Product Model Number's</value>
  </data>
  <data name="rf.Text" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="QueryType.ProductCategory" xml:space="preserve">
    <value>Product Category</value>
  </data>
</root>