<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllItems.Text" xml:space="preserve">
    <value>- Todos los artículos -</value>
  </data>
  <data name="btnSearch.Text" xml:space="preserve">
    <value>Ver los datos de ventas</value>
  </data>
  <data name="lblCategory.Help" xml:space="preserve">
    <value>Seleccione una categoría</value>
  </data>
  <data name="lblCategory.Text" xml:space="preserve">
    <value>Categoría</value>
  </data>
  <data name="lblEndDate.Help" xml:space="preserve">
    <value>Seleccione una fecha final para seleccionar los datos del producto para.</value>
  </data>
  <data name="lblEndDate.Text" xml:space="preserve">
    <value>Fecha de finalización</value>
  </data>
  <data name="lblError.Text" xml:space="preserve">
    <value>Por favor, seleccione un producto o categoría para crear un informe para, así como una &lt;br /&gt; inicio válida y la fecha final.</value>
  </data>
  <data name="lblModelNumber.Text" xml:space="preserve">
    <value>Número de modelo</value>
  </data>
  <data name="lblParentTitle.Text" xml:space="preserve">
    <value>Productos</value>
  </data>
  <data name="lblProductName.Text" xml:space="preserve">
    <value>Nombre del producto</value>
  </data>
  <data name="lblSalesCount.Text" xml:space="preserve">
    <value>Número de venta</value>
  </data>
  <data name="lblStartDate.Help" xml:space="preserve">
    <value>Seleccione la fecha de inicio para seleccionar las ventas de productos de datos para.</value>
  </data>
  <data name="lblStartDate.Text" xml:space="preserve">
    <value>Fecha de inicio</value>
  </data>
  <data name="lblTotals.Text" xml:space="preserve">
    <value>Totales</value>
  </data>
  <data name="lblTotalSalesPrice.Text" xml:space="preserve">
    <value>Las ventas totales</value>
  </data>
  <data name="btnDownloadAsSpreadSheet.Text" xml:space="preserve">
    <value>Descargar como archivo. Xls</value>
  </data>
  <data name="AllOrders.Text" xml:space="preserve">
    <value>Todos los datos de ventas de</value>
  </data>
  <data name="SelectedCategory.Text" xml:space="preserve">
    <value>Los datos de ventas filtrado por {0} del</value>
  </data>
  <data name="lblHowPageWorks.Help" xml:space="preserve">
    <value>Primero seleccione un producto o una categoría para crear un informe de ventas para, a continuación, seleccione una fecha de inicio y el final para ver los datos de ventas y haga clic en "Ver datos de las ventas". Una rejilla luego se rellenará con los datos de ventas, si la red contiene los datos de ventas, a continuación, tendrá la opción de descargar los datos de ventas en formato. Xls.</value>
  </data>
  <data name="lblHowPageWorks.Text" xml:space="preserve">
    <value>Crear informes de ventas</value>
  </data>
  <data name="lblOr.Text" xml:space="preserve">
    <value>O seleccione</value>
  </data>
  <data name="lblPleaseSelect.Text" xml:space="preserve">
    <value>Por favor seleccione ......</value>
  </data>
  <data name="lblProducts.Help" xml:space="preserve">
    <value>Seleccione un producto para ver</value>
  </data>
  <data name="lblProducts.Text" xml:space="preserve">
    <value>Producto</value>
  </data>
  <data name="SelectedProduct.Text" xml:space="preserve">
    <value>Los datos de ventas de productos filtrados por {0} del</value>
  </data>
  <data name="lblHeaderText.Text" xml:space="preserve">
    <value>Tienda de venta de informes</value>
  </data>
</root>