<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="deleteConfirm.Text" xml:space="preserve">
    <value>Are you sure you want to delete this template?</value>
  </data>
  <data name="hypHelpParameters.Text" xml:space="preserve">
    <value>Show Template Help</value>
  </data>
  <data name="imAddTemplate.Title" xml:space="preserve">
    <value>Add new template</value>
  </data>
  <data name="imDeleteTemplate.AlternateText" xml:space="preserve">
    <value>Delete template</value>
  </data>
  <data name="imDeleteTemplate.Title" xml:space="preserve">
    <value>Delete template</value>
  </data>
  <data name="imEditTemplate.Title" xml:space="preserve">
    <value>Edit template</value>
  </data>
  <data name="lblFooterTemplate.Help" xml:space="preserve">
    <value>This is the template which will be outputted to after all the items</value>
  </data>
  <data name="lblFooterTemplate.Text" xml:space="preserve">
    <value>Footer Template</value>
  </data>
  <data name="lblHeaderTemplate.Help" xml:space="preserve">
    <value>This is the template which will be outputted before we iterate over all the item</value>
  </data>
  <data name="lblHeaderTemplate.Text" xml:space="preserve">
    <value>Header Template</value>
  </data>
  <data name="lblItemTemplate.Help" xml:space="preserve">
    <value>Template used to output each item, this template can contain tokens which are replaced with data from the product. See the help link below for details.</value>
  </data>
  <data name="lblItemTemplate.Text" xml:space="preserve">
    <value>Item Template</value>
  </data>
  <data name="lblTemplateName.Help" xml:space="preserve">
    <value>Name of the template</value>
  </data>
  <data name="lblTemplateName.Text" xml:space="preserve">
    <value>Template Name</value>
  </data>
  <data name="lblTemplates.Help" xml:space="preserve">
    <value>Add, edit and delete templates used to show the products in the control</value>
  </data>
  <data name="lblTemplates.Text" xml:space="preserve">
    <value>Templates</value>
  </data>
  <data name="lbnCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="lbnDone.Text" xml:space="preserve">
    <value>Done</value>
  </data>
  <data name="lbnSave.Text" xml:space="preserve">
    <value>Save Template</value>
  </data>
  <data name="ltHelpParameters.Text" xml:space="preserve">
    <value>&lt;table border="0" cellspacing="3" cellpadding="3"&gt;
&lt;tr&gt;
	&lt;td&gt;&lt;strong&gt;Token&lt;/strong&gt;&lt;/td&gt;
	&lt;td&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;	
&lt;tr&gt;
	&lt;td&gt;[PRODUCTID]&lt;/td&gt;
	&lt;td&gt;Returns the numerical identifier for the product&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[PORTALID]&lt;/td&gt;
	&lt;td&gt;Returns the portalId that the product belongs to&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[MANUFACTURER]&lt;/td&gt;
	&lt;td&gt;Returns the name of the manufacturer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[MODELNAME]&lt;/td&gt;
	&lt;td&gt;Returns the name of the product&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[MODELNUMBER]&lt;/td&gt;
	&lt;td&gt;Returns the model number for the product&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;[PRICE]&lt;/td&gt;
  &lt;td&gt;Displays the products prices including the currency symbol. Thhis will also display the sale
  prices and a striked out original price is applicable. This is the prefered token to use for getting
  the product's price&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[UNITPRICE]&lt;/td&gt;
	&lt;td&gt;Returns the unit price for item, this price will not include tax/vat but will take into account any sales pricing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[UNITPRICEWITHCURRENCYSYMBOL]&lt;/td&gt;
	&lt;td&gt;Returns the unit price for item, this price will not include tax/vat but will take into account any sales pricing,
	    formatted with the store defined currency symbol.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[UNITPRICEINCTAX]&lt;/td&gt;
	&lt;td&gt;Returns a unit price including tax/vat and takes into account any sales pricing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[UNITPRICEINCTAXWITHCURRENCYSYMBOL]&lt;/td&gt;
	&lt;td&gt;Returns a unit price including tax/vat and takes into account any sales pricing,
	    formatted with the store defined currency symbol.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[ORIGINALPRICE]&lt;/td&gt;
	&lt;td&gt;Returns the unit price for item, this price will not include tax/vat or take into account any sales pricing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[ORIGINALPRICEWITHCURRENCYSYMBOL]&lt;/td&gt;
	&lt;td&gt;Returns the unit price for item, this price will not include tax/vat or take into account any sales pricing,
	    formatted with the store defined currency symbol.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[ORIGINALPRICEINCTAX]&lt;/td&gt;
	&lt;td&gt;Returns a unit price including tax/vat but does not takes into account any sales pricing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[ORIGINALPRICEINCTAXWITHCURRENCYSYMBOL]&lt;/td&gt;
	&lt;td&gt;Returns a unit price including tax/vat but does not takes into account any sales pricing,
	    formatted with the store defined currency symbol.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[KEYWORDS]&lt;/td&gt;
	&lt;td&gt;Returns any keywords defined for the product&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[SUMMARY]&lt;/td&gt;
	&lt;td&gt;Returns the summary field for the product&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[DESCRIPTION]&lt;/td&gt;
	&lt;td&gt;Returns the description field for the product&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[ARCHIVED]&lt;/td&gt;
	&lt;td&gt;Returns True or False indicating if the product is marked as archived (hidden)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[FEATURED]&lt;/td&gt;
	&lt;td&gt;Returns True or False indicating if the product is marked as a featured product&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[CREATEDBYUSER]&lt;/td&gt;
	&lt;td&gt;Return the integer for the user which created the item&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[CREATEDDATE]&lt;/td&gt;
	&lt;td&gt;Returns the date and time the item was created in the catalogue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[PRODUCTWEIGHT]&lt;/td&gt;
	&lt;td&gt;Returns the weight of the product to two decimal places&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[PRODUCTHEIGHT]&lt;/td&gt;
	&lt;td&gt;Returns the height of the product to two decimal places&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[PRODUCTLENGTH]&lt;/td&gt;
	&lt;td&gt;Returns the length of the product to two decimal places&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[PRODUCTWIDTH]&lt;/td&gt;
	&lt;td&gt;Returns the width of the product to two decimal places&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[SALESTARTDATE]&lt;/td&gt;
	&lt;td&gt;Returns the start date for the product offer sale&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[SALEENDDATE]&lt;/td&gt;
	&lt;td&gt;Returns the end date for the product offer sale&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[SALEPRICE]&lt;/td&gt;
	&lt;td&gt;Returns the sales prices for the product this value will not include tax/vat&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[SALEPRICEWITHCURRENCYSYMBOL]&lt;/td&gt;
	&lt;td&gt;Returns the sales prices for the product this value will not include tax/vat,
	    formatted with the store currency symbol.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[STOCKQUANTITY]&lt;/td&gt;
	&lt;td&gt;Returns the quantity of stock on hand for the product&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[LOWTHRESHOLD]&lt;/td&gt;
	&lt;td&gt;Returns the low warning threshold for the product&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[PURCHASEPRICE]&lt;/td&gt;
	&lt;td&gt;Return the purchase price for the product&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[PURCHASEPRICEWITHCURRENCYSYMBOL]&lt;/td&gt;
	&lt;td&gt;Return the purchase price for the product,
	    formatted with the store currency symbol.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[ROLEID]&lt;/td&gt;
	&lt;td&gt;Returns the RoleId that will get assigned to a user once they purchase this item. If no role is assigned to a user then this value will be -1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[PRODUCTSEONAME]&lt;/td&gt;
	&lt;td&gt;Returns the the product SEO name used in the url&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[SMALLIMAGEURL]&lt;/td&gt;
	&lt;td&gt;Returns the url to the small image for the product&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[MEDIUMIMAGEURL]&lt;/td&gt;
	&lt;td&gt;Returns the url to the medium image for the product&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[LARGEIMAGEURL]&lt;/td&gt;
	&lt;td&gt;Returns the url to the large image for the product&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[ADDTOCARTLINKURL]&lt;/td&gt;
	&lt;td&gt;Returns the url that should be used to add the item to the user's shopping cart&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[VIEWDETAILSLINKURL]&lt;/td&gt;
	&lt;td&gt;Returns the url used to display the main details page for the product&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[QUANTITYFIELD]&lt;/td&gt;
	&lt;td&gt;Displays a textbox to allow the customer to enter the number of items to add to the cart. Note for this to work the item must have a container decorated with the class cvVariantBoundary which holds this token and the ADDTOCARTLINKURL token.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
	&lt;td&gt;[AVERAGERATINGIMAGES]&lt;/td&gt;
	&lt;td&gt;Returns the average rating of the product as represented by images.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;</value>
  </data>
</root>