<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnSave.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="chkInverseRoleSelection.Text" xml:space="preserve">
    <value>Inverse Role Selection (When ticked the customer needs not to have the selected roles in order to use the coupon)</value>
  </data>
  <data name="dshExpiredCoupons.Text" xml:space="preserve">
    <value>Expired Coupons</value>
  </data>
  <data name="lblActiveTokens.Text" xml:space="preserve">
    <value>Active Coupons</value>
  </data>
  <data name="lblAdditionalFreeShipping.Help" xml:space="preserve">
    <value>As well as offering them a discount of their subtotal give the user free shipping on their order.</value>
  </data>
  <data name="lblAdditionalFreeShipping.Text" xml:space="preserve">
    <value>Include Free Shipping</value>
  </data>
  <data name="lblCanUseMultipleTimes.Help" xml:space="preserve">
    <value>Can the coupon be used multiple times.</value>
  </data>
  <data name="lblCanUseMultipleTimes.Text" xml:space="preserve">
    <value>Can Use Multiple Times</value>
  </data>
  <data name="lblCategory.Help" xml:space="preserve">
    <value>Select the categories that the product needs to assigned to so that it will be included in the coupon discount.</value>
  </data>
  <data name="lblCategory.Text" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="lblCouponBasics.Text" xml:space="preserve">
    <value>Coupons Basics</value>
  </data>
  <data name="lblCouponCode.Help" xml:space="preserve">
    <value>The code the user will enter to use the coupon.</value>
  </data>
  <data name="lblCouponCode.Text" xml:space="preserve">
    <value>Coupon Code</value>
  </data>
  <data name="lblCouponCodeIsNotUnique.Text" xml:space="preserve">
    <value>The coupon code is not unique, please enter a different coupon code.</value>
  </data>
  <data name="lblCouponDateRestriction.Text" xml:space="preserve">
    <value>Coupon Date Restrictions</value>
  </data>
  <data name="lblCouponRestrictions.Text" xml:space="preserve">
    <value>Coupon Restrictions</value>
  </data>
  <data name="lblCouponType.Help" xml:space="preserve">
    <value>The type of coupon, e.g. should the coupon offer a monetary or percentage discount from the cart subtotal or should it entitle the user to free shipping.</value>
  </data>
  <data name="lblCouponType.Text" xml:space="preserve">
    <value>Coupon Type</value>
  </data>
  <data name="lblCustomerEmailAddress.Help" xml:space="preserve">
    <value>This allows the coupon to be limited to a given email address, the customer we need to enter the matching email address to redeem this coupon.</value>
  </data>
  <data name="lblCustomerEmailAddress.Text" xml:space="preserve">
    <value>Unique customer email address</value>
  </data>
  <data name="lblDescription.Help" xml:space="preserve">
    <value>Description of the coupon.</value>
  </data>
  <data name="lblDescription.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="lblDiscountAmount.Help" xml:space="preserve">
    <value>The amount to discount, this should be entered as a whole number e.g. 50.00 if "percentage discount coupon" is selected the amount will be discounted as a % of the subtotal otherwise it will be a monetary value off the subtotal. If however free shipping coupon is selected this option is not applicable.</value>
  </data>
  <data name="lblDiscountAmount.Text" xml:space="preserve">
    <value>Discount Amount</value>
  </data>
  <data name="lblExpiredTokens.Text" xml:space="preserve">
    <value>Expired Coupons</value>
  </data>
  <data name="lblExpiryDate.Help" xml:space="preserve">
    <value>Optionally enter an expiry date for the coupon, leave blank if there is no expiry date.</value>
  </data>
  <data name="lblExpiryDate.Text" xml:space="preserve">
    <value>Coupon Expiry Date</value>
  </data>
  <data name="lblExpiryDateHeader.Text" xml:space="preserve">
    <value>Expiry Date</value>
  </data>
  <data name="lblHeaderText.Text" xml:space="preserve">
    <value>Store Discount Coupons</value>
  </data>
  <data name="lblInfo.Text" xml:space="preserve">
    <value>Coupons can be created here and the codes distributed to customers, who at the point of checkout will be able to enter them to receive either the monetary or percentage discount of their subtotal or free shipping, provided they meet the criteria to use the coupon that you have defined. More information relating to coupons can be found in the Cart Viper user guide.</value>
  </data>
  <data name="lblInvalidStartDate.Text" xml:space="preserve">
    <value>The start date cannot be after the end date.</value>
  </data>
  <data name="lblMaximumUses.Help" xml:space="preserve">
    <value>Defines the maximum number of times the coupon can be used before it will expire. Leave this field blank to have a coupon which never expires.</value>
  </data>
  <data name="lblMaximumUses.Text" xml:space="preserve">
    <value>Maximum # of uses</value>
  </data>
  <data name="lblMinSubTotal.Help" xml:space="preserve">
    <value>Optionally enter a minimum subtotal before the coupon can be used, leave blank if no minimum subtotal.</value>
  </data>
  <data name="lblMinSubTotal.Text" xml:space="preserve">
    <value>Minimum Subtotal</value>
  </data>
  <data name="lblNumberTimesUsed.Text" xml:space="preserve">
    <value>No: Times Used</value>
  </data>
  <data name="lblProductSku.Help" xml:space="preserve">
    <value>If entered the coupon will only give a discount for the product that has been entered here, all other products will be charged at the standard rate.</value>
  </data>
  <data name="lblProductSku.Text" xml:space="preserve">
    <value>Product Model Number</value>
  </data>
  <data name="lblRequiredRoleId.Help" xml:space="preserve">
    <value>Optional role that the customer needs to have to use the coupon</value>
  </data>
  <data name="lblRequiredRoleId.Text" xml:space="preserve">
    <value>Required Role</value>
  </data>
  <data name="lblSelectAll.Text" xml:space="preserve">
    <value>Select/Deselect All Categories</value>
  </data>
  <data name="lblStartDate.Help" xml:space="preserve">
    <value>If entered the coupon will not be valid until the start date has passed.</value>
  </data>
  <data name="lblStartDate.Text" xml:space="preserve">
    <value>Coupon Start Date</value>
  </data>
  <data name="lblStartDateHeader.Text" xml:space="preserve">
    <value>Start Date</value>
  </data>
  <data name="linkDelete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="linkEdit.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="rdFreeShipping.Text" xml:space="preserve">
    <value>Free Shipping Coupon</value>
  </data>
  <data name="rdMonetaryDiscount.Text" xml:space="preserve">
    <value>Monetary Discount Coupon</value>
  </data>
  <data name="rdPercentageDiscount.Text" xml:space="preserve">
    <value>Percentage Discount Coupon</value>
  </data>
  <data name="reEmailAddress" xml:space="preserve">
    <value>Invalid email address.</value>
  </data>
</root>