<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnSave.Text" xml:space="preserve">
    <value>Sparen</value>
  </data>
  <data name="dshExpiredCoupons.Text" xml:space="preserve">
    <value>Abgelaufene Gutscheine</value>
  </data>
  <data name="lblActiveTokens.Text" xml:space="preserve">
    <value>Aktive Gutscheine</value>
  </data>
  <data name="lblCanUseMultipleTimes.Help" xml:space="preserve">
    <value>Kann der Gutschein mehrfach verwendet werden.</value>
  </data>
  <data name="lblCanUseMultipleTimes.Text" xml:space="preserve">
    <value>Kann mehrfach verwenden</value>
  </data>
  <data name="lblCategory.Help" xml:space="preserve">
    <value>Die Kategorie, die den Gutschein angewandt werden sollten, um, beachten Sie alle Produkte in dieser Kategorie ermittelt werden, kommen für den Rabatt für den Gutschein. Dies gilt nicht, Rabatt auf alle Produkte in Unterkategorien der ausgewählten Kategorie.</value>
  </data>
  <data name="lblCategory.Text" xml:space="preserve">
    <value>Kategorie</value>
  </data>
  <data name="lblCouponBasics.Text" xml:space="preserve">
    <value>Coupons Basics</value>
  </data>
  <data name="lblCouponCode.Help" xml:space="preserve">
    <value>Der Code wird der Benutzer eingeben, um den Gutschein zu verwenden.</value>
  </data>
  <data name="lblCouponCode.Text" xml:space="preserve">
    <value>Coupon Code</value>
  </data>
  <data name="lblCouponCodeIsNotUnique.Text" xml:space="preserve">
    <value>Der Gutscheincode ist nicht eindeutig, geben Sie bitte einen anderen Gutschein-Code.</value>
  </data>
  <data name="lblCouponDateRestriction.Text" xml:space="preserve">
    <value>Coupon Datum Einschränkungen</value>
  </data>
  <data name="lblCouponRestrictions.Text" xml:space="preserve">
    <value>Gutschein-Beschränkungen</value>
  </data>
  <data name="lblCouponType.Help" xml:space="preserve">
    <value>Die Art der Coupons, sollte z. B. der Kupon bieten eine Geld-oder prozentualer Rabatt aus dem Warenkorb Zwischensumme oder sollte es berechtigt den Nutzer zu kostenloser Versand.</value>
  </data>
  <data name="lblCouponType.Text" xml:space="preserve">
    <value>Coupon Typ</value>
  </data>
  <data name="lblCustomerEmailAddress.Help" xml:space="preserve">
    <value>Dadurch kann der Coupon begrenzt werden, um eine bestimmte E-Mail-Adresse, die Kunden müssen wir die passenden E-Mail-Adresse, um diesen Gutschein einzulösen geben.</value>
  </data>
  <data name="lblCustomerEmailAddress.Text" xml:space="preserve">
    <value>Einzigartige Kunden per E-Mail-Adresse</value>
  </data>
  <data name="lblDescription.Help" xml:space="preserve">
    <value>Beschreibung des Gutscheins.</value>
  </data>
  <data name="lblDescription.Text" xml:space="preserve">
    <value>Beschreibung</value>
  </data>
  <data name="lblDiscountAmount.Help" xml:space="preserve">
    <value>Die Höhe der Ermäßigung, sollte dies als eine ganze Zahl zB 50,00 eingegeben werden, wenn "Prozentsatz Rabatt-Coupon" ausgewählt ist die Menge in% der Zwischensumme wird abgezinst werden, sonst wird es einen monetären Wert aus dem Wert sein. Wenn jedoch kostenloser Versand Gutschein gewählt wird diese Option wird nicht erhoben.</value>
  </data>
  <data name="lblDiscountAmount.Text" xml:space="preserve">
    <value>Discount Amount</value>
  </data>
  <data name="lblExpiredTokens.Text" xml:space="preserve">
    <value>Abgelaufene Gutscheine</value>
  </data>
  <data name="lblExpiryDate.Help" xml:space="preserve">
    <value>Geben Sie optional ein Verfallsdatum für den Kupon, leer lassen, wenn es kein Verfallsdatum.</value>
  </data>
  <data name="lblExpiryDate.Text" xml:space="preserve">
    <value>Coupon Ablaufdatum</value>
  </data>
  <data name="lblHeaderText.Text" xml:space="preserve">
    <value>Shop Aktionskupon</value>
  </data>
  <data name="lblInfo.Text" xml:space="preserve">
    <value>Gutscheine können hier erstellt werden und die Codes verteilt, um Kunden, die zum Zeitpunkt der Kasse in der Lage sein, sie zu betreten, um entweder die Währungs-oder prozentualer Abschlag ihrer Zwischensumme oder kostenloser Versand erhalten, vorausgesetzt sie erfüllen die Kriterien für die Coupons, die Sie definiert haben. Mehr Informationen über Coupons können in den Warenkorb Viper Bedienungsanleitung zu finden.</value>
  </data>
  <data name="lblInvalidStartDate.Text" xml:space="preserve">
    <value>Das Startdatum kann nicht nach dem Enddatum werden.</value>
  </data>
  <data name="lblMinSubTotal.Help" xml:space="preserve">
    <value>Geben Sie optional ein Minimum Zwischensumme vor dem Coupon verwendet werden kann, freilassen, wenn keine Mindestbestellmenge Zwischensumme.</value>
  </data>
  <data name="lblMinSubTotal.Text" xml:space="preserve">
    <value>Minimum Zwischensumme</value>
  </data>
  <data name="lblNumberTimesUsed.Text" xml:space="preserve">
    <value>No: Mal verwendet</value>
  </data>
  <data name="lblProductSku.Help" xml:space="preserve">
    <value>Wenn in die Coupon wird nur einen Rabatt für das Produkt, das eingegeben wurde hier, alle anderen Produkte auf der Standard-Satz berechnet.</value>
  </data>
  <data name="lblProductSku.Text" xml:space="preserve">
    <value>Produkt Modellnummer</value>
  </data>
  <data name="lblStartDate.Help" xml:space="preserve">
    <value>Wenn trat der Kupon wird nicht gültig sein, bis das Startdatum bestanden hat.</value>
  </data>
  <data name="lblStartDate.Text" xml:space="preserve">
    <value>Coupon Startdatum</value>
  </data>
  <data name="linkDelete.Text" xml:space="preserve">
    <value>Löschen</value>
  </data>
  <data name="linkEdit.Text" xml:space="preserve">
    <value>Bearbeiten</value>
  </data>
  <data name="rdFreeShipping.Text" xml:space="preserve">
    <value>Kostenloser Versand Coupon</value>
  </data>
  <data name="rdMonetaryDiscount.Text" xml:space="preserve">
    <value>Monetäre Discount Coupon</value>
  </data>
  <data name="rdPercentageDiscount.Text" xml:space="preserve">
    <value>Prozentualer Rabatt-Coupon</value>
  </data>
  <data name="reEmailAddress" xml:space="preserve">
    <value>Ungültige E-Mail-Adresse.</value>
  </data>
</root>