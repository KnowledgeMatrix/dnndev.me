<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnSaveTax.Text" xml:space="preserve">
    <value>Update Settings</value>
  </data>
  <data name="btnSaveTaxRate.Text" xml:space="preserve">
    <value>Save Tax Rate</value>
  </data>
  <data name="btnSaveVAT.Text" xml:space="preserve">
    <value>Save VAT Rates</value>
  </data>
  <data name="lblErrorTax.Text" xml:space="preserve">
    <value>Please specify a valid, non-negative, numeric tax rate in &lt;/br&gt;percent (don't include a percent sign)</value>
  </data>
  <data name="lblPercentage.Text" xml:space="preserve">
    <value>&lt;br/&gt;Example, 10% should be entered at 0.10 into the textbox</value>
  </data>
  <data name="lblReducedVatRate.Help" xml:space="preserve">
    <value>The VAT rate to charge products that are assigned to "Reduced VAT Rate" e.g. 0.05 = 5%.</value>
  </data>
  <data name="lblReducedVatRate.Text" xml:space="preserve">
    <value>Reduced VAT Rate</value>
  </data>
  <data name="lblStandardTaxRate.Help" xml:space="preserve">
    <value>The tax rate that will be applied to all products: &lt;br /&gt; e.g. 0.06 = 6% &lt;br /&gt; If you are using tax_tables mode you must also select the state this tax rate applies to.</value>
  </data>
  <data name="lblStandardTaxRate.Text" xml:space="preserve">
    <value>Tax Rate</value>
  </data>
  <data name="lblStandardVatRate.Help" xml:space="preserve">
    <value>The VAT rate to charge products that are assigned to "Standard VAT Rate" e.g. 0.20 = 20%.</value>
  </data>
  <data name="lblStandardVatRate.Text" xml:space="preserve">
    <value>Standard VAT Rate</value>
  </data>
  <data name="lblTaxOptions.Help" xml:space="preserve">
    <value>The occasions that tax should be charged.</value>
  </data>
  <data name="lblTaxOptions.Text" xml:space="preserve">
    <value>Tax Options</value>
  </data>
  <data name="lblTaxTable.Help" xml:space="preserve">
    <value>The individual state taxes that have been entered, here you can optionally add a different tax rate for each state. This option is only available if your store is located in the USA</value>
  </data>
  <data name="lblTaxTable.Text" xml:space="preserve">
    <value>State Taxes</value>
  </data>
  <data name="lblVatRates.Help" xml:space="preserve">
    <value>The VAT rates that are defined for the store, VAT will be charged on all goods at the specified VAT rate that are charged to a billing address within the EU. Each VAT rate is then assigned to a product and that VAT rate will be charged for that product.</value>
  </data>
  <data name="lblVatRates.Text" xml:space="preserve">
    <value>VAT Rates</value>
  </data>
  <data name="lblZeroVatRate.Help" xml:space="preserve">
    <value>The rate we should charge for zero VAT rated product e.g. 0.0</value>
  </data>
  <data name="lblZeroVatRate.Text" xml:space="preserve">
    <value>Zero VAT Rate</value>
  </data>
  <data name="RequiredFieldValidator1.Text" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="RequiredFieldValidator2.Text" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="RequiredFieldValidator3.Text" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="RequiredFieldValidator4.Text" xml:space="preserve">
    <value>Required</value>
  </data>
  <data name="lblInfo.Text" xml:space="preserve">
    <value>&lt;p&gt;From here tax or VAT can be configured for your store. &lt;br/&gt;
From the store location settings you have entered via the store info page Cart Viper will determine if you should use tax or VAT.&lt;/p&gt;
&lt;p&gt;
If you are using tax you must then configure the tax options you would like to use e.g. Standard Tax Rate, Tax Tables etc. &lt;br/&gt;
If you are using VAT please enter values for each of the VAT rates. More information on these settings can be found in the Cart Viper user guide.&lt;/p&gt;</value>
  </data>
  <data name="lblCountyRate.Help" xml:space="preserve">
    <value>The tax rate for the individual county, this rate will be added onto the standard tax rate for New York.</value>
  </data>
  <data name="lblCountyRate.Text" xml:space="preserve">
    <value>County Tax Rate</value>
  </data>
  <data name="lblCountyTaxes.Help" xml:space="preserve">
    <value>The different tax rates for each of the counties in NY</value>
  </data>
  <data name="lblCountyTaxes.Text" xml:space="preserve">
    <value>County Taxes</value>
  </data>
  <data name="lblExtTaxService.Help" xml:space="preserve">
    <value>Defines the external tax service used to determine the tax during the checkout process.</value>
  </data>
  <data name="lblExtTaxService.Text" xml:space="preserve">
    <value>External Tax Service</value>
  </data>
  <data name="lblTaxAddress.Help" xml:space="preserve">
    <value>Determines which address is used to work out the tax for the order</value>
  </data>
  <data name="lblTaxAddress.Text" xml:space="preserve">
    <value>Tax Address</value>
  </data>
  <data name="lblTaxFreeRoles.Help" xml:space="preserve">
    <value>If a user has any of the selected roles then no tax will be applied to their cart during the checkout.</value>
  </data>
  <data name="lblTaxFreeRoles.Text" xml:space="preserve">
    <value>Tax Free Roles</value>
  </data>
  <data name="lblTaxStoreCountryOnly.Help" xml:space="preserve">
    <value>When checked we will only apply tax to addresses which are in the same country as the store address defined on the Store Info page. If you have a stored with a EU country defined then this should be left unchecked and only EU states will be taxed.</value>
  </data>
  <data name="lblTaxStoreCountryOnly.Text" xml:space="preserve">
    <value>Only Apply Tax in Store Country</value>
  </data>
  <data name="lblUpload.Help" xml:space="preserve">
    <value>Upload your Zip2Tax CSV File</value>
  </data>
  <data name="lblUpload.Text" xml:space="preserve">
    <value>Upload your Zip2Tax CSV File</value>
  </data>
  <data name="importFail.Text" xml:space="preserve">
    <value>Some errors occurred during the import process.</value>
  </data>
  <data name="importSuccess.Text" xml:space="preserve">
    <value>The tax rates were imported successfully from the file.</value>
  </data>
  <data name="lblLastUploadHelp.Help" xml:space="preserve">
    <value>The name and time of the last Zip2Tax file that you uploaded into the system</value>
  </data>
  <data name="lblLastUploadHelp.Text" xml:space="preserve">
    <value>Last File Uploaded</value>
  </data>
</root>