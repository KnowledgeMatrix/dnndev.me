<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>Marketo Forms Settings</value>
  </data>
  <data name="lblMarketoCode.Help" xml:space="preserve">
    <value>Once the script is processed this will automatically be set with the form code from the script above.</value>
  </data>
  <data name="lblMarketoCode.Text" xml:space="preserve">
    <value>Marketo Code</value>
  </data>
  <data name="lblMarketoId.Help" xml:space="preserve">
    <value>Once the script is processed this will automatically be set with the form id from the script above.</value>
  </data>
  <data name="lblMarketoId.Text" xml:space="preserve">
    <value>Marketo Id</value>
  </data>
  <data name="lblMarketoScript.Help" xml:space="preserve">
    <value>Paste your Marketo Forms 2.0 Script here</value>
  </data>
  <data name="lblMarketoScript.Text" xml:space="preserve">
    <value>Marketo Script</value>
  </data>
  <data name="cmdProcessScript.Text" xml:space="preserve">
    <value>Process Script</value>
  </data>
  <data name="lblMarketoURL.Help" xml:space="preserve">
    <value>Once the script is processed this will automatically be set with the URL from the script above.</value>
  </data>
  <data name="lblMarketoURL.Text" xml:space="preserve">
    <value>Marketo URL</value>
  </data>
  <data name="lblFooterMarkup.Help" xml:space="preserve">
    <value>Any HTML supplied here will be placed after the marketo form.</value>
  </data>
  <data name="lblFooterMarkup.Text" xml:space="preserve">
    <value>Footer Markup</value>
  </data>
  <data name="lblHeaderMarkup.Help" xml:space="preserve">
    <value>Any HTML supplied here will be placed before the marketo form.</value>
  </data>
  <data name="lblHeaderMarkup.Text" xml:space="preserve">
    <value>Header Markup</value>
  </data>
  <data name="ddlOverrideOnSuccess.default" xml:space="preserve">
    <value>Do Not Override</value>
  </data>
  <data name="ddlOverrideOnSuccess.message" xml:space="preserve">
    <value>Custom Message</value>
  </data>
  <data name="ddlOverrideOnSuccess.redirect" xml:space="preserve">
    <value>Redirect to URL</value>
  </data>
  <data name="lblCustomMessage.Help" xml:space="preserve">
    <value>Enter the custom message you would like to display to the user upon for submission. It is okay to use HTML in this field.</value>
  </data>
  <data name="lblCustomMessage.Text" xml:space="preserve">
    <value>Custom Message</value>
  </data>
  <data name="lblOverrideOnSuccess.Help" xml:space="preserve">
    <value>Typically Marketo forms 2.0 completion events can be configured via the Marketo interface. However, by using this setting it is possible to override that action and you can choose to display a message or redirect to a different page. Once you select the type of completion even you would like additional fields will appear.</value>
  </data>
  <data name="lblOverrideOnSuccess.Text" xml:space="preserve">
    <value>Override Default Compleation Event</value>
  </data>
  <data name="lblRedirectURL.Help" xml:space="preserve">
    <value>Use this control to build/select/specify the URL you would like to redirect the user to upon completion of the form.</value>
  </data>
  <data name="lblRedirectURL.Text" xml:space="preserve">
    <value>Redirect URL</value>
  </data>
  <data name="ProcessScriptError_InvalidCodeOrId.Text" xml:space="preserve">
    <value>The Marketo code or id is not correct.</value>
  </data>
  <data name="ProcessScriptError_InvalidUrl.Text" xml:space="preserve">
    <value>The Marketo URL is not correct.</value>
  </data>
</root>