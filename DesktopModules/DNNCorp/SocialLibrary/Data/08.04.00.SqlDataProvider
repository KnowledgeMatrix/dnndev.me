/* SOCIAL-4391 */

IF object_id(N'{databaseOwner}{objectQualifier}Social_Group_GetGroup', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Social_Group_GetGroup
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Social_Group_GetGroup]
	@PortalId INT,
	@GroupId INT,
	@UserId INT,
	@AllowAnonymous BIT
AS
BEGIN
	;WITH AllowedRoles AS
	(
		SELECT RoleId FROM {databaseOwner}{objectQualifier}Roles 
		WHERE PortalId = @PortalId AND IsSystemRole = 1 AND RoleName IN 
		('Administrators','Community Manager', 'Moderators', 'Content Editors','Content Managers')
	)
	
	SELECT	R.PortalID As PortalId,
			R.RoleID AS GroupId,
			R.RoleName AS GroupName,
			R.Description,
			R.IsPublic,
			R.IconFile,
			R.Status,
			R.RoleGroupID,
			R.SecurityMode,
			R.IsSystemRole,
			R.CreatedByUserID,
			R.CreatedOnDate,
			R.LastModifiedOnDate,
			(SELECT CAST ((SELECT RoleId FROM {databaseOwner}{objectQualifier}UserRoles WITH (NOLOCK) WHERE RoleId = @GroupId AND UserId = @UserId ) AS BIT)) AS IsMember,

			(SELECT CAST ((SELECT RoleId FROM {databaseOwner}{objectQualifier}UserRoles WITH (NOLOCK) WHERE RoleId = @GroupId AND UserId = @UserId AND Status = -1) AS BIT)) AS MembershipPending,

			(SELECT CAST ((SELECT SettingValue FROM {databaseOwner}{objectQualifier}RoleSettings WHERE RoleId = R.RoleId AND SettingName = 'ReviewMembers') AS BIT)) AS ReviewMembers,

			(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}UserRoles U 
				INNER JOIN {databaseOwner}{objectQualifier}UserPortals UP 
				ON UP.UserId = U.UserId
				WHERE U.RoleID = R.RoleID AND UP.PortalId = @PortalId AND U.Status = 1 AND UP.IsDeleted = 0 AND UP.Authorised = 1) AS MemberCount
	FROM    
			{databaseOwner}{objectQualifier}Roles AS R			
	WHERE
			R.RoleId = @GroupId
			AND
			R.SecurityMode IN (1, 2)
			AND (	R.IsPublic = 1
					OR
					-- Super User
					(EXISTS (SELECT UserID FROM {databaseOwner}{objectQualifier}Users WHERE @UserId = UserID AND IsSuperUser = 1))
					OR
					-- Admin
					(EXISTS (SELECT UserID FROM {databaseOwner}{objectQualifier}UserRoles WHERE @UserId = UserID AND RoleId IN 
						(SELECT RoleId FROM AllowedRoles)))			
					OR
					-- Member
					(IsPublic = 0 AND EXISTS (SELECT RoleID FROM {databaseOwner}{objectQualifier}UserRoles WHERE R.RoleID = RoleID AND @UserId = UserID))
					OR
					-- Private Anonymous Viewing
					IsPublic = 0 AND @AllowAnonymous = 1
				)
							
END
GO