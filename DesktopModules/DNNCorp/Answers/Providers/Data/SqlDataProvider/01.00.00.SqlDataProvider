
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_ContentItem_GetByTypeAndCreated') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_ContentItem_GetByTypeAndCreated
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Post_AcceptAnswer') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Post_AcceptAnswer
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Post_Add') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Post_Add
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Post_Delete') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Post_Delete
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Post_Get') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Post_Get
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Post_GetAnswers') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Post_GetAnswers
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Post_GetAnswersByDate') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Post_GetAnswersByDate
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Post_SoftDelete') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Post_SoftDelete
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Post_Update') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Post_Update
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Post_UpdateViewCount') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Post_UpdateViewCount
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Question_GetByContentItem') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Question_GetByContentItem
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Question_GetSitemap') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Question_GetSitemap
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_UpdateScheduleItemSetting') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_UpdateScheduleItemSetting
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Vote_Add') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Vote_Add
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Vote_GetPost') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Vote_GetPost
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Vote_GetTerm') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Vote_GetTerm
GO

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_GetPostIdFromContentItemId') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_GetPostIdFromContentItemId
GO

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Question_GetSearchable') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Question_GetSearchable
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Answers_IsSearchMatch]', N'FN') IS NOT NULL
	DROP FUNCTION {databaseOwner}[{objectQualifier}Answers_IsSearchMatch]
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}vw_Answers_Posts') and OBJECTPROPERTY(id, N'IsView') = 1)
	DROP VIEW {databaseOwner}{objectQualifier}vw_Answers_Posts
GO

IF NOT EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Post') and OBJECTPROPERTY(id, N'IsTable') = 1)
BEGIN
	CREATE TABLE {databaseOwner}[{objectQualifier}Answers_Post]
	(
		[PostId] [int] IDENTITY(1,1) NOT NULL,
		[Body] [nvarchar](max) NOT NULL,
		[ParentId] [int] NULL,
		[PortalId] [int] NOT NULL,
		[GroupId] [int] NOT NULL,
		[ContentItemId] [int] NULL,
		[ViewCount] [int] NULL,
		[Score] [int] NOT NULL,
		[Approved] [bit] NOT NULL,
		[Deleted] [bit] NOT NULL,
		[AnswerId] [int] NULL,
		[Closed] [bit] NOT NULL,
		[Protected] [bit] NOT NULL,
		[CreatedUserId] [int] NOT NULL,
		[CreatedDate] [datetime] NOT NULL,
		[LastModifiedUserId] [int] NULL,
		[LastModifiedDate] [datetime] NULL
	)

	ALTER TABLE {databaseOwner}{objectQualifier}Answers_Post
			WITH NOCHECK
	ADD CONSTRAINT PK_{objectQualifier}Answers_Post PRIMARY KEY CLUSTERED ( [PostId] DESC )

	ALTER TABLE {databaseOwner}{objectQualifier}Answers_Post
	ADD CONSTRAINT FK_{objectQualifier}Answers_Post_{objectQualifier}Portals FOREIGN KEY ( [PortalId] ) REFERENCES {databaseOwner}{objectQualifier}Portals ( [PortalID] ) ON DELETE CASCADE
			ON UPDATE CASCADE

END
GO

IF NOT EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Vote') and OBJECTPROPERTY(id, N'IsTable') = 1)
BEGIN
	CREATE TABLE {databaseOwner}[{objectQualifier}Answers_Vote]
	(
		[VoteId] [int] IDENTITY(1,1) NOT NULL,
		[PostId] [int] NOT NULL,
		[TermId] [int] NOT NULL,
		[VoteTypeId] [int] NOT NULL,
		[PortalId] [int] NOT NULL,
		[CreatedByUserId] [int] NOT NULL,
		[CreatedOnDate] [datetime] NOT NULL
	)

	ALTER TABLE {databaseOwner}{objectQualifier}Answers_Vote
			WITH NOCHECK
	ADD CONSTRAINT PK_{objectQualifier}Answers_Vote PRIMARY KEY CLUSTERED ( [VoteId] )
END
GO


GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_Answers_Posts]
AS
	SELECT  (SELECT    COUNT(PostId)
					   FROM          {databaseOwner}{objectQualifier}Answers_Post
					   WHERE      (ParentId = P.PostId) AND (ParentId <> 0) AND (Approved = 1) AND (Deleted = 0)
			) AS TotalAnswers,
			CI.[Content] ,
			P.ContentItemId ,
			P.PostId ,
			P.Body ,
			P.PortalId ,
			P.GroupId ,
			P.ViewCount ,
			P.Approved ,
			P.AnswerId ,
			P.CreatedUserId ,
			CI.ContentTypeID ,
			CI.TabID ,
			CI.ModuleID ,
			CI.ContentKey ,
			CI.Indexed ,
			CI.CreatedByUserID ,
			CI.CreatedOnDate ,
			CI.LastModifiedByUserID ,
			CI.LastModifiedOnDate ,
			P.Deleted ,
			P.ParentId ,
			P.Score ,
			P.Closed ,
			P.Protected ,
			P.CreatedDate ,
			P.LastModifiedUserId ,
			P.LastModifiedDate
	FROM    {databaseOwner}{objectQualifier}ContentItems AS CI
			INNER JOIN {databaseOwner}{objectQualifier}Answers_Post AS P ON CI.ContentItemID = P.ContentItemID
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}Answers_IsSearchMatch]
	(
	  @ContentItemId INT ,
	  @GroupId INT ,
	  @CurrentGroup INT ,
	  @UserId INT ,
	  @CreatorUserId INT ,
	  @Filter INT ,
	  @Keyword NVARCHAR(255) ,
	  @Approved BIT ,
	  @TotalAnswers INT ,
	  @Description NVARCHAR(1000) 
	)
RETURNS BIT
AS 
	BEGIN
	-- Category filter
		IF @Filter > -1 
			BEGIN
				IF @Filter = 1 -- answered
					BEGIN
						IF ( @TotalAnswers > 0
							 AND @Approved = 1
						   ) 
							RETURN 1
					END
				IF @Filter = 2 -- no answers
					BEGIN
						IF ( @TotalAnswers < 1
							 AND @Approved = 1
						   ) 
							RETURN 1
					END
				IF @Filter = 3 -- my content items
					BEGIN
						IF ( @UserId = @CreatorUserId ) 
							RETURN 1
					END
				IF @Filter = 4 -- my answers 
					BEGIN
                        IF ( SELECT COUNT(PostId)
                             FROM   {databaseOwner}[{objectQualifier}Answers_Post]
                             WHERE  CreatedUserId = @CreatorUserId
                                    AND Deleted = 0
                                    AND ParentId > 0
                           ) > 0 
                            RETURN 1
					END
			END
		RETURN 0
	END
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_Post_AcceptAnswer]
	@PostId INT ,
	@UserId INT
AS 
	DECLARE @QuestionID INT
	SET @QuestionID = ( SELECT  ParentID
								FROM    {databaseOwner}{objectQualifier}Answers_Post
								WHERE   PostID = @PostId
							  )
	UPDATE  {databaseOwner}{objectQualifier}Answers_Post
	SET     AnswerID = @PostId
	WHERE   PostID = @QuestionID
			OR ParentID = @QuestionID
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_Post_Delete]
	@PostId INT,
	@PortalId INT
AS 
	DELETE  {databaseOwner}{objectQualifier}Answers_Post
	WHERE   PortalId = @PortalId
			AND ( ( PostId = @PostId )
				  OR ( ParentId = @PostId )
				)
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_Post_Get]
	@PostId INT ,
	@ModuleId INT
AS 
	SELECT  PostId ,
			Body ,
			ParentId ,
			PortalId ,
			GroupId ,
			ViewCount ,
			Score ,
			Approved ,
			Deleted ,
			AnswerId ,
			Closed ,
			Protected ,
			CreatedUserId ,
			CreatedDate ,
			LastModifiedUserId ,
			LastModifiedDate ,
			vp.ContentItemId ,
			Content ,
			ContentTypeID ,
			TabID ,
			ModuleID ,
			ContentKey ,
			Indexed ,
			CreatedByUserId ,
			CreatedOnDate ,
			LastModifiedByUserID ,
			LastModifiedOnDate ,
			CIMD.[MetaDataValue] AS [ContentTitle] ,
			( SELECT    COUNT(PostId)
			  FROM      {databaseOwner}{objectQualifier}Answers_Post
			  WHERE     ( ParentId = vp.PostId )
						AND ( ParentId <> 0 )
						AND ( Approved = 1 )
						AND ( Deleted = 0 )
			) AS TotalAnswers ,
			( SELECT    COUNT(PostId)
			  FROM      {databaseOwner}{objectQualifier}Answers_Vote
			  WHERE     PostID = vp.PostID
						AND VoteTypeID = 1
			) AS UpVotes ,
			( SELECT    COUNT(PostId)
			  FROM      {databaseOwner}{objectQualifier}Answers_Vote
			  WHERE     PostID = vp.PostID
						AND VoteTypeID = -1
			) AS DownVotes ,
			1 AS TotalRecords
	FROM    {databaseOwner}{objectQualifier}vw_Answers_Posts VP
			LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems_MetaData CIMD ON CIMD.ContentItemID = VP.[ContentItemID]
															  AND CIMD.MetaDataID = ( SELECT
															  MetaDataID
															  FROM
															  {databaseOwner}[{objectQualifier}MetaData]
															  WHERE
															  MetaDataName = 'Title'
															  )
	WHERE   PostId = @PostId
			AND ( @ModuleId IS NULL
				  OR ( ModuleId = @ModuleId )
				)
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_Post_GetAnswers]
	@PostId INT ,
	@PortalId INT
AS 
	SELECT  * ,
			( SELECT    COUNT(PostId)
			  FROM      {databaseOwner}{objectQualifier}Answers_Post
			  WHERE     ( ParentId = vp.PostId )
						AND ( ParentId <> 0 )
						AND ( Approved = 1 )
						AND ( Deleted = 0 )
			) AS TotalAnswers ,
			( SELECT    COUNT(PostId)
			  FROM      {databaseOwner}{objectQualifier}Answers_Vote
			  WHERE     ( PostId = vp.PostId )
						AND ( vp.ParentID = 0 )
			) AS QuestionVotes ,
			( SELECT    @@ROWCOUNT
			) AS TotalRecords
	FROM    {databaseOwner}{objectQualifier}vw_Answers_Posts vp
	WHERE   ParentId = @PostId
			AND PortalId = @PortalId
			AND Deleted = 0
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_Post_GetAnswersByDate]
	@StartDate DATETIME ,
	@EndDate DATETIME
AS 
	SELECT  * ,
			@@ROWCOUNT AS TotalRecords
	FROM    {databaseOwner}{objectQualifier}vw_Answers_Posts vp
	WHERE   ParentId <> 0
			AND CreatedDate > @StartDate
			AND CreatedDate < @EndDate
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_Post_SoftDelete]
	@PostId INT ,
	@PortalId INT
AS 
	UPDATE  {databaseOwner}{objectQualifier}Answers_Post
	SET     Deleted = 1,
			ContentItemId = 0
	WHERE   PortalId = @PortalId
			AND ( ( PostId = @PostId )
				  OR ( ParentId = @PostId )
				)
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_Post_UpdateViewCount]
	@PostID INT,
	@PortalID INT
AS 
	UPDATE  {databaseOwner}{objectQualifier}Answers_Post
	SET     ViewCount = ViewCount + 1
	WHERE   PortalID = @PortalID
			AND ( PostID = @PostID )
			OR ( ParentID = @PostID )
		  AND Approved = 1
		  AND Deleted = 0
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_Question_GetByContentItem]
	@ContentItemID INT ,
	@ModuleID INT
AS 
	SELECT  PostId ,
			Body ,
			ParentId ,
			PortalId ,
			GroupId ,
			ViewCount ,
			Score ,
			Approved ,
			Deleted ,
			AnswerId ,
			Closed ,
			Protected ,
			CreatedUserId ,
			CreatedDate ,
			LastModifiedUserId ,
			LastModifiedDate ,
			vp.ContentItemId ,
			Content ,
			ContentTypeID ,
			TabID ,
			ModuleID ,
			ContentKey ,
			Indexed ,
			CreatedByUserId ,
			CreatedOnDate ,
			LastModifiedByUserID ,
			LastModifiedOnDate ,
			CIMD.[MetaDataValue] AS [ContentTitle] ,
			( SELECT    COUNT(PostId)
			  FROM      {databaseOwner}{objectQualifier}Answers_Post
			  WHERE     ( ParentId = vp.PostId )
						AND ( ParentId <> 0 )
						AND ( Approved = 1 )
						AND ( Deleted = 0 )
			) AS TotalAnswers ,
			( SELECT    COUNT(PostId)
			  FROM      {databaseOwner}{objectQualifier}Answers_Vote
			  WHERE     PostID = vp.PostID
						AND VoteTypeID = 1
			) AS UpVotes ,
			( SELECT    COUNT(PostId)
			  FROM      {databaseOwner}{objectQualifier}Answers_Vote
			  WHERE     PostID = vp.PostID
						AND VoteTypeID = -1
			) AS DownVotes ,
			1 AS TotalRecords
	FROM    {databaseOwner}{objectQualifier}vw_Answers_Posts vp
			LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems_MetaData CIMD ON CIMD.ContentItemID = vp.ContentItemID
															  AND CIMD.MetaDataID = ( SELECT
															  MetaDataID
															  FROM
															  {databaseOwner}[{objectQualifier}MetaData]
															  WHERE
															  MetaDataName = 'Title'
															  )
	WHERE   vp.ContentItemID = @ContentItemID
			AND ParentID = 0
			AND Deleted = 0
			AND Approved = 1
			AND ModuleID = @ModuleID
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_Question_GetSitemap] @PortalId INT
AS 
	SELECT TOP ( 2000 )
			PostId ,
			Body ,
			ParentId ,
			PortalId ,
			GroupId
			ViewCount ,
			Score ,
			Approved ,
			Deleted ,
			AnswerId ,
			Closed ,
			Protected ,
			CreatedUserId ,
			CreatedDate ,
			LastModifiedUserId ,
			LastModifiedDate ,
			ContentItemID ,
			Content ,
			ContentTypeID ,
			TabID ,
			ModuleID ,
			ContentKey ,
			Indexed ,
			CreatedByUserID ,
			CreatedOnDate ,
			LastModifiedByUserID ,
			LastModifiedOnDate ,
			( SELECT TOP ( 1 )
						CreatedUserID
			  FROM      {databaseOwner}{objectQualifier}vw_Answers_Posts
			  WHERE     ( PostID = vp.PostID
						  OR ParentID = vp.PostID
						)
						AND Deleted = 0
						AND Approved = 1
			  ORDER BY  CreatedDate DESC
			) AS LastApprovedUserID ,
			( SELECT TOP ( 1 )
						CreatedDate
			  FROM      {databaseOwner}{objectQualifier}vw_Answers_Posts
			  WHERE     ( PostID = vp.PostID
						  OR ParentID = vp.PostID
						)
						AND Deleted = 0
						AND Approved = 1
			  ORDER BY  CreatedDate DESC
			) AS LastApprovedDate ,
			( SELECT    COUNT(PostID)
			  FROM      {databaseOwner}{objectQualifier}Answers_Post
			  WHERE     ( ParentID = vp.PostID )
						AND ( ParentID <> 0 )
						AND ( Approved = 1 )
						AND ( Deleted = 0 )
			) AS TotalAnswers ,
			( SELECT    COUNT(PostId)
			  FROM      {databaseOwner}{objectQualifier}Answers_Vote
			  WHERE     PostID = vp.PostID
						AND VoteTypeID = 1
			) AS UpVotes ,
			( SELECT    COUNT(PostId)
			  FROM      {databaseOwner}{objectQualifier}Answers_Vote
			  WHERE     PostID = vp.PostID
						AND VoteTypeID = -1
			) AS DownVotes ,
			( SELECT    COUNT(PostID)
			  FROM      {databaseOwner}{objectQualifier}vw_Answers_Posts
			  WHERE     PortalID = @PortalId
						AND ParentID = 0
						AND Deleted = 0
			) AS TotalRecords
	FROM    {databaseOwner}{objectQualifier}vw_Answers_Posts vp
	WHERE   PortalID = @PortalId
			AND ParentID = 0
			AND Deleted = 0
			AND Approved = 1
	ORDER BY CreatedOnDate DESC
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_UpdateScheduleItemSetting]
	@ScheduleID INT ,
	@Key NVARCHAR(50) ,
	@Value NVARCHAR(256)
AS 
	UPDATE  {databaseOwner}{objectQualifier}ScheduleItemSettings
	SET     SettingValue = @Value
	WHERE   ScheduleID = @ScheduleID
			AND SettingName = @Key
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_Vote_Add]
	@PostId INT ,
	@TermId INT ,
	@VoteTypeId INT ,
	@PortalId INT ,
	@CreatedByUserId INT ,
	@CreatedOnDate DATETIME
AS 
	DECLARE @VoteCount INT
	IF @PostId > 0 
		BEGIN
			IF ( @VoteTypeId != 0 ) 
				BEGIN
					SET @VoteCount = ( SELECT   COUNT(VoteId)
									   FROM     {databaseOwner}{objectQualifier}Answers_Vote
									   WHERE    CreatedByUserId = @CreatedByUserId
												AND PostId = @PostId
												AND ( VoteTypeId = -1
													  OR VoteTypeId = 1
													)
									 )
				END
			ELSE 
				BEGIN
					SET @VoteCount = ( SELECT   COUNT(VoteId)
									   FROM     {databaseOwner}{objectQualifier}Answers_Vote
									   WHERE    CreatedByUserId = @CreatedByUserId
												AND PostId = @PostId
												AND VoteTypeId = 0
									 )
				END
		END
	ELSE 
		BEGIN
			IF ( ( @VoteTypeId = -2 )
				 OR ( @VoteTypeId = 2 )
			   ) 
				BEGIN
					SET @VoteCount = ( SELECT   COUNT(VoteId)
									   FROM     {databaseOwner}{objectQualifier}Answers_Vote
									   WHERE    CreatedByUserId = @CreatedByUserId
												AND PortalId = @PortalId
												AND TermId = @TermId
												AND ( VoteTypeId = -2
													  OR VoteTypeId = 2
													)
									 )
				END
		END
	IF @VoteCount < 1 
		BEGIN
			INSERT  {databaseOwner}{objectQualifier}Answers_Vote
					( PostId ,
					  TermId ,
					  VoteTypeId ,
					  PortalId ,
					  CreatedByUserId ,
					  CreatedOnDate		
					)
			VALUES  ( @PostId ,
					  @TermId ,
					  @VoteTypeId ,
					  @PortalId ,
					  @CreatedByUserId ,
					  @CreatedOnDate	
					)
			SELECT  SCOPE_IDENTITY()
			
			DECLARE @ParentId INT
			SET @ParentId = 0
			
			IF @PostId > 0 
				BEGIN
					SET @ParentId = ( SELECT    ParentId
									  FROM      {databaseOwner}{objectQualifier}Answers_Post
									  WHERE     PostId = @PostId
									)
					IF @VoteTypeId = 1 
						BEGIN
							UPDATE  {databaseOwner}{objectQualifier}Answers_Post
							SET     Score = Score + 1
							WHERE   PostId = @PostId
						END
					ELSE 
						IF @VoteTypeId = -1 
							BEGIN
								UPDATE  {databaseOwner}{objectQualifier}Answers_Post
								SET     Score = Score - 1
								WHERE   PostId = @PostId
							END
				END
			IF @TermId > 0 
				BEGIN
					IF @VoteTypeId = 2 
						BEGIN
							UPDATE  {databaseOwner}{objectQualifier}Answers_Term_Synonym
							SET     Score = Score + 1
							WHERE   RelatedTermId = @TermId
									AND PortalId = @PortalId
						END
					ELSE 
						IF @VoteTypeId = -2 
							BEGIN
								UPDATE  {databaseOwner}{objectQualifier}Answers_Term_Synonym
								SET     Score = Score - 1
								WHERE   RelatedTermId = @TermId
										AND PortalId = @PortalId
							END
				END
		END
	ELSE 
		BEGIN
			IF @PostId > 0 
				BEGIN
					IF @VoteTypeId = -1 
						BEGIN
							UPDATE {databaseOwner}{objectQualifier}Answers_Post
							SET     Score = Score + 1
							WHERE   PostId = @PostId
						END
					ELSE 
						IF @VoteTypeId = 1 
							BEGIN
								UPDATE  {databaseOwner}{objectQualifier}Answers_Post
								SET     Score = Score - 1
								WHERE   PostId = @PostId
							END
					DELETE  {databaseOwner}{objectQualifier}Answers_Vote
					WHERE   PostId = @PostId
							AND VoteTypeId = @VoteTypeId
							AND PortalId = @PortalId
							AND CreatedByUserId = @CreatedByUserId
				END
			IF @TermId > 0 
				BEGIN
					IF @VoteTypeId = -2 
						BEGIN
							UPDATE  {databaseOwner}{objectQualifier}Answers_Term_Synonym
							SET     Score = Score + 1
							WHERE   RelatedTermId = @TermId
									AND PortalId = @PortalId
						END
					ELSE 
						IF @VoteTypeId = 2 
							BEGIN
								UPDATE  {databaseOwner}{objectQualifier}Answers_Term_Synonym
								SET     Score = Score - 1
								WHERE   RelatedTermId = @TermId
										AND PortalId = @PortalId
							END
					DELETE {databaseOwner}{objectQualifier}Answers_Vote
					WHERE   TermId = @TermId
							AND VoteTypeId = @VoteTypeId
							AND PortalId = @PortalId
							AND CreatedByUserId = @CreatedByUserId
				END
		END
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_Vote_GetPost] @PostId INT
AS 
	SELECT  VoteId,
			PostId,
			TermId,
			VoteTypeId,
			PortalId ,
			CreatedByUserId,
			CreatedOnDate
	FROM    {databaseOwner}{objectQualifier}Answers_Vote
	WHERE   PostId = @PostId
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_Vote_GetTerm]
	@TermId INT ,
	@PortalId INT
AS 
	SELECT  VoteId ,
			PostId ,
			TermId ,
			VoteTypeId ,
			PortalId ,
			CreatedByUserId ,
			CreatedOnDate
	FROM    {databaseOwner}{objectQualifier}Answers_Vote
	WHERE   TermId = @TermId
			AND PortalId = @PortalId
GO

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Question_Search') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Question_Search
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_Question_Search]
	@ModuleId INT ,
	@GroupId INT ,
	@PageSize INT ,
	@PageIndex INT ,
	@Filter INT ,
	@SortColumn NVARCHAR(32) ,
	@SortAscending BIT ,
	@Keyword NVARCHAR(128) ,
	@UserId INT 
AS 
	BEGIN
		SELECT  COUNT(*) AS TotalResults
		FROM    {databaseOwner}{objectQualifier}vw_Answers_Posts AS VP
				LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems_MetaData CIMD ON CIMD.ContentItemID = VP.ContentItemID
															  AND CIMD.MetaDataID = ( SELECT
															  MetaDataID
															  FROM
															  {databaseOwner}[{objectQualifier}MetaData]
															  WHERE
															  MetaDataName = 'Title'
															  )
		WHERE   VP.ModuleId = @ModuleId
				AND ParentId = 0
				AND Deleted = 0
				AND ( @GroupId < 1
					  OR VP.GroupId = @GroupId
					)
				AND (@Filter <= 0 OR (@Filter > 0 AND {databaseOwner}{objectQualifier}Answers_IsSearchMatch(VP.ContentItemId, @GroupId,
											  VP.GroupId, @UserId,
											  VP.CreatedByUserID, @Filter,
											  @Keyword, VP.Approved,
											  VP.TotalAnswers, VP.Content) = 1));
		WITH    QuestionSet
				  AS ( SELECT   PostId ,
								ParentId ,
								PortalId ,
								ViewCount ,
								Score ,
								Approved ,
								Deleted ,
								AnswerId ,
								GroupId ,
								VP.ContentItemId ,
								CreatedUserId ,
								CreatedDate ,
								TotalAnswers ,
								Content ,
								ContentTypeId ,
								TabId ,
								ModuleId ,
								ContentKey ,
								LastModifiedByUserId ,
								LastModifiedOnDate ,
								CIMD.[MetaDataValue] AS [ContentTitle]
					   FROM     {databaseOwner}{objectQualifier}vw_Answers_Posts VP
								LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems_MetaData CIMD ON CIMD.ContentItemID = VP.[ContentItemID]
															  AND CIMD.MetaDataID = ( SELECT
															  MetaDataID
															  FROM
															  {databaseOwner}[{objectQualifier}MetaData]
															  WHERE
															  MetaDataName = 'Title'
															  )
					   WHERE    VP.ModuleId = @ModuleId
								AND ParentId = 0
								AND Deleted = 0
								AND ( @GroupId < 1
									  OR VP.GroupId = @GroupId
									)
								AND (@Filter <= 0 OR (@Filter > 0 AND {databaseOwner}{objectQualifier}Answers_IsSearchMatch(VP.ContentItemId,
															  @GroupId,
															  VP.GroupId,
															  @UserId,
															  VP.CreatedByUserID,
															  @Filter,
															  @Keyword,
															  VP.Approved,
															  VP.TotalAnswers,
															  VP.Content) = 1))
					 ),
				QuestionSort
				  AS ( SELECT   ROW_NUMBER() OVER ( ORDER BY CASE
															  WHEN @SortColumn = 'CreatedDate'
															  AND @SortAscending = 1
															  THEN Q.CreatedDate
															 END ASC, CASE
															  WHEN @SortColumn = 'CreatedDate'
															  AND @SortAscending = 0
															  THEN Q.CreatedDate
															  END DESC, CASE
															  WHEN @SortColumn = 'LastActive'
															  AND @SortAscending = 1
															  THEN Q.LastModifiedOnDate
															  END ASC, CASE
															  WHEN @SortColumn = 'LastActive'
															  AND @SortAscending = 0
															  THEN Q.LastModifiedOnDate
															  END DESC, CASE
															  WHEN @SortColumn = 'Title'
															  AND @SortAscending = 1
															  THEN Q.ContentTitle
															  END ASC, CASE
															  WHEN @SortColumn = 'Title'
															  AND @SortAscending = 0
															  THEN Q.ContentTitle
															  END DESC, CASE
															  WHEN @SortColumn = 'Views'
															  AND @SortAscending = 0
															  THEN Q.ViewCount
															  END DESC, CASE
															  WHEN @SortColumn = 'Views'
															  AND @SortAscending = 1
															  THEN Q.ViewCount
															  END ASC, Q.CreatedDate DESC ) AS RowNumber ,
								Q.*
					   FROM     QuestionSet Q
					 )
			SELECT  *
			FROM    QuestionSort
			WHERE   RowNumber BETWEEN ( @PageIndex * @PageSize + 1 )
							  AND     ( ( @PageIndex + 1 ) * @PageSize )
	END
GO

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Question_Search_ByTags') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Question_Search_ByTags
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_Question_Search_ByTags]
	@ModuleId INT ,
	@GroupId INT ,
	@PageSize INT ,
	@PageIndex INT ,
	@Filter INT ,
	@SortColumn NVARCHAR(32) ,
	@SortAscending BIT ,
	@Keyword NVARCHAR(128) ,
	@UserId INT ,
	@Tags NVARCHAR(256)
AS 
	BEGIN
		SELECT  COUNT(*) AS TotalResults
		FROM    {databaseOwner}{objectQualifier}vw_Answers_Posts AS VP
				INNER JOIN {databaseOwner}[{objectQualifier}ContentItems] CI ON CI.ContentItemID = VP.ContentItemId
				INNER JOIN {databaseOwner}[{objectQualifier}ContentItems_Tags] CIT ON ci.ContentItemID = CIT.ContentItemID 
				INNER JOIN {databaseOwner}[{objectQualifier}Taxonomy_Terms] TT ON CIT.TermID = TT.TermID
				LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems_MetaData CIMD ON CIMD.ContentItemID = VP.ContentItemID
															  AND CIMD.MetaDataID = ( SELECT
															  MetaDataID
															  FROM
															  {databaseOwner}[{objectQualifier}MetaData]
															  WHERE
															  MetaDataName = 'Title'
															  )
		WHERE   VP.ModuleId = @ModuleId
				AND ParentId = 0
				AND Deleted = 0
				AND ( @GroupId < 1
					  OR VP.GroupId = @GroupId
					)
				AND TT.Name IN (SELECT RowValue FROM {databaseOwner}[{objectQualifier}ConvertListToTable](',', @Tags))
				AND (@Filter <= 0 OR (@Filter > 0 AND {databaseOwner}{objectQualifier}Answers_IsSearchMatch(VP.ContentItemId, @GroupId,
											  VP.GroupId, @UserId,
											  VP.CreatedByUserID, @Filter,
											  @Keyword, VP.Approved,
											  VP.TotalAnswers, VP.Content) = 1));
		WITH    QuestionSet
				  AS ( SELECT   PostId ,
								ParentId ,
								PortalId ,
								ViewCount ,
								Score ,
								Approved ,
								Deleted ,
								AnswerId ,
								GroupId ,
								VP.ContentItemId ,
								CreatedUserId ,
								CreatedDate ,
								TotalAnswers ,
								VP.Content ,
								VP.ContentTypeId ,
								VP.TabId ,
								VP.ModuleId ,
								VP.ContentKey ,
								VP.LastModifiedByUserId ,
								VP.LastModifiedOnDate ,
								CIMD.[MetaDataValue] AS [ContentTitle]
					   FROM     {databaseOwner}{objectQualifier}vw_Answers_Posts VP
								INNER JOIN {databaseOwner}[{objectQualifier}ContentItems] CI ON CI.ContentItemID = VP.ContentItemId
								INNER JOIN {databaseOwner}[{objectQualifier}ContentItems_Tags] CIT ON ci.ContentItemID = CIT.ContentItemID 
								INNER JOIN {databaseOwner}[{objectQualifier}Taxonomy_Terms] TT ON CIT.TermID = TT.TermID
								LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems_MetaData CIMD ON CIMD.ContentItemID = VP.[ContentItemID]
															  AND CIMD.MetaDataID = ( SELECT
															  MetaDataID
															  FROM
															  {databaseOwner}[{objectQualifier}MetaData]
															  WHERE
															  MetaDataName = 'Title'
															  )
					   WHERE    VP.ModuleId = @ModuleId
								AND ParentId = 0
								AND Deleted = 0
								AND ( @GroupId < 1
									  OR VP.GroupId = @GroupId
									)
								AND TT.Name IN (SELECT RowValue FROM {databaseOwner}[{objectQualifier}ConvertListToTable](',', @Tags))
							    AND (@Filter <= 0 OR (@Filter > 0 AND {databaseOwner}{objectQualifier}Answers_IsSearchMatch(VP.ContentItemId,
															  @GroupId,
															  VP.GroupId,
															  @UserId,
															  VP.CreatedByUserID,
															  @Filter,
															  @Keyword,
															  VP.Approved,
															  VP.TotalAnswers,
															  VP.Content) = 1))
					 ),
				QuestionSort
				  AS ( SELECT   ROW_NUMBER() OVER ( ORDER BY CASE
															  WHEN @SortColumn = 'CreatedDate'
															  AND @SortAscending = 1
															  THEN Q.CreatedDate
															 END ASC, CASE
															  WHEN @SortColumn = 'CreatedDate'
															  AND @SortAscending = 0
															  THEN Q.CreatedDate
															  END DESC, CASE
															  WHEN @SortColumn = 'LastActive'
															  AND @SortAscending = 1
															  THEN Q.LastModifiedOnDate
															  END ASC, CASE
															  WHEN @SortColumn = 'LastActive'
															  AND @SortAscending = 0
															  THEN Q.LastModifiedOnDate
															  END DESC, CASE
															  WHEN @SortColumn = 'Title'
															  AND @SortAscending = 1
															  THEN Q.ContentTitle
															  END ASC, CASE
															  WHEN @SortColumn = 'Title'
															  AND @SortAscending = 0
															  THEN Q.ContentTitle
															  END DESC, CASE
															  WHEN @SortColumn = 'Views'
															  AND @SortAscending = 0
															  THEN Q.ViewCount
															  END DESC, CASE
															  WHEN @SortColumn = 'Views'
															  AND @SortAscending = 1
															  THEN Q.ViewCount
															  END ASC, Q.CreatedDate DESC ) AS RowNumber ,
								Q.*
					   FROM     QuestionSet Q
					 )
			SELECT  *
			FROM    QuestionSort
			WHERE   RowNumber BETWEEN ( @PageIndex * @PageSize + 1 )
							  AND     ( ( @PageIndex + 1 ) * @PageSize )
	END
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_GetPostIdFromContentItemId]
	@ContentItemId INT
AS
BEGIN
	SELECT PostId FROM {databaseOwner}{objectQualifier}Answers_Post WHERE ContentItemId = @ContentItemId
END
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_Question_GetSearchable]
	@StartDate DATETIME ,
	@ModuleID INT
AS 
	SELECT  PostId ,
			Body ,
			ParentId ,
			PortalId ,
			GroupId ,
			ViewCount ,
			Score ,
			Approved ,
			Deleted ,
			AnswerId ,
			Closed ,
			Protected ,
			CreatedUserId ,
			CreatedDate ,
			LastModifiedUserId ,
			LastModifiedDate ,
			vp.ContentItemId ,
			Content ,
			ContentTypeID ,
			TabID ,
			ModuleID ,
			ContentKey ,
			Indexed ,
			CreatedByUserId ,
			CreatedOnDate ,
			LastModifiedByUserID ,
			LastModifiedOnDate ,
			CIMD.[MetaDataValue] AS [ContentTitle] ,
			( SELECT    COUNT(PostId)
			  FROM      {databaseOwner}{objectQualifier}Answers_Post
			  WHERE     ( ParentId = vp.PostId )
						AND ( ParentId <> 0 )
						AND ( Approved = 1 )
						AND ( Deleted = 0 )
			) AS TotalAnswers ,
			( SELECT    COUNT(PostId)
			  FROM      {databaseOwner}{objectQualifier}Answers_Vote
			  WHERE     PostID = vp.PostID
						AND VoteTypeID = 1
			) AS UpVotes ,
			( SELECT    COUNT(PostId)
			  FROM      {databaseOwner}{objectQualifier}Answers_Vote
			  WHERE     PostID = vp.PostID
						AND VoteTypeID = -1
			) AS DownVotes ,
			1 AS TotalRecords
	FROM    {databaseOwner}{objectQualifier}vw_Answers_Posts vp
			LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems_MetaData CIMD ON CIMD.ContentItemID = vp.ContentItemID
															  AND CIMD.MetaDataID = ( SELECT
															  MetaDataID
															  FROM
															  {databaseOwner}[{objectQualifier}MetaData]
															  WHERE
															  MetaDataName = 'Title'
															  )
	WHERE   ParentID = 0
			AND Deleted = 0
			AND Approved = 1
			AND ModuleID = @ModuleID
			AND LastModifiedOnDate > @StartDate
GO

/* Performance indexes  */
IF NOT EXISTS (SELECT name FROM sys.indexes WHERE name = 'IX_{objectQualifier}Answers_CreatedDate')
	BEGIN
		CREATE NONCLUSTERED INDEX IX_{objectQualifier}Answers_CreatedDate ON {databaseOwner}{objectQualifier}Answers_Post
				(CreatedDate DESC)
			WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
	END
GO

IF NOT EXISTS (SELECT name FROM sys.indexes WHERE name = 'IX_{objectQualifier}Answers_LastModifiedDate')
	BEGIN
		CREATE NONCLUSTERED INDEX IX_{objectQualifier}Answers_LastModifiedDate ON {databaseOwner}{objectQualifier}Answers_Post
			(LastModifiedDate DESC)
		WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
	END
GO

IF NOT EXISTS (SELECT name FROM sys.indexes WHERE name = 'IX_{objectQualifier}Answers_ViewCount')
	BEGIN
		CREATE NONCLUSTERED INDEX IX_{objectQualifier}Answers_ViewCount ON {databaseOwner}{objectQualifier}Answers_Post
			(ViewCount DESC)
		WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
	END
GO