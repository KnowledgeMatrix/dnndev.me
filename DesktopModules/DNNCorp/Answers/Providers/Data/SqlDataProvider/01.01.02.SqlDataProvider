 
IF EXISTS (select * from {databaseOwner}sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Question_Search') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Question_Search
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_Question_Search]
	@ModuleId INT,
	@GroupId INT,
	@PageSize INT,
	@PageIndex INT,
	@Filter INT,
	@SortColumn NVARCHAR(32),
	@SortAscending BIT,
	@Keyword NVARCHAR(128),
	@UserId INT,
	@Tags NVARCHAR(256)
AS
BEGIN
	WITH    QuestionSet
				AS ( SELECT
							COUNT(*) OVER () AS TotalRecords,
							PostId ,
							ParentId ,
							PortalId ,
							ViewCount ,
							Score ,
							Approved ,
							Deleted ,
							AnswerId ,
							GroupId ,
							VP.ContentItemId ,
							CreatedUserId ,
							CreatedDate ,
							TotalAnswers ,
							Content ,
							ContentTypeId ,
							TabId ,
							ModuleId ,
							ContentKey ,
							LastModifiedByUserId ,
							LastModifiedOnDate ,
							LastModifiedDate,
							CIMD.[MetaDataValue] AS [ContentTitle]
					FROM     {databaseOwner}{objectQualifier}vw_Answers_Posts VP
							LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems_MetaData CIMD ON CIMD.ContentItemID = VP.[ContentItemID]
															AND CIMD.MetaDataID = ( SELECT
															MetaDataID
															FROM
															{databaseOwner}[{objectQualifier}MetaData]
															WHERE
															MetaDataName = 'Title'
															)
					WHERE    VP.ModuleId = @ModuleId
							AND ParentId = 0
							AND Deleted = 0
							AND ( @GroupId < 1
									OR VP.GroupId = @GroupId
								)
                            AND ( ( @Filter <= 0
                                    AND Approved = 1
                                    )
                                    OR ( @Filter = 1
                                        AND TotalAnswers > 0
                                        AND Approved = 1
                                        )
                                    OR ( @Filter = 2
                                        AND TotalAnswers < 1
                                        AND Approved = 1
                                        )
                                    OR ( @Filter = 3
                                        AND CreatedByUserID = @UserId
                                        )
                                    OR ( @Filter = 4
                                        AND EXISTS ( SELECT
                                            *
                                            FROM
                                            {databaseOwner}{objectQualifier}Answers_Post
                                            WHERE
                                            Deleted = 0
                                            AND ParentId = VP.PostId
                                            AND CreatedUserId = @UserId )
                                        )
                                )
                            AND ( @Tags IS NULL
                                    OR LEN(@Tags) = 0
                                    OR ( SELECT
                                            COUNT(*)
										FROM
										 {databaseOwner}{objectQualifier}ContentItems_Tags CIT
										 INNER JOIN	{databaseOwner}{objectQualifier}Taxonomy_Terms TT ON CIT.TermID = TT.TermID
										 INNER JOIN	{databaseOwner}[{objectQualifier}ConvertListToTable](',', @Tags) T ON TT.Name = T.RowValue
										WHERE
											CIT.ContentItemID = VP.ContentItemId
										) = ( SELECT
											LEN(@Tags)
											- LEN(REPLACE(@Tags,
											',', '')) + 1
											)
								)
					),
			QuestionSort
				AS ( SELECT   ROW_NUMBER() OVER ( ORDER BY CASE
															WHEN @SortColumn = 'CreatedDate'
															AND @SortAscending = 1
															THEN Q.CreatedDate
															END ASC, CASE
															WHEN @SortColumn = 'CreatedDate'
															AND @SortAscending = 0
															THEN Q.CreatedDate
															END DESC, CASE
															WHEN @SortColumn = 'LastActive'
															AND @SortAscending = 1
															THEN Q.LastModifiedOnDate
															END ASC, CASE
															WHEN @SortColumn = 'LastActive'
															AND @SortAscending = 0
															THEN Q.LastModifiedOnDate
															END DESC, CASE
															WHEN @SortColumn = 'Title'
															AND @SortAscending = 1
															THEN Q.ContentTitle
															END ASC, CASE
															WHEN @SortColumn = 'Title'
															AND @SortAscending = 0
															THEN Q.ContentTitle
															END DESC, CASE
															WHEN @SortColumn = 'Views'
															AND @SortAscending = 0
															THEN Q.ViewCount
															END DESC, CASE
															WHEN @SortColumn = 'Views'
															AND @SortAscending = 1
															THEN Q.ViewCount
															WHEN @SortColumn = 'Votes'
															AND @SortAscending = 0
															THEN Q.Score
															END DESC, CASE
															WHEN @SortColumn = 'Votes'
															AND @SortAscending = 1
															THEN Q.Score
															WHEN @SortColumn = 'Answers'
															AND @SortAscending = 0
															THEN Q.TotalAnswers
															END DESC, CASE
															WHEN @SortColumn = 'Answers'
															AND @SortAscending = 1
															THEN Q.TotalAnswers
															END ASC, Q.CreatedDate DESC ) AS RowNumber ,
							Q.*
					FROM     QuestionSet Q)
		SELECT  *
		FROM    QuestionSort
		WHERE   RowNumber BETWEEN (@PageIndex * @PageSize + 1) AND ((@PageIndex + 1) * @PageSize)

END
GO

IF EXISTS (select * from {databaseOwner}sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Post_Update') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Post_Update
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_Post_Update]
	@PostId INT ,
	@Body NVARCHAR(MAX) ,
	@ParentId INT ,
	@GroupId INT ,
	@ContentItemId INT ,
	@Approved BIT ,
	@Deleted BIT ,
	@Closed BIT ,
	@LastModifiedUserId INT
AS 
	DECLARE @LastActive DATETIME
	SET @LastActive = GETDATE()
	
	IF ( @ParentId > 0
		 AND @Approved = 1
	   ) 
		BEGIN			
			UPDATE  {databaseOwner}{objectQualifier}ContentItems
			SET     LastModifiedByUserID = @LastModifiedUserId ,
					LastModifiedOnDate = @LastActive
			WHERE   ContentItemID = @ContentItemId
		END
		
	UPDATE  {databaseOwner}{objectQualifier}Answers_Post
	SET     Body = @Body ,
			ParentId = @ParentId ,
			ContentItemId = @ContentItemId ,
			Approved = @Approved ,
			Deleted = @Deleted ,
			Closed = @Closed ,
			LastModifiedUserId = @LastModifiedUserId ,
			LastModifiedDate = @LastActive
	WHERE   PostId = @PostId
			AND GroupId = @GroupId
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Post_Add') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Post_Add
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_Post_Add]
	@Body NVARCHAR(MAX) ,
	@ParentId INT ,
	@PortalId INT ,
	@GroupId INT ,
	@ContentItemId INT ,
	@Approved BIT ,
	@Closed BIT ,
	@CreatedUserId INT
AS 
	DECLARE @LastActive DATETIME
	SET @LastActive = GETDATE()
	
	IF ( @ParentId > 0
		 AND @Approved = 1
	   ) 
		BEGIN			
			UPDATE  {databaseOwner}{objectQualifier}ContentItems
			SET     LastModifiedByUserID = @CreatedUserId ,
					LastModifiedOnDate = @LastActive
			WHERE   ContentItemID = @ContentItemId
		END
		
	INSERT  {databaseOwner}{objectQualifier}Answers_Post
			( Body ,
			  ParentId ,
			  PortalId ,
			  GroupId ,
			  ContentItemId ,
			  ViewCount ,
			  Score ,
			  Approved ,
			  Deleted ,
			  Closed,
			  Protected ,
			  CreatedUserId ,
			  CreatedDate ,
			  LastModifiedDate ,
			  LastModifiedUserID 
			)
	VALUES  ( @Body ,
			  @ParentId ,
			  @PortalId ,
			  @GroupId ,
			  @ContentItemId ,
			  0 ,
			  0 ,
			  @Approved ,
			  0 ,
			  @Closed ,
			  0 ,
			  @CreatedUserId ,
			  @LastActive ,
			  @LastActive ,
			  @CreatedUserId
			)
	SELECT  SCOPE_IDENTITY()
GO


IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Answers_Question_GetSearchable') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Answers_Question_GetSearchable
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Answers_Question_GetSearchable]
	@ModuleID INT,
	@StartDate DATETIME,
	@EndDate DATETIME,
	@StartDateUTC DATETIME,
	@EndDateUTC DATETIME
AS 
	SELECT  VP.PostId ,
			VP.Body ,
			VP.ParentId ,
			VP.PortalId ,
			VP.GroupId ,
			VP.ViewCount ,
			VP.Score ,
			VP.Approved ,
			VP.Deleted ,
			VP.AnswerId ,
			VP.Protected ,
			VP.CreatedUserId ,
			VP.CreatedDate ,
			VP.LastModifiedUserId ,
			VP.LastModifiedDate ,
			VP.ContentItemId ,
			VP.Content ,
			VP.ContentTypeID ,
			VP.TabID ,
			VP.ModuleID ,
			VP.ContentKey ,
			VP.Indexed ,
			VP.CreatedByUserId ,
			VP.CreatedOnDate ,
			VP.LastModifiedByUserID ,
			VP.LastModifiedOnDate ,
			CIMD.[MetaDataValue] AS [ContentTitle] ,
			( SELECT    COUNT(PostId)
			  FROM      {databaseOwner}{objectQualifier}Answers_Post
			  WHERE     ( ParentId = VP.PostId )
						AND ( ParentId <> 0 )
						AND ( Approved = 1 )
						AND ( Deleted = 0 )
			) AS TotalAnswers ,
			( SELECT    COUNT(PostId)
			  FROM      {databaseOwner}{objectQualifier}Answers_Vote
			  WHERE     PostID = VP.PostID
						AND VoteTypeID = 1
			) AS UpVotes ,
			( SELECT    COUNT(PostId)
			  FROM      {databaseOwner}{objectQualifier}Answers_Vote
			  WHERE     PostID = VP.PostID
						AND VoteTypeID = -1
			) AS DownVotes ,
			1 AS TotalRecords
	FROM    {databaseOwner}{objectQualifier}vw_Answers_Posts VP
			LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems_MetaData CIMD ON CIMD.ContentItemID = vp.ContentItemID
															  AND CIMD.MetaDataID = ( SELECT
															  MetaDataID
															  FROM
															  {databaseOwner}[{objectQualifier}MetaData]
															  WHERE
															  MetaDataName = 'Title'
															  )
	WHERE   ParentID = 0
			AND Deleted = 0
			AND Approved = 1
			AND ModuleID = @ModuleID
			AND
			-- Comments that have been added or updated within the given time frame
			(		
			  (VP.LastModifiedOnDate >= @StartDate AND VP.LastModifiedOnDate <= @EndDate)
			  OR
			  (										
			    (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Journal_Comments JC 
				 WHERE JC.[JournalId] IN (SELECT JournalId FROM {databaseOwner}{objectQualifier}Journal J WHERE J.[ContentItemId] = VP.[ContentItemId]) 
				  AND 
				  ((JC.[DateCreated] >= @StartDateUTC AND JC.[DateCreated] <= @EndDateUTC)
				    OR
				  (JC.[DateUpdated] >= @StartDateUTC AND JC.[DateUpdated] <= @EndDateUTC)
				  )
				) > 0 
			  )
			)
GO
