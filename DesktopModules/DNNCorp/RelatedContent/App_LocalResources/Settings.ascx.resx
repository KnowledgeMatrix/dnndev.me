<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Ascending.Text" xml:space="preserve">
    <value>Ascending</value>
  </data>
  <data name="Date.Text" xml:space="preserve">
    <value>Creation Date</value>
  </data>
  <data name="Descending.Text" xml:space="preserve">
    <value>Descending</value>
  </data>
  <data name="Filtering.Text" xml:space="preserve">
    <value>Filtering</value>
  </data>
  <data name="FilterOnContentType.Help" xml:space="preserve">
    <value>An optional feature to filter the Related Content items based on Content Type</value>
  </data>
  <data name="FilterOnContentType.Text" xml:space="preserve">
    <value>Filter related items on Content Type</value>
  </data>
  <data name="FilterOnTag.Help" xml:space="preserve">
    <value>An optional feature to filter the Related Content items based on a taxonomy term</value>
  </data>
  <data name="FilterOnTag.Text" xml:space="preserve">
    <value>Filter related items on Taxonomy tag</value>
  </data>
  <data name="NumberOfItems.Help" xml:space="preserve">
    <value>The number of items to display in the Related Content control</value>
  </data>
  <data name="NumberOfItems.Text" xml:space="preserve">
    <value>Items to Display</value>
  </data>
  <data name="Sorting.Text" xml:space="preserve">
    <value>Sorting</value>
  </data>
  <data name="SortMethod.Help" xml:space="preserve">
    <value>How the related items list ought to be sorted</value>
  </data>
  <data name="SortMethod.Text" xml:space="preserve">
    <value>Sorting Column</value>
  </data>
  <data name="Title.Text" xml:space="preserve">
    <value>Content Title</value>
  </data>
  <data name="TemplateFooter.Help" xml:space="preserve">
    <value>Template tokens available in the Footer are: &lt;ul&gt;&lt;li&gt;[Summary:TotalItems]&amp;mdash;the total number of related items returned by the query&lt;/li&gt;&lt;li&gt; [Summary:ContentTitle]&amp;mdash;the title of the primary Content Item we are searching for related items on&lt;/li&gt;&lt;/ul&gt;</value>
  </data>
  <data name="TemplateFooter.Text" xml:space="preserve">
    <value>Footer Template</value>
  </data>
  <data name="TemplateHeader.Help" xml:space="preserve">
    <value>Template tokens available in the Header are: &lt;ul&gt;&lt;li&gt;[Summary:TotalItems]&amp;mdash;the total number of related items returned by the query&lt;/li&gt;&lt;li&gt;[Summary:ContentTitle]&amp;mdash;the title of the primary Content Item we are searching for related items on&lt;/li&gt;&lt;/ul&gt;</value>
  </data>
  <data name="TemplateHeader.Text" xml:space="preserve">
    <value>Header Template</value>
  </data>
  <data name="TemplateHelp.Text" xml:space="preserve">
    <value>You can use these display template fields to control the output of the Related Content control.  The Header will be output first, followed by a number of Item blocks, followed by the Footer. Click on the Help button next to the labels to see which tokens are available for your template.</value>
  </data>
  <data name="TemplateItem.Help" xml:space="preserve">
    <value>Template tokens available in the Item block are: &lt;ul&gt;&lt;li&gt;[Item:Title]&amp;mdash;title of the related item&lt;/li&gt;&lt;li&gt;[Item:Link]&amp;mdash;a link to the related item&lt;/li&gt;&lt;li&gt;[Item:ContentType]&amp;mdash;the content type of the related item&lt;/li&gt;&lt;li&gt;[Item:ContentBrief]&amp;mdash;a small snippet of content from the related item&lt;/li&gt;&lt;li&gt; [Item:Page]&amp;mdash;the tab or page hosting the related item&lt;/li&gt;&lt;li&gt;[Item:Module]&amp;mdash;the module hosting the related item&lt;/li&gt;&lt;li&gt;[Item:Key]&amp;mdash;the ContentKey associated with the related item&lt;/li&gt;&lt;li&gt;[Item:CreatedBy]&amp;mdash;the user who created the related item&lt;/li&gt;&lt;li&gt;[Item:CreatedDate]&amp;mdash;the date the item was created on&lt;/li&gt;&lt;/ul&gt;</value>
  </data>
  <data name="TemplateItem.Text" xml:space="preserve">
    <value>Item Template</value>
  </data>
  <data name="Templates.Text" xml:space="preserve">
    <value>Display Templates</value>
  </data>
  <data name="NoOptions.Text" xml:space="preserve">
    <value>No relevant options are available</value>
  </data>
  <data name="NoResults.Text" xml:space="preserve">
    <value>No results matching this query</value>
  </data>
  <data name="Searching.Text" xml:space="preserve">
    <value>Searching...</value>
  </data>
  <data name="InitialView.Text" xml:space="preserve">
    <value>Initial View</value>
  </data>
  <data name="lblShowTags.Help" xml:space="preserve">
    <value>If checked, a list of the most frequently used tags on the page will be displayed.</value>
  </data>
  <data name="lblShowTags.Text" xml:space="preserve">
    <value>Show Tags</value>
  </data>
  <data name="SortOrder.Help" xml:space="preserve">
    <value>Sort related content results in ascending or descending order.</value>
  </data>
  <data name="SortOrder.Text" xml:space="preserve">
    <value>Sort Direction</value>
  </data>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>Related Content</value>
  </data>
</root>