<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>Ideas</value>
  </data>
  <data name="CustomFields.Text" xml:space="preserve">
    <value>Custom Fields</value>
  </data>
  <data name="Edit.Text" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="General.Text" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="plAllowNewIdeas.Help" xml:space="preserve">
    <value>If checked, community users will be permitted to submit ideas of their own. If administrators wish to conduct a survey for voting based on their own ideas, disabling this is recommended.</value>
  </data>
  <data name="plAllowNewIdeas.Text" xml:space="preserve">
    <value>Accept New Ideas</value>
  </data>
  <data name="plAllowVoting.Help" xml:space="preserve">
    <value>If checked, users will be permitted to vote on ideas. If administrators wish to discontinue voting (or 'end a survey'), they can uncheck this to disable voting for this module instance but still permit the results/ideas to be displayed.</value>
  </data>
  <data name="plAllowVoting.Text" xml:space="preserve">
    <value>Permit Voting</value>
  </data>
  <data name="plEmailTemplate.Help" xml:space="preserve">
    <value>This is the email sent to subsribers each time a new idea is added. This template has a few options available for token replacement.</value>
  </data>
  <data name="plEmailTemplate.Text" xml:space="preserve">
    <value>Email Template</value>
  </data>
  <data name="plMaxVotesPerItem.Help" xml:space="preserve">
    <value>The total number of votes a user is permitted to assign to any single idea.</value>
  </data>
  <data name="plMaxVotesPerItem.Text" xml:space="preserve">
    <value>Total Votes per Idea</value>
  </data>
  <data name="plMaxVotesPerUser.Help" xml:space="preserve">
    <value>The total number of votes the user is alotted for use across all idea (in this module instance) for the lifetime of this survey (keep in mind, votes can be changed at any time and and delivered ideas also go back into the user's voting pool as long as voting is enabled). If you wish to enable unlimited votes (not recommended), set this to 0.</value>
  </data>
  <data name="plMaxVotesPerUser.Text" xml:space="preserve">
    <value>Total Votes per User</value>
  </data>
  <data name="plModerateIdeas.Help" xml:space="preserve">
    <value>If checked, all new ideas must be moderated before being displayed to the public. </value>
  </data>
  <data name="plModerateIdeas.Text" xml:space="preserve">
    <value>Moderate Ideas</value>
  </data>
  <data name="plResponseTemplate.Help" xml:space="preserve">
    <value>This template will be used to control the display of the response to a idea.</value>
  </data>
  <data name="plResponseTemplate.Text" xml:space="preserve">
    <value>Response Template</value>
  </data>
  <data name="plRootCategory.Help" xml:space="preserve">
    <value>The root vocabulary should be set to a vocabulary that support hierarchy and all top level categories of this vocabulary will be the basis for the parent category selection when adding an idea (in turn, all the children of those parent categories are also required for creation of a new idea).</value>
  </data>
  <data name="plRootCategory.Text" xml:space="preserve">
    <value>Root Vocabulary</value>
  </data>
  <data name="plPageSize.Help" xml:space="preserve">
    <value>The total number of ideas to display in multiple listing views.</value>
  </data>
  <data name="plPageSize.Text" xml:space="preserve">
    <value>Page Size</value>
  </data>
  <data name="plShowCategories.Help" xml:space="preserve">
    <value>If checked, categories will be displayed (and required) when adding a new suggestion. Please note you must also set a root vocabulary for this to work properly. </value>
  </data>
  <data name="plShowCategories.Text" xml:space="preserve">
    <value>Show Categories</value>
  </data>
  <data name="plShowSummary.Help" xml:space="preserve">
    <value>If checked, users will be permitted to enter a summary in addition to a description when submitting a new idea.</value>
  </data>
  <data name="plShowSummary.Text" xml:space="preserve">
    <value>Show Summary</value>
  </data>
  <data name="Selectlist.Text" xml:space="preserve">
    <value>Select List</value>
  </data>
  <data name="Templates.Text" xml:space="preserve">
    <value>Templates</value>
  </data>
  <data name="Textbox.Text" xml:space="preserve">
    <value>Text Box</value>
  </data>
  <data name="Type.Text" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="View.Text" xml:space="preserve">
    <value>View</value>
  </data>
  <data name="AddVocabularyLink.Text" xml:space="preserve">
    <value>Manage Vocabularies</value>
  </data>
  <data name="RefreshVocabularyList.Text" xml:space="preserve">
    <value>Refresh</value>
  </data>
  <data name="NoVocabularies.Text" xml:space="preserve">
    <value>If you choose to show categories you must have at least one root vocabulary. </value>
  </data>
  <data name="lblEditHeader.Help" xml:space="preserve">
    <value>Choose the role that can edit this field value.</value>
  </data>
  <data name="lblEditHeader.Text" xml:space="preserve">
    <value>Edit Permissions</value>
  </data>
  <data name="lblEnabledHeader.Help" xml:space="preserve">
    <value>Choose whether you want to display this field in the create/edit screen</value>
  </data>
  <data name="lblEnabledHeader.Text" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="lblLabelHeader.Help" xml:space="preserve">
    <value>Enter the label to be displayed in the create/edit screen</value>
  </data>
  <data name="lblLabelHeader.Text" xml:space="preserve">
    <value>Field Label</value>
  </data>
  <data name="lblPersistHeader.Help" xml:space="preserve">
    <value>Choose whether or not you want to persist this field for the currently logged in user.</value>
  </data>
  <data name="lblPersistHeader.Text" xml:space="preserve">
    <value>Persist</value>
  </data>
  <data name="lblTypeHeader.Help" xml:space="preserve">
    <value>Enter the type of field. When choosing 'Select List' enter a comma-separated list of values in the textbox presented.</value>
  </data>
  <data name="lblTypeHeader.Text" xml:space="preserve">
    <value>Field Type</value>
  </data>
  <data name="lblViewHeader.Help" xml:space="preserve">
    <value>Choose the role that can view this field.</value>
  </data>
  <data name="lblViewHeader.Text" xml:space="preserve">
    <value>View Permissions</value>
  </data>
  <data name="plDescriptionTemplate.Help" xml:space="preserve">
    <value>Optionally enter a template for the description of an idea</value>
  </data>
  <data name="plDescriptionTemplate.Text" xml:space="preserve">
    <value>Idea Description Template</value>
  </data>
  <data name="MaxVotesPerUser.ErrorMessage" xml:space="preserve">
    <value>Cannot have more votes per idea than max votes per user.</value>
  </data>
  <data name="lblMode.Help" xml:space="preserve">
    <value>The mode the module should operate in. </value>
  </data>
  <data name="lblMode.Text" xml:space="preserve">
    <value>Mode</value>
  </data>
  <data name="liGroup.Text" xml:space="preserve">
    <value>Group</value>
  </data>
  <data name="liNormal.Text" xml:space="preserve">
    <value>Normal</value>
  </data>
  <data name="plSearchResults.Help" xml:space="preserve">
    <value>The number of search results to show in the primary Search panel</value>
  </data>
  <data name="plSearchResults.Text" xml:space="preserve">
    <value>Search Results</value>
  </data>
  <data name="lblEditor.Help" xml:space="preserve">
    <value>Select editor mode - textarea or richeditor</value>
  </data>
  <data name="lblEditor.Text" xml:space="preserve">
    <value>Editor Mode</value>
  </data>
  <data name="liEditorRich.Text" xml:space="preserve">
    <value>Social Editor</value>
  </data>
  <data name="liEditorText.Text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="plModerateComments.Help" xml:space="preserve">
    <value>If checked each new comment will need to be approved before users, other than moderators, can see the comment. If not checked, all new comments will be immediately approved and available for viewing by users. If this setting is toggled from on to off, all previously unapproved comments will still need to be manually approved prior to public display.</value>
  </data>
  <data name="plModerateComments.Text" xml:space="preserve">
    <value>Moderate Comments</value>
  </data>
</root>