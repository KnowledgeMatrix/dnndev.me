<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>Wiki</value>
  </data>
  <data name="EditEvent_Details.Text" xml:space="preserve">
    <value>Navigate to article</value>
  </data>
  <data name="EditEvent_Revisions.Text" xml:space="preserve">
    <value>Flip to Revisions tab</value>
  </data>
  <data name="ListView.Text" xml:space="preserve">
    <value>Article List</value>
  </data>
  <data name="plEditEvent.Help" xml:space="preserve">
    <value>What should happen after someone publishes a change or saves a draft?</value>
  </data>
  <data name="plEditEvent.Text" xml:space="preserve">
    <value>Post-Edit Navigation</value>
  </data>
  <data name="plLayout.Help" xml:space="preserve">
    <value>Select the appropriate layout for this list by moving your mouse over the control</value>
  </data>
  <data name="plLayout.Text" xml:space="preserve">
    <value>Layout</value>
  </data>
  <data name="plModal.Help" xml:space="preserve">
    <value>Use a modal dialog to create and edit articles</value>
  </data>
  <data name="plModal.Text" xml:space="preserve">
    <value>Use pop-up dialogs</value>
  </data>
  <data name="plPageSize.Help" xml:space="preserve">
    <value>The number of articles to appear on the pagee</value>
  </data>
  <data name="plPageSize.Text" xml:space="preserve">
    <value>Page Size</value>
  </data>
  <data name="plPostType.Help" xml:space="preserve">
    <value>Select the article type that you would like to modify the metadata list for</value>
  </data>
  <data name="plPostType.Text" xml:space="preserve">
    <value>Wiki Article Type</value>
  </data>
  <data name="PostTypes.Text" xml:space="preserve">
    <value>Article Taxonomy</value>
  </data>
  <data name="ColumnTableHint.Text" xml:space="preserve">
    <value>Drag the box from the right, bottom, or bottom-right to expand or contract</value>
  </data>
  <data name="lblMode.Help" xml:space="preserve">
    <value>The mode the module should operate in. </value>
  </data>
  <data name="lblMode.Text" xml:space="preserve">
    <value>Mode</value>
  </data>
  <data name="secMisc.Text" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="liGroup.Text" xml:space="preserve">
    <value>Group</value>
  </data>
  <data name="liNormal.Text" xml:space="preserve">
    <value>Normal</value>
  </data>
  <data name="NOTIFY_NewArticleTitle.Text" xml:space="preserve">
    <value>Article: [TITLE]</value>
  </data>
  <data name="plProfanity.Help" xml:space="preserve">
    <value>Prohibit users from creating posts containing profanity</value>
  </data>
  <data name="plProfanity.Text" xml:space="preserve">
    <value>Profanity filter</value>
  </data>
  <data name="plRootCategory.Help" xml:space="preserve">
    <value>The root vocabulary should be set to a vocabulary that support hierarchy and all top level categories of this vocabulary will be the basis for the parent category selection when adding an idea (in turn, all the children of those parent categories are also required for creation of a new idea).</value>
  </data>
  <data name="plRootCategory.Text" xml:space="preserve">
    <value>Root Vocabulary</value>
  </data>
  <data name="liFilterContent.Text" xml:space="preserve">
    <value>Filter Content</value>
  </data>
  <data name="liNoFiltering.Text" xml:space="preserve">
    <value>No Filtering</value>
  </data>
  <data name="liProhibitContent.Text" xml:space="preserve">
    <value>Prohibit Content</value>
  </data>
  <data name="chkEnableComments.Help" xml:space="preserve">
    <value>Use this option to enable or disable comments on wiki articles.</value>
  </data>
  <data name="chkEnableComments.Text" xml:space="preserve">
    <value>Enable Comments on Articles</value>
  </data>
</root>