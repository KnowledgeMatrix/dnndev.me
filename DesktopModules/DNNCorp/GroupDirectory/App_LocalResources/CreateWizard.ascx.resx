<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Accessibility.Text" xml:space="preserve">
    <value>Group Accessibility</value>
  </data>
  <data name="AddTag.Text" xml:space="preserve">
    <value>Enter tags separated by a comma</value>
  </data>
  <data name="Cancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Close.Text" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="CreateAGroup.Text" xml:space="preserve">
    <value>Create a Group</value>
  </data>
  <data name="CreateGroup.Text" xml:space="preserve">
    <value>Create Group</value>
  </data>
  <data name="CreateGroupButton.Text" xml:space="preserve">
    <value>Create Group</value>
  </data>
  <data name="Description.Text" xml:space="preserve">
    <value>Group Details</value>
  </data>
  <data name="Finish.Text" xml:space="preserve">
    <value>Finish</value>
  </data>
  <data name="GroupFeatures.Text" xml:space="preserve">
    <value>Group Features</value>
  </data>
  <data name="GroupHomePage.Text" xml:space="preserve">
    <value>Group Home Page</value>
  </data>
  <data name="GroupName.Text" xml:space="preserve">
    <value>Group Name</value>
  </data>
  <data name="GroupNameAlreadyExists.Text" xml:space="preserve">
    <value>This group name already exists. Please choose a different name and try again.</value>
  </data>
  <data name="GroupNameInvalid.Text" xml:space="preserve">
    <value>The Name is invalid - group names can only contain the following characters A-Za-z0-9_- and spaces.</value>
  </data>
  <data name="GroupPicture.Text" xml:space="preserve">
    <value>Group Image</value>
  </data>
  <data name="GroupThumbnail.Text" xml:space="preserve">
    <value>Group Thumbnail</value>
  </data>
  <data name="Invite.Text" xml:space="preserve">
    <value>Invite</value>
  </data>
  <data name="InviteByEmail.Text" xml:space="preserve">
    <value>Invite friends by Email Address</value>
  </data>
  <data name="InviteByEmailHelp.Text" xml:space="preserve">
    <value>Enter one or more email addresses, seperated by commas.&lt;br/&gt;&lt;i&gt;(Ex: chelsea@someemail.com, brian@someemail.com)&lt;/i&gt;</value>
  </data>
  <data name="Invited.Text" xml:space="preserve">
    <value>Invited</value>
  </data>
  <data name="MembersMustBeApproved.Text" xml:space="preserve">
    <value>Users must request to join this group and be approved by a group manager.</value>
  </data>
  <data name="MustSelectOneGroupFeature.Text" xml:space="preserve">
    <value>Please select at least one group feature.</value>
  </data>
  <data name="MustUploadGroupImage.Text" xml:space="preserve">
    <value>No group image has been chosen. Please choose or upload a group image.</value>
  </data>
  <data name="Next.Text" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="NoConnectionsFound.Text" xml:space="preserve">
    <value>No users were found in your friends list.</value>
  </data>
  <data name="NoInvitesSentPendingGroup.Text" xml:space="preserve">
    <value>A group must be approved before invitations can be sent. Please try again after the group has been approved.</value>
  </data>
  <data name="NoInvitesSentPendingGroupTitle.Text" xml:space="preserve">
    <value>Pending Group Invitations</value>
  </data>
  <data name="Previous.Text" xml:space="preserve">
    <value>Previous</value>
  </data>
  <data name="Private.Help" xml:space="preserve">
    <value>Only group members and those who have been invited will be able to view the group page.</value>
  </data>
  <data name="Private.Text" xml:space="preserve">
    <value>Private</value>
  </data>
  <data name="Public.Help" xml:space="preserve">
    <value>The group page is public and anyone who wants to can join instantly.</value>
  </data>
  <data name="Public.Text" xml:space="preserve">
    <value>Public</value>
  </data>
  <data name="ReviewNewMembers.Text" xml:space="preserve">
    <value>&lt;b&gt;Review New Members&lt;/b&gt;</value>
  </data>
  <data name="Tags.Text" xml:space="preserve">
    <value>Tags</value>
  </data>
  <data name="WaitForModeration.Text" xml:space="preserve">
    <value>Your group has been submitted and is awaiting moderation.</value>
  </data>
  <data name="WizardDetailsStepDescription.Text" xml:space="preserve">
    <value>Enter group name and description</value>
  </data>
  <data name="WizardDetailsStepTitle.Text" xml:space="preserve">
    <value>Enter Group Details</value>
  </data>
  <data name="WizardFeaturesStepDescription.Text" xml:space="preserve">
    <value>Include Discussions, Ideas, etc.</value>
  </data>
  <data name="WizardFeaturesStepTitle.Text" xml:space="preserve">
    <value>Add Group Features</value>
  </data>
  <data name="WizardInviteStepDescription.Text" xml:space="preserve">
    <value>Invite people to participate</value>
  </data>
  <data name="WizardInviteStepTitle.Text" xml:space="preserve">
    <value>Invite Members</value>
  </data>
</root>