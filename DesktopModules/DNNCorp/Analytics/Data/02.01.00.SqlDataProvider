

/********************************************************
 * COMMUNITY HEALTH - PROBLEM AREA (Challenges)
 ********************************************************/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Fact_Challenges') and OBJECTPROPERTY(id, N'IsTable') = 1)
	DROP TABLE {databaseOwner}{objectQualifier}Analytics_Fact_Challenges
GO  

CREATE TABLE {databaseOwner}{objectQualifier}Analytics_Fact_Challenges (
	ContentId INT NOT NULL,	
	CreateDate SMALLDATETIME NOT NULL,
	UserId INT NOT NULL,
	PortalId INT NOT NULL,
	FirstCompletedDate SMALLDATETIME NULL,
	FirstViewDate SMALLDATETIME NULL,
	FirstInteractionAfterViewDate SMALLDATETIME NULL,
	FirstConfirmedCompletedDate SMALLDATETIME NULL,
	DeleteDate SMALLDATETIME NULL,
	CONSTRAINT PK_{objectQualifier}Analytics_Fact_Challenges PRIMARY KEY NONCLUSTERED (ContentId)
)
GO

CREATE CLUSTERED INDEX IX_{objectQualifier}Analytics_Fact_Challenges ON {databaseOwner}{objectQualifier}Analytics_Fact_Challenges (PortalId, CreateDate)
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_Fact_AddChallenge') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Fact_AddChallenge
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Fact_AddChallenge (
	@ContentId INT,
	@CreateDate SMALLDATETIME,
	@UserId INT,
	@PortalId INT
)
AS
BEGIN
	IF EXISTS(SELECT ContentId 
			  FROM {databaseOwner}{objectQualifier}Analytics_Fact_Challenges 
			  WHERE ContentId = @ContentId)
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}Analytics_Fact_Challenges
		SET CreateDate = @CreateDate, 
			UserId = @UserId, 
			PortalId = @PortalId
		WHERE ContentId = @ContentId 
		  AND CreateDate > @CreateDate
	END
	ELSE
	BEGIN
		INSERT {databaseOwner}{objectQualifier}Analytics_Fact_Challenges (ContentId, CreateDate, UserId, PortalId)
		VALUES (@ContentId, @CreateDate, @UserId, @PortalId)
	END
END
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_Fact_UpdateChallenge') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Fact_UpdateChallenge
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Fact_UpdateChallenge (
	@ContentId INT,
	@ActionName VARCHAR(MAX),
	@ActionDate SMALLDATETIME,
	@UserId INT,
	@PortalId INT
)
AS
BEGIN            
	IF @ActionName = 'AcceptedChallenge'
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}Analytics_Fact_Challenges
		SET FirstViewDate = @ActionDate
		WHERE ContentId = @ContentId
			AND FirstViewDate IS NULL
			AND UserId <> @UserId

		RETURN
	END	            

	IF @ActionName = 'DeletedChallenge'
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}Analytics_Fact_Challenges
		SET DeleteDate = @ActionDate
		WHERE ContentId = @ContentId
			AND DeleteDate IS NULL

		RETURN
	END	  

	IF @ActionName = 'CompletedChallenge'
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}Analytics_Fact_Challenges
		SET FirstCompletedDate = @ActionDate
		WHERE ContentId = @ContentId
			AND FirstViewDate IS NULL
			AND UserId <> @UserId

		RETURN
	END	    

	IF @ActionName IN (SELECT ActionName
						FROM {databaseOwner}{objectQualifier}Mechanics_ScoringActionDefinition sad
							JOIN {databaseOwner}{objectQualifier}DesktopModules dm ON sad.DesktopModuleId = dm.DesktopModuleID
							JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON sad.ActionType = at.ActionTypeId
						WHERE dm.FriendlyName = 'Challenges'
							AND at.ActionType IN ('Interacted', 'Created', 'FormedRelationship', 'Shared'))
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}Analytics_Fact_Challenges
		SET FirstInteractionAfterViewDate = @ActionDate
		WHERE ContentId = @ContentId
			AND FirstInteractionAfterViewDate IS NULL	
			AND FirstViewDate IS NOT NULL 
	END
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_ProblemArea_Challenges_ChallengesWithoutViews') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_ProblemArea_Challenges_ChallengesWithoutViews
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_ProblemArea_Challenges_ChallengesWithoutViews] (
	@PortalId INT,
	@StartDate DATETIME,
	@EndDate DATETIME
)
AS
BEGIN
	DECLARE @ProblemOffSetInHours INT = -6

	SELECT 	
		COUNT(*) TotalItems,
		COALESCE(SUM(CASE WHEN (FirstViewDate IS NULL OR FirstViewDate > @EndDate) THEN 1 ELSE 0 END), 0) TotalProblematicItems    
	FROM {databaseOwner}{objectQualifier}Analytics_Fact_Challenges WITH (NOLOCK)
	WHERE PortalId = @PortalId 
		AND CreateDate BETWEEN DATEADD(hour, @ProblemOffSetInHours, @StartDate) AND DATEADD(hour, @ProblemOffSetInHours, @EndDate)
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_ProblemArea_Challenges_ChallengesWithViewsButNoInteraction') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_ProblemArea_Challenges_ChallengesWithViewsButNoInteraction
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_ProblemArea_Challenges_ChallengesWithViewsButNoInteraction] (
	@PortalId INT,
	@StartDate DATETIME,
	@EndDate DATETIME
)
AS
BEGIN
	DECLARE @ProblemOffSetInHours INT = -12

	SELECT 	
		COUNT(*) TotalItems,
		COALESCE(SUM(CASE WHEN (FirstViewDate IS NOT NULL
			 AND (FirstInteractionAfterViewDate IS NULL OR FirstInteractionAfterViewDate > @EndDate)) 
				THEN 1 ELSE 0 END), 0) TotalProblematicItems    
	FROM {databaseOwner}{objectQualifier}Analytics_Fact_Challenges WITH (NOLOCK)
	WHERE PortalId = @PortalId 
		AND CreateDate BETWEEN DATEADD(hour, @ProblemOffSetInHours, @StartDate) AND DATEADD(hour, @ProblemOffSetInHours, @EndDate)
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_ProblemArea_Challenges_ChallengesWithNoCompletions') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_ProblemArea_Challenges_ChallengesWithNoCompletions
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_ProblemArea_Challenges_ChallengesWithNoCompletions]
	@PortalId INT,
	@Start DATETIME,
	@End DATETIME
AS
BEGIN			
	DECLARE @TotalItems INT
	DECLARE @TotalProblematicItems INT
	DECLARE @ProblemOffSetInHours INT = -24
			
	-- GET TOTAL CHALLENGES CREATED ON THE SELECTED PERIOD WITH 0 COMPLETIONS
	;WITH CTE AS(
		SELECT f.ContentId, f.UserId, ad.ActionName, ROW_NUMBER() OVER(PARTITION BY f.ContentId, f.UserId ORDER BY [TimeStamp] DESC) as RowId
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f WITH (NOLOCK)
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Fact_Challenges e WITH (NOLOCK) ON e.ContentId = f.ContentId
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad WITH (NOLOCK) ON f.ActionDefinitionId = ad.ActionDefinitionId 
		WHERE e.UserId != f.UserId AND e.PortalId = @PortalId 
		AND e.CreateDate BETWEEN DATEADD(hour, @ProblemOffSetInHours, @Start) AND DATEADD(hour, @ProblemOffSetInHours, @End) AND
		f.PortalId = @PortalId AND ad.ActionName IN ('CompletedChallenge')
		AND (f.[TimeStamp] BETWEEN @Start AND @End) 
	)

	SELECT @TotalProblematicItems = COUNT(*) FROM
	(SELECT ContentId, UserId, ActionName
	FROM CTE WHERE RowId = 1) as a
	PIVOT
	(
		COUNT(UserId)
		FOR ActionName IN (CompletedChallenge)
	)AS p
	WHERE CompletedChallenge = 0 
		
	-- GET TOTAL CHALLENGES CREATED ON THE SELECTED PERIOD - OFFSET
	SELECT @TotalItems = COUNT(*)
	FROM {databaseOwner}{objectQualifier}Analytics_Fact_Challenges WITH (NOLOCK)
	WHERE PortalId = @PortalId 
		AND CreateDate BETWEEN DATEADD(hour, @ProblemOffSetInHours, @Start) AND DATEADD(hour, @ProblemOffSetInHours, @End)
		
	SELECT @TotalItems TotalItems, @TotalProblematicItems TotalProblematicItems
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_RollUp') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_RollUp
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_RollUp (
	@StartingLogId INT,
	@EndLogId INT,    
	@MaxLogs INT	
)
AS
BEGIN
	DECLARE @ROWCOUNT INT
	DECLARE @CurrentScoringActionLogId INT
  
	DECLARE @UserId INT
	DECLARE @PortalId INT
	DECLARE @ContentItemId INT
	DECLARE @CreatedOnDate DATETIME
	DECLARE @ActionName NVARCHAR(100)
	DECLARE @FriendlyName NVARCHAR(100)  
		
	SELECT @EndLogId = CASE 
				WHEN @EndLogId < @StartingLogId + @MaxLogs 
				THEN @EndLogId 
				ELSE @StartingLogId + @MaxLogs END
	
	SELECT
		@CurrentScoringActionLogId = UserScoringLogId, 
		@UserId = [UserId],
		@PortalId = [PortalId],
		@ContentItemId = u.[ContentItemId],
		@CreatedOnDate = u.[CreatedOnDate],
		@ActionName = ActionName,
		@FriendlyName = FriendlyName
	FROM {databaseOwner}{objectQualifier}Mechanics_UserScoringLog u
		INNER JOIN {databaseOwner}{objectQualifier}Mechanics_ScoringActionDefinition s ON u.ScoringActionDefId = s.ScoringActionDefId
		INNER JOIN {databaseOwner}{objectQualifier}DesktopModules dm ON s.DesktopModuleId = dm.DesktopModuleId
	WHERE UserScoringLogId = (SELECT MIN(u2.UserScoringLogId) FROM {databaseOwner}{objectQualifier}Mechanics_UserScoringLog u2 
							  WHERE u2.UserScoringLogId >= @StartingLogId AND u2.UserScoringLogId <= @EndLogId AND u2.ContentItemId > 0)

    SET @ROWCOUNT = @@ROWCOUNT
	WHILE @ROWCOUNT > 0
	BEGIN
		 IF @FriendlyName = 'Answers'
			 BEGIN
				IF @ActionName = 'AskedQuestion'
					EXEC {databaseOwner}{objectQualifier}Analytics_Warehouse_Fact_AddAnswersEntry @ContentItemId, @CreatedOnDate, @UserId, @PortalId
				ELSE 
					EXEC {databaseOwner}{objectQualifier}Analytics_Warehouse_Fact_UpdateAnswersEntry @ContentItemId, @ActionName, @CreatedOnDate, @UserId, @PortalId
			 END	
		 ELSE IF @FriendlyName = 'Social Events'
			BEGIN
				IF @ActionName = 'CreatedEvent'
					EXEC {databaseOwner}{objectQualifier}Analytics_Warehouse_Fact_AddEventsEntry @ContentItemId, @CreatedOnDate, @UserId, @PortalId
				ELSE 
					EXEC {databaseOwner}{objectQualifier}Analytics_Warehouse_Fact_UpdateEventsEntry @ContentItemId, @ActionName, @CreatedOnDate, @UserId, @PortalId
			END		
		 ELSE IF @FriendlyName = 'Wiki'
			BEGIN
				IF @ActionName = 'CreatedArticle'
					EXEC {databaseOwner}{objectQualifier}Analytics_Warehouse_Fact_AddWikiEntry @ContentItemId, @CreatedOnDate, @UserId, @PortalId
				ELSE 					
					EXEC {databaseOwner}{objectQualifier}Analytics_Warehouse_Fact_UpdateWikiEntry @ContentItemId, @ActionName, @CreatedOnDate, @UserId, @PortalId
			END
		ELSE IF @FriendlyName = 'Blogs'
			BEGIN
				IF @ActionName = 'AuthoredBlogEntry'
					EXEC {databaseOwner}{objectQualifier}Analytics_Warehouse_Fact_AddBlogsEntry @ContentItemId, @CreatedOnDate, @UserId, @PortalId
				ELSE 				
					EXEC {databaseOwner}{objectQualifier}Analytics_Warehouse_Fact_UpdateBlogsEntry @ContentItemId, @ActionName, @CreatedOnDate, @UserId, @PortalId
			END		
		ELSE IF @FriendlyName = 'Discussions'
			BEGIN
				IF @ActionName = 'StartedTopic'
					EXEC {databaseOwner}{objectQualifier}Analytics_Warehouse_Fact_AddDiscussionsEntry @ContentItemId, @CreatedOnDate, @UserId, @PortalId
				ELSE
					EXEC {databaseOwner}{objectQualifier}Analytics_Warehouse_Fact_UpdateDiscussionsEntry @ContentItemId, @ActionName, @CreatedOnDate, @UserId, @PortalId
			END	
		ELSE IF @FriendlyName = 'Ideas'
			BEGIN
				IF @ActionName = 'ProvidedIdea'
					EXEC {databaseOwner}{objectQualifier}Analytics_Warehouse_Fact_AddIdeasEntry @ContentItemId, @CreatedOnDate, @UserId, @PortalId
				ELSE 				
					EXEC {databaseOwner}{objectQualifier}Analytics_Warehouse_Fact_UpdateIdeasEntry @ContentItemId, @ActionName, @CreatedOnDate, @UserId, @PortalId
			END
		ELSE IF @FriendlyName = 'Challenges'
			BEGIN
				IF @ActionName = 'CreatedChallenge'
					EXEC {databaseOwner}{objectQualifier}Analytics_Warehouse_Fact_AddChallenge @ContentItemId, @CreatedOnDate, @UserId, @PortalId
				ELSE 				
					EXEC {databaseOwner}{objectQualifier}Analytics_Warehouse_Fact_UpdateChallenge @ContentItemId, @ActionName, @CreatedOnDate, @UserId, @PortalId
			END
				 
		 SELECT
				@CurrentScoringActionLogId = UserScoringLogId, 
				@UserId = [UserId],
				@PortalId = [PortalId],
				@ContentItemId = u.[ContentItemId],
				@CreatedOnDate = u.[CreatedOnDate],
				@ActionName = ActionName,
				@FriendlyName = FriendlyName
		  FROM {databaseOwner}{objectQualifier}Mechanics_UserScoringLog u
			INNER JOIN {databaseOwner}{objectQualifier}Mechanics_ScoringActionDefinition s ON u.ScoringActionDefId = s.ScoringActionDefId
			INNER JOIN {databaseOwner}{objectQualifier}DesktopModules dm ON s.DesktopModuleId = dm.DesktopModuleId
		  WHERE UserScoringLogId = (SELECT MIN(u2.UserScoringLogId) FROM {databaseOwner}{objectQualifier}Mechanics_UserScoringLog u2 
									WHERE u2.UserScoringLogId > @CurrentScoringActionLogId AND u2.UserScoringLogId <= @EndLogId AND u2.ContentItemId > 0)
		  
		  SET @ROWCOUNT = @@ROWCOUNT
	END
	
	IF @CurrentScoringActionLogId IS NULL
		SELECT @EndLogId
	ELSE	
		SELECT @CurrentScoringActionLogId		
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Create_DefaultScoringGoals') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Create_DefaultScoringGoals
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Create_DefaultScoringGoals (
	@PortalID INT
)
AS
BEGIN
	DECLARE @CreatedByUserId INT
	DECLARE @CreatedOnDate DATETIME

	SELECT @CreatedByUserId = -1
	SELECT @CreatedOnDate = getutcdate()

	INSERT INTO {databaseOwner}{objectQualifier}Analytics_ScoringGoals
					([PortalId], [GoalList], [GoalType], [Weight], [Value], [CreatedByUserId], [CreatedOnDate])
				SELECT @PortalID, 'Influence', 'FriendCount', 1.0, 500, @CreatedByUserId, @CreatedOnDate
	UNION ALL SELECT @PortalID, 'Influence', 'Popularity', 2.0, 3, @CreatedByUserId, @CreatedOnDate
	UNION ALL SELECT @PortalID, 'Influence', 'Posts', 1.0, 50, @CreatedByUserId, @CreatedOnDate
	UNION ALL SELECT @PortalID, 'Influence', 'Likes', 1.0, 100, @CreatedByUserId, @CreatedOnDate
	UNION ALL SELECT @PortalID, 'Influence', 'LikesPerPost', 2.0, 3, @CreatedByUserId, @CreatedOnDate
	UNION ALL SELECT @PortalID, 'Influence', 'Views', 1.0, 999, @CreatedByUserId, @CreatedOnDate
	UNION ALL SELECT @PortalID, 'Influence', 'ViewsPerPost', 2.0, 100, @CreatedByUserId, @CreatedOnDate
	UNION ALL SELECT @PortalID, 'Influence', 'Responses', 1.0, 5, @CreatedByUserId, @CreatedOnDate
	UNION ALL SELECT @PortalID, 'Influence', 'ResponsesPerPost', 4.0, 2, @CreatedByUserId, @CreatedOnDate
	UNION ALL SELECT @PortalID, 'Influence', 'AcceptedAnswers', 10.0, 10, @CreatedByUserId, @CreatedOnDate
	UNION ALL SELECT @PortalID, 'Influence', 'DeliveredIdeas', 10.0, 1, @CreatedByUserId, @CreatedOnDate
	UNION ALL SELECT @PortalID, 'Influence', 'ActiveEvents', 20.0, 1, @CreatedByUserId, @CreatedOnDate
	UNION ALL SELECT @PortalID, 'Influence', 'FlaggedContent', 30.0, 1, @CreatedByUserId, @CreatedOnDate

	INSERT INTO {databaseOwner}{objectQualifier}Analytics_ScoringGoals
					([PortalId], [GoalList], [GoalType], [Weight], [Value], [CreatedByUserId], [CreatedOnDate],
					[MinValue], [MaxValue])
				SELECT @PortalID, 'Engagement', 'AvgTime', 1.0, 30, @CreatedByUserId, @CreatedOnDate, 0, 1000
	UNION ALL SELECT @PortalID, 'Engagement', 'SiteTime', 1.0, 3600, @CreatedByUserId, @CreatedOnDate, 0, 3600
	UNION ALL SELECT @PortalID, 'Engagement', 'Likes', 5.0, 750, @CreatedByUserId, @CreatedOnDate, 0, 1000
	UNION ALL SELECT @PortalID, 'Engagement', 'Posts', 10.0, 200, @CreatedByUserId, @CreatedOnDate, 0, 1000
	UNION ALL SELECT @PortalID, 'Engagement', 'Responses', 5.0, 400, @CreatedByUserId, @CreatedOnDate, 0, 1000
	UNION ALL SELECT @PortalID, 'Engagement', 'Logins', 2.0, 30, @CreatedByUserId, @CreatedOnDate, 0, 1000
	UNION ALL SELECT @PortalID, 'Engagement', 'Votes', 3.0, 30, @CreatedByUserId, @CreatedOnDate, 0, 1000
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_QueryAdoption') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryAdoption
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_IncludedActionNameTimeSeries') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_IncludedActionNameTimeSeries
GO  

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_IncludedActionTypeTimeSeries') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_IncludedActionTypeTimeSeries
GO  

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Warehouse_IncludedActionTypeUniquesGroupedMonthlySummedDailyTimeSeries]', N'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_IncludedActionTypeUniquesGroupedMonthlySummedDailyTimeSeries]
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_ParticipationTimeSeries') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_ParticipationTimeSeries
GO  

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Analytics_Warehouse_QueryParticipation]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryParticipation
GO  

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Warehouse_QueryTrendingTags]', N'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_QueryTrendingTags]
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_DecrementDate]') IS NOT NULL
	DROP FUNCTION {databaseOwner}{objectQualifier}Analytics_DecrementDate
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}Analytics_DecrementDate]
(
	@Date DATETIME,
	@MinDate DATETIME,
	@Count INT,
	@Grouping CHAR(1)
)
RETURNS DATETIME
AS
BEGIN	
	DECLARE @Return DATETIME = CASE @Grouping
		WHEN 'h' THEN DATEADD(HOUR, -@Count, @Date)
		WHEN 'd' THEN DATEADD(DAY, -@Count, @Date)
		WHEN 'm' THEN DATEADD(MONTH, -@Count, @Date)
		ELSE NULL
	END

	IF @Return < @MinDate RETURN @MinDate
	RETURN @Return
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetAdoptions') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_GetAdoptions]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_GetAdoptions]
	@PortalId INT,
	@DesktopModuleId INT,
	@StartDate DATETIME,
	@EndDate DATETIME,	
	@Grouping CHAR(1)
AS
BEGIN		
	DECLARE @ResultsTable TABLE
	(
		StartDate DATETIME,
		EndDate DATETIME,
		MetricCount int
	)

	DECLARE @Count INT = 1
	DECLARE @MaxDate DATETIME = @EndDate	
	DECLARE @MinDate DATETIME = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDate, @StartDate, @Count, @Grouping)

	WHILE @StartDate < @MaxDate
	BEGIN
		INSERT INTO @ResultsTable (StartDate, EndDate, MetricCount) 
		VALUES (@MinDate, @MaxDate,
			(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad ON f.ActionDefinitionId = ad.ActionDefinitionId
			 WHERE ad.ActionName = 'Register' 
			   AND f.PortalId = @PortalId 
			   AND (@DesktopModuleId = 0 OR f.DesktopModuleId = @DesktopModuleId) 
			   AND f.TimeStamp >= @MinDate AND f.TimeStamp < @MaxDate))
		
		SET @MaxDate = @MinDate
		SET @Count = @Count + 1
		SET @MinDate = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDate, @StartDate, @Count, @Grouping)
	END

	SELECT * FROM @ResultsTable ORDER BY StartDate
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetParticipation') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetParticipation
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetParticipation
	@PortalId INT,
	@DesktopModuleId INT,
	@StartDate DATETIME,
	@EndDate DATETIME,	
	@Grouping CHAR(1)
AS
BEGIN		
	DECLARE @ResultsTable TABLE
	(
		StartDate DATETIME,
		EndDate DATETIME,
		MetricCount int
	)

	DECLARE @Count INT = 1
	DECLARE @MaxDate DATETIME = @EndDate	
	DECLARE @MinDate DATETIME = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDate, @StartDate, @Count, @Grouping)

	WHILE @StartDate < @MaxDate
	BEGIN
		INSERT INTO @ResultsTable (StartDate, EndDate, MetricCount) 
		VALUES (@MinDate, @MaxDate,
			(SELECT COUNT(DISTINCT f.UserId) FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
			 WHERE at.ActionType IN ('Interacted', 'Created', 'FormedRelationship', 'Shared')
			   AND f.PortalId = @PortalId 
			   AND (@DesktopModuleId = 0 OR f.DesktopModuleId = @DesktopModuleId) 
			   AND f.TimeStamp >= @MinDate AND f.TimeStamp < @MaxDate))
		
		SET @MaxDate = @MinDate
		SET @Count = @Count + 1
		SET @MinDate = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDate, @StartDate, @Count, @Grouping)
	END

	SELECT * FROM @ResultsTable ORDER BY StartDate
END
GO

-- DELETE OLD STORED PROCEDURES
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetFilteredMonthlyTimeSeriesByModule') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetFilteredMonthlyTimeSeriesByModule
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetFilteredDailyTimeSeriesByModule') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetFilteredDailyTimeSeriesByModule
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetFilteredHourlyTimeSeriesByModule') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetFilteredHourlyTimeSeriesByModule
GO
-- END DELETE OLD STORED PROCEDURES

-- RENAME Analytics_Warehouse_QueryActivityByModule TO Analytics_Warehouse_GetActivityByModule
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_QueryActivityByModule') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryActivityByModule
GO
--END RENAME

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetActivityByModule') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetActivityByModule
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetActivityByModule
	@PortalId INT,
    @StartDate DATETIME,
    @EndDate DATETIME,    
    @Grouping CHAR(1),
	@DesktopModuleIdList NVARCHAR(MAX)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @ResultsTable TABLE
	(	
		DesktopModuleId INT,
		MetricCount INT,
		TimeSliceStart DATETIME,
		TimeSliceEnd DATETIME
	)

	DECLARE @DesktopModuleIds TABLE
	(		
		DesktopModuleId INT PRIMARY KEY
	)

	INSERT INTO @DesktopModuleIds (DesktopModuleId) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@DesktopModuleIdList, ','));
	
	DECLARE @Count INT = 1
	DECLARE @MaxDate DATETIME = @EndDate	
	DECLARE @MinDate DATETIME = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDate, @StartDate, @Count, @Grouping)	

    WHILE @StartDate < @MaxDate
    BEGIN	

		INSERT INTO @ResultsTable (DesktopModuleId, MetricCount, TimeSliceStart, TimeSliceEnd)
			SELECT f.DesktopModuleId, COUNT(*), @MinDate, @MaxDate
			FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
			WHERE f.PortalId = @PortalId
				AND at.ActionType NOT IN ('Flagged','Deleted','Moderated','Viewed')
				AND f.[TimeStamp] >= @MinDate AND f.[TimeStamp] < @MaxDate
			GROUP BY f.DesktopModuleId

		--FILL GAPS WITH ZERO VALUES
		INSERT INTO @ResultsTable (DesktopModuleId, MetricCount, TimeSliceStart, TimeSliceEnd)
			SELECT DesktopModuleId, 0, @MinDate, @MaxDate
			FROM @DesktopModuleIds m
			WHERE NOT EXISTS ( 
					SELECT * FROM @ResultsTable r 
					WHERE r.DesktopModuleId = m.DesktopModuleId AND r.TimeSliceStart = @MinDate 
					AND r.TimeSliceEnd = @MaxDate)
		
        SET @MaxDate = @MinDate
		SET @Count = @Count + 1
		SET @MinDate = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDate, @StartDate, @Count, @Grouping)
    END

    SELECT DesktopModuleId,	MetricCount, TimeSliceStart, TimeSliceEnd 
	FROM @ResultsTable 
	ORDER BY TimeSliceStart

END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Warehouse_GetTrendingTags]', N'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_GetTrendingTags]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTrendingTags
	@DesktopModuleId INT,
	@Skip INT,
	@Take INT,
	@StartDate DATETIME,
	@EndDate DATETIME,
	@PortalId INT
AS
BEGIN		
	DECLARE @SubResults TABLE
	(
		UserScoringLogId INT,
		ContentId INT,
		TagGroupId INT,
		ActionType NVARCHAR(MAX)
	)
	DECLARE @EditedItems TABLE
	(
		UserScoringLogId INT,
		ContentId INT,
		NewTagGroupId INT,
		ActionType NVARCHAR(MAX)
	)
	DECLARE @Results TABLE
	(
		TermRank INT,
		Term NVARCHAR(MAX),
		TermCount INT
	)
	DECLARE @TotalTermCount INT

	INSERT INTO @SubResults
	SELECT f.UserScoringLogId, f.ContentId, f.TagGroupId, at.ActionType FROM  {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_TagGroup tg ON f.TagGroupId = tg.TagGroupId 
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
	WHERE 
		f.PortalId = @PortalId AND
		(@DesktopModuleId = 0 OR f.DesktopModuleId = @DesktopModuleId) AND
		f.TimeStamp >= @StartDate AND f.TimeStamp <= @EndDate AND 
		at.ActionType <> 'Moderated' AND
		f.UserScoringLogId >= (SELECT MIN(f2.UserScoringLogId) FROM  {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f2
					INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at2 ON f2.ActionTypeId = at2.ActionTypeId
					WHERE at2.ActionType = 'Created' AND f2.ContentId = f.ContentId)
	OPTION(RECOMPILE);

	INSERT INTO @EditedItems
	SELECT UserScoringLogId, ContentId, TagGroupId, ActionType 
	FROM 
		(SELECT UserScoringLogId, ContentId, TagGroupId, ActionType, RowNum = ROW_NUMBER() OVER (PARTITION BY ContentId ORDER BY UserScoringLogId DESC)
		 FROM @SubResults
		 WHERE ActionType IN ('Edited', 'Flagged', 'Deleted') ) Singles
	WHERE RowNum = 1
	OPTION(RECOMPILE);

	DELETE R FROM @SubResults R INNER JOIN @EditedItems E ON R.ContentId = E.ContentId
	WHERE E.ActionType IN ('Flagged', 'Deleted')
	OPTION(RECOMPILE);

	UPDATE R SET TagGroupId = e.NewTagGroupId 
	FROM @SubResults R 
		INNER JOIN @EditedItems E ON R.ContentId = E.ContentId
	WHERE E.ActionType = 'Edited'
	OPTION(RECOMPILE);

	INSERT INTO @Results 
	SELECT ROW_NUMBER() OVER(ORDER BY COUNT(t.Term) DESC) AS RowNumber, t.Term, COUNT(t.Term) AS TermCount
	FROM @SubResults R 
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Bridge_TagGroup_Tag tgb ON R.TagGroupId = tgb.TagGroupId
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Tag t ON tgb.TagId = t.TagId 
	WHERE t.Term <> ''
	GROUP BY t.Term
	OPTION(RECOMPILE);

	SELECT @TotalTermCount = COUNT(DISTINCT Term) FROM @Results
	SELECT Term, TermCount, @TotalTermCount AS TotalTermCount FROM @Results WHERE TermRank BETWEEN @Skip + 1 AND @Skip + @Take ORDER BY TermRank
END
GO

--RENAMED SPROC FROM Analytics_Warehouse_QueryModulePerformance TO Analytics_Warehouse_GetModulePerformance
IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_QueryModulePerformance', N'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryModulePerformance
GO
--END RENAMED

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetModulePerformance', N'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetModulePerformance
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetModulePerformance
	@PortalId INT,
	@startDate DATETIME,
	@endDate DATETIME,
	@DesktopModuleId INT,
	@Engagement FLOAT OUTPUT,
	@CreateCount INT OUTPUT,
	@UniqueViewCount INT OUTPUT
AS
BEGIN		
	DECLARE @UniqueViews INT
	DECLARE @Numerator FLOAT
	DECLARE @Denominator FLOAT

	DECLARE @ResultsTable TABLE
	(	
		ActionId INT PRIMARY KEY,
		ActionType NVARCHAR(MAX),
		ActionCount INT
	)
	
	INSERT INTO @ResultsTable 
	SELECT at.ActionTypeId, at.ActionType, COUNT(*) AS ActionTypeCount 
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
		WHERE f.PortalId = @PortalId
			AND f.DesktopModuleId = @DesktopModuleId
			AND (at.ActionType IN ('Created', 'FormedRelationship', 'Shared', 'Interacted', 'DissolvedRelationship', 'Deleted'))
			AND f.[TimeStamp] >= @startDate AND F.[TimeStamp] < @endDate
		GROUP BY at.ActionTypeId, at.ActionType

	SELECT @UniqueViews = (SELECT TOP 1 COUNT(*) OVER ()
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
		WHERE f.PortalId = @PortalId
			AND f.DesktopModuleId = @DesktopModuleId
			AND (at.ActionType = 'Viewed')
			AND f.[TimeStamp] >= @startDate AND F.[TimeStamp] < @endDate
		GROUP BY f.ContentId, f.UserId)

	SELECT @Numerator =
	(
		@UniqueViews +
		COALESCE((SELECT ActionCount FROM @ResultsTable WHERE ActionType = 'Created'),0) +
		COALESCE((SELECT ActionCount FROM @ResultsTable WHERE ActionType = 'FormedRelationship'),0) +
		COALESCE((SELECT ActionCount FROM @ResultsTable WHERE ActionType = 'Shared'),0) +
		COALESCE((SELECT ActionCount FROM @ResultsTable WHERE ActionType = 'Interacted'),0) -
		COALESCE((SELECT ActionCount FROM @ResultsTable WHERE ActionType = 'DissolvedRelationship'),0) -
		COALESCE((SELECT ActionCount FROM @ResultsTable WHERE ActionType = 'Deleted'),0) - 1
	) 
	FROM @ResultsTable

	SELECT @Denominator =
	(
		COALESCE((SELECT ActionCount FROM @ResultsTable WHERE ActionType = 'Shared'), 0) + 
		COALESCE(@UniqueViews,0)	
	) 
	FROM @ResultsTable

	SELECT @Engagement = COALESCE(@Numerator / NULLIF(@Denominator,0), 0)
	SET @CreateCount = COALESCE((SELECT ActionCount FROM @ResultsTable WHERE ActionType = 'Created'),0)
	SET @UniqueViewCount = COALESCE(@UniqueViews,0)	
END
GO

--RENAMED Analytics_Warehouse_QueryMultipleModulePerformance TO Analytics_Warehouse_GetMultipleModulePerformance

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_QueryMultipleModulePerformance', N'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryMultipleModulePerformance
GO

--END RENAMED

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetMultipleModulePerformance', N'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetMultipleModulePerformance
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetMultipleModulePerformance
	@PortalId INT,
	@startDate DATETIME,
	@endDate DATETIME,
	@ComparativeTermOffset INT,
	@DesktopModuleIdList NVARCHAR(MAX)
AS
BEGIN
	DECLARE @ModuleCounter INT
	DECLARE @DesktopModuleId INT
	DECLARE @NumModules INT	

	DECLARE @TempEngagement FLOAT	
	DECLARE @TempViewCount INT
	DECLARE @TempCreateCount INT
	DECLARE @ComparativeTermEngagement FLOAT
	DECLARE @ComparativeTermViewCount INT
	DECLARE @ComparativeTermCreateCount INT
		
	DECLARE @DesktopModuleIds TABLE
	(		
		DesktopModuleId INT PRIMARY KEY,
		ModuleRow INT
	)

	DECLARE @Results TABLE
	(
		DesktopModuleId INT PRIMARY KEY,
		Engagement FLOAT,
		ComparativeTermEngagement FLOAT,
		CreateCount INT,
		UniqueViewCount INT		
	)

	DECLARE @comparativeStartDate DATETIME = DATEADD(day, @ComparativeTermOffset, @startDate)
	DECLARE @comparativeEndDate DATETIME =DATEADD(day, @ComparativeTermOffset, @endDate)
	
	INSERT INTO @DesktopModuleIds (DesktopModuleId, ModuleRow) (SELECT val,  ROW_NUMBER() OVER(ORDER BY val DESC) FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@DesktopModuleIdList, ','));
	SELECT @NumModules = COUNT(*) FROM @DesktopModuleIds
	
	SET @ModuleCounter = 0

	WHILE @ModuleCounter < @NumModules
	BEGIN	
		SELECT @DesktopModuleId = DesktopModuleId FROM @DesktopModuleIds WHERE ModuleRow = @ModuleCounter + 1

		EXECUTE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetModulePerformance
		@PortalId,
		@startDate,
		@endDate,
		@DesktopModuleId,
		@TempEngagement OUTPUT,
		@TempCreateCount OUTPUT,
		@TempViewCount OUTPUT

		EXECUTE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetModulePerformance
		@PortalId,
		@comparativeStartDate,
		@comparativeEndDate,
		@DesktopModuleId,
		@ComparativeTermEngagement OUTPUT,
		@ComparativeTermCreateCount OUTPUT,
		@ComparativeTermViewCount OUTPUT
			
		INSERT INTO @Results (DesktopModuleId, Engagement, ComparativeTermEngagement, CreateCount, UniqueViewCount)
		VALUES(@DesktopModuleId, @TempEngagement, @ComparativeTermEngagement, @TempCreateCount, @TempViewCount)

		SET @ModuleCounter = @ModuleCounter + 1
	END
	SELECT * FROM @Results
END
GO

-- DELETE OLD STORED PROCEDURES
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetMonthlyTimeSeriesByActionType') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetMonthlyTimeSeriesByActionType
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetHourlyTimeSeriesByActionType') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetHourlyTimeSeriesByActionType
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetDailyTimeSeriesByActionType') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetDailyTimeSeriesByActionType
GO
-- END DELETE OLD STORED PROCEDURES

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetTimeSeriesByActionType') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTimeSeriesByActionType
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTimeSeriesByActionType
	@PortalId INT,
	@DesktopModuleId INT,
	@StartDate DATETIME,
    @EndDate DATETIME,    
    @Grouping CHAR(1)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    DECLARE @ResultsTable TABLE
	(	
		ActionTypeId INT,
		MetricCount INT,
		TimeSliceStart DATETIME,
		TimeSliceEnd DATETIME
	)
	
	DECLARE @Count INT = 1
	DECLARE @MaxDate DATETIME = @EndDate	
	DECLARE @MinDate DATETIME = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDate, @StartDate, @Count, @Grouping)	

    WHILE @StartDate < @MaxDate
    BEGIN	

		INSERT INTO @ResultsTable (ActionTypeId, MetricCount, TimeSliceStart, TimeSliceEnd)
		SELECT f.ActionTypeId, COUNT(*), @MinDate, @MaxDate
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
		WHERE f.PortalId = @PortalId
			AND f.DesktopModuleId = @DesktopModuleId
			AND at.ActionType IN ('Interacted', 'FormedRelationship', 'Shared', 'Created')
			AND f.[TimeStamp] >= @MinDate AND f.[TimeStamp] < @MaxDate
		GROUP BY f.ActionTypeId

		--FILL GAPS WITH ZERO VALUES
		INSERT INTO @ResultsTable (ActionTypeId, MetricCount, TimeSliceStart, TimeSliceEnd)
			SELECT at.ActionTypeId, 0, @MinDate, @MaxDate
			FROM {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at
			WHERE at.ActionType IN ('Interacted', 'FormedRelationship', 'Shared', 'Created')
				AND NOT EXISTS ( 
					SELECT * FROM @ResultsTable r 
					WHERE r.ActionTypeId = at.ActionTypeId AND r.TimeSliceStart = @MinDate 
					AND r.TimeSliceEnd = @MaxDate)
		
        SET @MaxDate = @MinDate
		SET @Count = @Count + 1
		SET @MinDate = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDate, @StartDate, @Count, @Grouping)
    END

    SELECT ActionTypeId, MetricCount, TimeSliceStart, TimeSliceEnd 
	FROM @ResultsTable 
	ORDER BY TimeSliceStart

END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_QueryTopTopActiveUsers') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryTopTopActiveUsers
GO

IF COL_LENGTH('{databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]', 'Interval') IS NOT NULL
	exec sp_executesql N'DELETE {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]'
GO

IF EXISTS (SELECT 1 FROM sys.indexes
				WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]')
				AND name = N'IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_PortalId')
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_PortalId ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_PortalId]
		ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup] ([PortalId])
		INCLUDE ([Activities],[ReputationPoints])
GO

IF EXISTS (SELECT 1 FROM sys.indexes
				WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]')
				AND name = N'IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_DesktopModuleId')
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_DesktopModuleId ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_DesktopModuleId]
	ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup] ([DesktopModuleId])
GO

IF EXISTS (SELECT 1 FROM sys.indexes
				WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]')
				AND name = N'IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_Interval')
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_Interval ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]
GO

IF EXISTS (SELECT 1 FROM sys.indexes
				WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]')
				AND name = N'IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_Influence')
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_Influence ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]
GO

IF EXISTS (SELECT 1 FROM sys.indexes
				WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]')
				AND name = N'IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_Activities')
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_Activities ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_Activities]
	ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup] ([Activities])
	INCLUDE ([PortalId],[DesktopModuleId])
GO

IF EXISTS (SELECT 1 FROM sys.indexes
				WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]')
				AND name = N'IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_ReputationPoints')
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_ReputationPoints ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_ReputationPoints]
	ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup] ([ReputationPoints])
	INCLUDE ([PortalId],[DesktopModuleId])
GO

IF EXISTS (SELECT 1 FROM sys.indexes
				WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]')
				AND name = N'IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_Interval_Date')
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_Interval_Date ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]
GO

IF EXISTS (SELECT 1 FROM sys.indexes
				WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]')
				AND name = N'IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_Date')
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_Date ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_Date]
	ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup] ([Date])
	INCLUDE ([RollupId])
GO

IF EXISTS (SELECT 1 FROM sys.indexes
				WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]')
				AND name = N'IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_UID_PID_DMID_Interval')
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_UID_PID_DMID_Interval ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]
GO

IF COL_LENGTH('{databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]', 'Interval') IS NOT NULL
	ALTER TABLE {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]
	DROP Column Interval
GO

IF NOT EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_UserInfluenceRollup') and OBJECTPROPERTY(id, N'IsTable') = 1)
BEGIN	
	CREATE TABLE {databaseOwner}{objectQualifier}Analytics_UserInfluenceRollup (
		PortalId INT NOT NULL,		
		UserId INT NOT NULL,
		InfluenceDaily INT NOT NULL,
		InfluenceWeekly INT NOT NULL,
		InfluenceMonthly INT NOT NULL,
		InfluenceYearly INT NOT NULL,
		CONSTRAINT PK_{objectQualifier}Analytics_UserInfluenceRollup PRIMARY KEY (PortalId, UserId)
	)
END
GO

IF COL_LENGTH('{databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]', 'Influence') IS NOT NULL
	ALTER TABLE {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]
	DROP Column Influence
GO

IF COL_LENGTH('{databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]', 'SpectatorCount') IS NULL
	ALTER TABLE {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]
	ADD SpectatorCount INT NOT NULL DEFAULT 0
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetSpectatorsChart') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetSpectatorsChart
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetSpectatorsChart
	@PortalId INT,
	@DesktopModuleId INT,
	@StartDate DATETIME,
	@EndDate DATETIME,
	@TimeZoneOffset INT,
	@Grouping CHAR(1)
AS
BEGIN		
	DECLARE @ResultsTable TABLE
	(
		StartDate DATETIME,
		EndDate DATETIME,
		MetricCount int
	)

	DECLARE @Count INT = 1
	DECLARE @MaxDate DATETIME = @EndDate	
	DECLARE @MinDate DATETIME = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDate, @StartDate, @Count, @Grouping)

	WHILE @StartDate < @MaxDate
	BEGIN
		DECLARE @Lower INT = CAST(convert(varchar, DATEADD(HH, @TimeZoneOffset, @MinDate), 112) as int)
		DECLARE @Upper INT = CAST(convert(varchar, DATEADD(HH, @TimeZoneOffset, @MaxDate), 112) as int)

		INSERT INTO @ResultsTable (StartDate, EndDate, MetricCount)
		VALUES (@MinDate, @MaxDate,
			(SELECT ISNULL(COUNT(DISTINCT ru.UserId), 0)
			FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup ru
			 WHERE ru.PortalId = @PortalId
				AND	ru.Date >= @Lower AND RU.Date < @Upper
				AND	(@DesktopModuleId = -1 OR RU.DesktopModuleId = @DesktopModuleId)
				AND ru.SpectatorCount > 0))
						
		SET @MaxDate = @MinDate
		SET @Count = @Count + 1
		SET @MinDate = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDate, @StartDate, @Count, @Grouping)
	END

	SELECT * FROM @ResultsTable ORDER BY StartDate
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetSpectatorsChartHourly') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetSpectatorsChartHourly
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetSpectatorsChartHourly
	@PortalId INT,
	@DesktopModuleId INT,
	@StartUtcDate DATETIME,
	@EndUtcDate	DATETIME
AS
BEGIN		
	DECLARE @SpectatorsTable TABLE
	(
		StartDate DATETIME,
		EndDate DATETIME,
		MetricCount int
	);

	WITH AllViews AS (
		SELECT l.UserId, l.ContentId, l.TimeStamp
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog l
			JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON l.ActionTypeId = at.ActionTypeId
		WHERE PortalId = @PortalId
			AND l.TimeStamp >= @StartUtcDate AND l.TimeStamp < @EndUtcDate		
			AND l.ContentId > 0
			AND at.ActionType = 'Viewed'
			AND NOT EXISTS (SELECT *
							FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog l2
								JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at2 ON l2.ActionTypeId = at2.ActionTypeId
							WHERE l2.PortalId = @PortalId
								AND l2.TimeStamp >= @StartUtcDate AND l2.TimeStamp < @EndUtcDate
								AND l2.UserId = l.UserId AND l2.ContentId = l.ContentId
								AND at2.ActionType IN ('Interacted', 'Created', 'FormedRelationship', 'Shared'))						
		GROUP BY UserId, l.ContentId, l.TimeStamp
	)
	INSERT INTO @SpectatorsTable
	SELECT dateadd(HH, datediff(HH, 0, TimeStamp), 0) StartDate, dateadd(hh, 1, dateadd(HH, datediff(HH, 0, TimeStamp), 0)) EndDate,  COUNT(DISTINCT UserId) MetricCount
	FROM AllViews v1
	WHERE TimesTamp = (SELECT MIN(TimesTamp) FROM AllViews v2 WHERE v1.Userid = v2.UserId AND v1.ContentId = v2.ContentId)
	GROUP BY dateadd(HH, datediff(HH, 0, TimeStamp), 0), dateadd(hh, 1, dateadd(HH, datediff(HH, 0, TimeStamp), 0));

	WITH AllHours AS
	(
		SELECT @StartUtcDate AS StartDate, DATEADD(HH, 1, @StartUtcDate) EndDate
		UNION ALL
		SELECT DATEADD(HH, 1, StartDate), DATEADD(HH, 2, StartDate) EndDate
		FROM AllHours 
		WHERE DATEADD(HH, 1, StartDate) < @EndUtcDate
	)
	SELECT h.StartDate, h.EndDate, ISNULL(s.MetricCount, 0) MetricCount
	FROM AllHours h
		LEFT JOIN @SpectatorsTable s ON h.StartDate = s.StartDate AND h.EndDate = s.EndDate
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Get_User') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Get_User
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Get_User]
	@PortalId int,
	@UserId int
AS
BEGIN
	SELECT	[UserSampleId],
			[PortalId],
			[UserId],
			[ProcessDate],
			[TotalSeconds],
			[Engagement] AS [EngagementDocument],
			[Influence] AS [InfluenceDocument],
			[Contribution] AS [ContributionDocument],
			[Activity] AS [ActivityDocument],
			[Login] AS [LoginDocument]
	FROM	{databaseOwner}[{objectQualifier}Analytics_Users] WITH (NOLOCK)
	WHERE	[PortalId] = @PortalId AND [UserId] = @UserId

	SELECT InfluenceDaily, InfluenceWeekly, InfluenceMonthly, InfluenceYearly
	FROM  {databaseOwner}{objectQualifier}Analytics_UserInfluenceRollup
	WHERE PortalId = @PortalId AND UserId = @UserId
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_ApplyUserScoringLogRollup') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_ApplyUserScoringLogRollup
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Calculate_User]', N'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Calculate_User]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Calculate_User]
	@PortalId int,
	@UserId int,
	@InfluenceGoal int
AS
BEGIN
	DECLARE @TotalSeconds bigint
	DECLARE @Engagement xml
	DECLARE @Contribution xml
	DECLARE @Activity xml
	DECLARE @Login xml

	DECLARE @ExistingEngagement xml
	DECLARE @ExistingContribution xml
	DECLARE @ExistingActivity xml
	DECLARE @ExistingLogin xml

	DECLARE @InfluenceDaily INT
	DECLARE @InfluenceWeekly INT
	DECLARE @InfluenceMonthly INT
	DECLARE @InfluenceYearly INT

	DECLARE @LowerDaily DATETIME
	DECLARE @UpperDaily DATETIME
	DECLARE @LowerWeekly DATETIME
	DECLARE @LowerMonthly DATETIME
	DECLARE @LowerYearly DATETIME

	DECLARE @ProcessDate DATETIME

	SET @UpperDaily = getutcdate()
	SET @LowerDaily = dateadd(day, -1, @UpperDaily)
	SET @LowerWeekly = dateadd(day, -7, @UpperDaily)
	SET @LowerMonthly = dateadd(month, -1, @UpperDaily)
	SET @LowerYearly = dateadd(year, -1, @UpperDaily)

	-- Get all the Influence Data
	SELECT	@InfluenceDaily = {databaseOwner}{objectQualifier}Analytics_Calculate_User_Influence(@PortalId, @UserId, @LowerDaily, @UpperDaily)
	SELECT	@InfluenceWeekly = {databaseOwner}{objectQualifier}Analytics_Calculate_User_Influence(@PortalId, @UserId, @LowerWeekly, @UpperDaily)
	SELECT	@InfluenceMonthly = {databaseOwner}{objectQualifier}Analytics_Calculate_User_Influence(@PortalId, @UserId, @LowerMonthly, @UpperDaily)
	SELECT	@InfluenceYearly = {databaseOwner}{objectQualifier}Analytics_Calculate_User_Influence(@PortalId, @UserId, @LowerYearly, @UpperDaily)

	--Convert to Percentage
	IF @InfluenceGoal = 0
		SET @InfluenceGoal = 2000

	SET @InfluenceDaily = (@InfluenceDaily * 100) / @InfluenceGoal
	SET @InfluenceWeekly = (@InfluenceWeekly * 100) / @InfluenceGoal
	SET @InfluenceMonthly = (@InfluenceMonthly * 100) / @InfluenceGoal
	SET @InfluenceYearly = (@InfluenceYearly * 100) / @InfluenceGoal

	SELECT	@TotalSeconds = COALESCE(SUM(CONVERT(bigint,COALESCE(TotalSeconds, 0))), 0)
	FROM	{databaseOwner}[{objectQualifier}Analytics_PageTime]
	WHERE	[PortalId] = @PortalId AND [UserId] = @UserId

	-- Generate user time series XML documents
	SELECT	@Engagement = {databaseOwner}{objectQualifier}Analytics_Generate_Engagement_TimeSeries(@PortalId, @UserId)
	SELECT	@Contribution = {databaseOwner}{objectQualifier}Analytics_Generate_Contribution_TimeSeries(@PortalId, @UserId)
	SELECT	@Activity = {databaseOwner}{objectQualifier}Analytics_Generate_Activity_TimeSeries(@PortalId, @UserId)
	SELECT	@Login = {databaseOwner}{objectQualifier}Analytics_Generate_Login_TimeSeries(@PortalId, @UserId)

	SELECT	@ExistingEngagement = N'<TimeSeries />';
	SELECT	@ExistingContribution = N'<TimeSeries />';
	SELECT	@ExistingActivity = N'<TimeSeries />';
	SELECT	@ExistingLogin = N'<TimeSeries />';

	SET		@ExistingEngagement.modify('insert sql:variable("@Engagement") into (/TimeSeries)[1]')
	SET		@ExistingContribution.modify('insert sql:variable("@Contribution") into (/TimeSeries)[1]')
	SET		@ExistingActivity.modify('insert sql:variable("@Activity") into (/TimeSeries)[1]')
	SET		@ExistingLogin.modify('insert sql:variable("@Login") into (/TimeSeries)[1]')

	IF EXISTS(
			SELECT	*
			FROM	{databaseOwner}[{objectQualifier}Analytics_Users]
			WHERE	[PortalId] = @PortalId AND [UserId] = @UserId)
	BEGIN
		UPDATE {databaseOwner}[{objectQualifier}Analytics_Users]
			SET
				[ProcessDate] = NULL,
				[TotalSeconds] = @TotalSeconds,
				[Engagement] = @ExistingEngagement,
				[Contribution] = @ExistingContribution,
				[Activity] = @ExistingActivity,
				[Login] = @ExistingLogin
		WHERE	[PortalId] = @PortalId AND [UserId] = @UserId
	END
	ELSE
	BEGIN
		INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Users]
			([PortalId],
			 [UserId],
			 [ProcessDate],
			 [TotalSeconds],
			 [Engagement],
			 [Contribution],
			 [Activity],
			 [Login])
		VALUES
			(@PortalId,
			 @UserId,
			 NULL,
			 @TotalSeconds,
			 @ExistingEngagement,
			 @ExistingContribution,
			 @ExistingActivity,
			 @ExistingLogin)
	END

	IF EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}Analytics_UserInfluenceRollup 
				WHERE PortalId = @PortalId AND UserId = @UserId)
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}Analytics_UserInfluenceRollup 
			SET InfluenceDaily = @InfluenceDaily,
				InfluenceWeekly = @InfluenceWeekly,
				InfluenceMonthly = @InfluenceMonthly,
				InfluenceYearly = @InfluenceYearly
			WHERE PortalId = @PortalId AND UserId = @UserId
		END
	ELSE
		BEGIN
			INSERT {databaseOwner}{objectQualifier}Analytics_UserInfluenceRollup(PortalId, UserId, InfluenceDaily, InfluenceWeekly, InfluenceMonthly, InfluenceYearly)
			VALUES (@PortalId, @UserId, @InfluenceDaily, @InfluenceWeekly, @InfluenceMonthly, @InfluenceYearly)
		END

	-- Result set
	SELECT
		@PortalId AS [PortalId],
		@UserId AS [UserId],
		@ProcessDate AS [ProcessDate],
		@TotalSeconds AS [TotalSeconds],
		@ExistingEngagement AS [EngagementDocument],
		@ExistingContribution AS [ContributionDocument],
		@ExistingActivity AS [ActivityDocument],
		@ExistingLogin AS [LoginDocument]
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopActiveUsers') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopActiveUsers
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopActiveUsers
	@PortalId INT,
	@DesktopModuleId INT,
	@StartDate DATE,
	@EndDate DATE,
	@PageIndex INT,
	@PageSize INT
AS
BEGIN
	DECLARE @Lower INT = CAST(convert(varchar, @StartDate, 112) as int)
	DECLARE @Upper INT = CAST(convert(varchar, @EndDate, 112) as int)

	;WITH TopActiveUsers AS
	(
		SELECT	U.UserID, U.DisplayName, SUM(RU.Activities) Activities,
				ROW_NUMBER() OVER (ORDER BY SUM(RU.Activities) DESC) AS RowNumber
		FROM	{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup RU WITH (NOLOCK)
					INNER JOIN {databaseOwner}{objectQualifier}Users U WITH (NOLOCK)
						ON U.UserID = RU.UserId AND U.IsDeleted = 0
					INNER JOIN {databaseOwner}{objectQualifier}UserPortals UP WITH (NOLOCK)
						ON U.UserID = UP.UserId AND UP.PortalId = RU.PortalId AND UP.IsDeleted = 0
		WHERE	RU.PortalId = @PortalId
		  AND	RU.Date BETWEEN @Lower AND @Upper
		  AND	(@DesktopModuleId = -1 OR RU.DesktopModuleId = @DesktopModuleId)
		GROUP BY U.UserID, U.DisplayName
	)
	SELECT	TOP(@PageSize) UserId, DisplayName, Activities AS Value
	FROM	TopActiveUsers RU
	WHERE	RowNumber > @PageIndex
	ORDER BY RowNumber
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_QueryTopRankers') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryTopRankers
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopRankers') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopRankers
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopRankers
	@PortalId INT,
	@DesktopModuleId INT,
	@StartDate DATE,
	@EndDate DATE,
	@PageIndex INT,
	@PageSize INT
AS
BEGIN
	DECLARE @Lower INT = CAST(convert(varchar, @StartDate, 112) as int)
	DECLARE @Upper INT = CAST(convert(varchar, @EndDate, 112) as int)

	;WITH TopRankers AS
	(
		SELECT	U.UserID, U.DisplayName, SUM(RU.ReputationPoints) ReputationPoints,
				ROW_NUMBER() OVER (ORDER BY SUM(ReputationPoints) DESC) AS RowNumber
		FROM	{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup RU WITH (NOLOCK)
					INNER JOIN {databaseOwner}{objectQualifier}Users U WITH (NOLOCK)
						ON U.UserID = RU.UserId AND U.IsDeleted = 0
					INNER JOIN {databaseOwner}{objectQualifier}UserPortals UP WITH (NOLOCK)
						ON U.UserID = UP.UserId AND UP.PortalId = RU.PortalId AND UP.IsDeleted = 0
		WHERE	RU.PortalId = @PortalId
		  AND	RU.Date BETWEEN @Lower AND @Upper
		  AND	(@DesktopModuleId = -1 OR RU.DesktopModuleId = @DesktopModuleId)
		GROUP BY U.UserID, U.DisplayName
	)
	SELECT	TOP(@PageSize) UserId, DisplayName, ReputationPoints AS Value
	FROM	TopRankers RU
	WHERE	RowNumber > @PageIndex
	ORDER BY RowNumber
END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Warehouse_QueryTopInfluencers]', N'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryTopInfluencers
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Warehouse_GetTopSpectators]', N'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopSpectators
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopSpectators
	@PortalId INT,
	@DesktopModuleId INT,
	@StartDate DATE,
	@EndDate DATE,
	@PageIndex INT,
	@PageSize INT
AS
BEGIN
	DECLARE @Lower INT = CAST(convert(varchar, @StartDate, 112) as int)
	DECLARE @Upper INT = CAST(convert(varchar, @EndDate, 112) as int)

	;WITH TopSpectators AS
	(
		SELECT	U.UserID, U.DisplayName, SUM(RU.SpectatorCount) SpectatorCount,
				ROW_NUMBER() OVER (ORDER BY SUM(SpectatorCount) DESC) AS RowNumber
		FROM	{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup RU WITH (NOLOCK)
					INNER JOIN {databaseOwner}{objectQualifier}Users U WITH (NOLOCK)
						ON U.UserID = RU.UserId AND U.IsDeleted = 0
					INNER JOIN {databaseOwner}{objectQualifier}UserPortals UP WITH (NOLOCK)
						ON U.UserID = UP.UserId AND UP.PortalId = RU.PortalId AND UP.IsDeleted = 0
		WHERE	RU.PortalId = @PortalId
		  AND	RU.Date BETWEEN @Lower AND @Upper
		  AND	(@DesktopModuleId = -1 OR RU.DesktopModuleId = @DesktopModuleId)
		  AND	RU.SpectatorCount > 0
		GROUP BY U.UserID, U.DisplayName
	)
	SELECT	TOP(@PageSize) UserId, DisplayName, SpectatorCount AS Value
	FROM	TopSpectators RU
	WHERE	RowNumber > @PageIndex
	ORDER BY RowNumber
END
GO

-- RENAME Analytics_Warehouse_QueryModulePopularContent to Analytics_Warehouse_GetModulePopularContent

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_QueryModulePopularContent') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryModulePopularContent
GO

--END RENAME

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetModulePopularContent') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetModulePopularContent
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetModulePopularContent
	@DesktopModuleId INT,
	@Skip INT,
	@Take INT,
	@StartDate DATE,
	@EndDate DATE,
	@PortalId INT,
	@ComparativeTermOffset INT
AS
BEGIN
	SET @EndDate = DATEADD(day, 1, @EndDate)			
	
	;WITH PopularContent AS
	(				
		SELECT ROW_NUMBER() OVER(ORDER BY COUNT(DISTINCT(CASE WHEN at.ActionType = 'Viewed' THEN -f.UserId ELSE f.UserScoringLogId END)) DESC) AS 'Rank', 
			f.ContentId as ContentId, 
			COUNT(DISTINCT(CASE WHEN at.ActionType = 'Viewed' THEN -f.UserId ELSE f.UserScoringLogId END)) as ContentCount, 
			f.DesktopModuleId as DesktopModuleId 
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f 
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
			INNER JOIN {databaseOwner}{objectQualifier}vw_Analytics_Warehouse_Fact_Content v ON f.ContentId = v.ContentId
		WHERE at.ActionType NOT IN ('Flagged','Deleted','Moderated')
			AND (@DesktopModuleId = 0 OR f.DesktopModuleId = @DesktopModuleId)
			AND f.PortalId = @PortalId
            AND f.[TimeStamp] >= @StartDate AND f.[TimeStamp] < @EndDate
			AND v.CreateDate <= CONVERT(SMALLDATETIME, f.[TimeStamp])
			AND (v.DeleteDate IS NULL OR v.DeleteDate > @EndDate)
		GROUP BY f.ContentId, f.DesktopModuleId
	),
	ComparativeTermPopularContent AS	
	(				
		SELECT ROW_NUMBER() OVER(ORDER BY COUNT(DISTINCT(CASE WHEN at.ActionType = 'Viewed' THEN -f.UserId ELSE f.UserScoringLogId END)) DESC) AS 'Rank', 
			f.ContentId as ContentId, 
			COUNT(DISTINCT(CASE WHEN at.ActionType = 'Viewed' THEN -f.UserId ELSE f.UserScoringLogId END)) as ContentCount
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f 
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
			INNER JOIN {databaseOwner}{objectQualifier}vw_Analytics_Warehouse_Fact_Content v ON f.ContentId = v.ContentId
		WHERE at.ActionType NOT IN ('Flagged','Deleted','Moderated')
            AND f.[TimeStamp] >= DATEADD(DAY, -@ComparativeTermOffset, @StartDate) AND f.[TimeStamp] < DATEADD(DAY, -@ComparativeTermOffset, @EndDate)			
			AND v.CreateDate <= CONVERT(SMALLDATETIME, f.[TimeStamp])
		GROUP BY f.ContentId
	)
	SELECT p.ContentId, 
			p.DesktopModuleId, 
			p.Rank, 
			p.ContentCount,
			(SELECT COUNT(*) FROM PopularContent) AS ContentTotal, 
			c.Rank AS ComparativeRank, 
			c.ContentCount AS ComparativeContentCount, 
			(SELECT SUM(ContentCount) FROM ComparativeTermPopularContent) AS ComparativeTotal 
	FROM PopularContent p
		LEFT JOIN ComparativeTermPopularContent c ON p.ContentId = c.ContentId
		WHERE p.Rank > @Skip AND p.Rank <= (@Skip + @Take)
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetUniqueViewTimeSeriesByModule') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetUniqueViewTimeSeriesByModule
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetUniqueViewTimeSeriesByModule
	@PortalId INT,
	@DesktopModuleId INT,
	@StartDate DATETIME,
	@EndDate DATETIME,	
	@Grouping CHAR(1)
AS
BEGIN	
	DECLARE @ResultsTable TABLE
	(	
		DesktopModuleId INT,
		StartDate DATETIME,
		EndDate DATETIME,
		MetricCount INT
	)

	DECLARE @Count INT = 1
	DECLARE @MaxDate DATETIME = @EndDate	
	DECLARE @MinDate DATETIME = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDate, @StartDate, @Count, @Grouping)
	
	WHILE @StartDate < @MaxDate
	BEGIN
		
		INSERT INTO @ResultsTable (DesktopModuleId, StartDate, EndDate, MetricCount) 
		SELECT @DesktopModuleId, @MinDate, @MaxDate, COUNT(DISTINCT f.UserId)
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
		WHERE f.PortalId = @PortalId
			AND f.DesktopModuleId = @DesktopModuleId
			AND at.ActionType = 'Viewed'
			AND (f.[TimeStamp] >= @MinDate AND f.[TimeStamp] < @MaxDate)
		GROUP BY f.UserId

		IF NOT EXISTS
		(
			SELECT 1 FROM @ResultsTable r
			WHERE r.DesktopModuleId = @DesktopModuleId 
				AND r.StartDate = @MinDate 
				AND r.EndDate = @MaxDate
		)
		BEGIN
			INSERT INTO @ResultsTable (DesktopModuleId, StartDate, EndDate, MetricCount)
			VALUES (@DesktopModuleId, @MinDate, @MaxDate, 0)
		END
		
		SET @MaxDate = @MinDate
		SET @Count = @Count + 1
		SET @MinDate = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDate, @StartDate, @Count, @Grouping)
	END

	SELECT DesktopModuleId, StartDate, EndDate , SUM(MetricCount) AS MetricCount
	FROM @ResultsTable 
	GROUP BY DesktopModuleId, StartDate, EndDate
	ORDER BY DesktopModuleId, StartDate

END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetMinimumLogDate') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetMinimumLogDate
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetMinimumLogDate 
	@PortalId INT
AS
BEGIN
	SELECT MIN(TimeStamp) 
	FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog
	WHERE PortalId = @PortalId
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_Spectators') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_Spectators
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_Spectators
	@PortalId INT,
	@LocalDate DATE,
	@StartUtcDate DATETIME,
	@EndUtcDate DATETIME
AS 
BEGIN

	DECLARE @Date INT = CAST(convert(varchar, @LocalDate, 112) as int);
	
	WITH Spectators AS
	(
		SELECT UserId, DesktopModuleId, COUNT(DISTINCT ContentId) SpectatorCount
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog l
			JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON l.ActionTypeId = at.ActionTypeId
		WHERE PortalId = @PortalId
			AND l.TimeStamp >= @StartUtcDate AND l.TimeStamp < @EndUtcDate		
			AND l.ContentId > 0
			AND at.ActionType = 'Viewed'
			AND NOT EXISTS (SELECT *
							FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog l2
								JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at2 ON l2.ActionTypeId = at2.ActionTypeId
							WHERE l2.PortalId = @PortalId
								AND l2.TimeStamp >= @StartUtcDate AND l2.TimeStamp < @EndUtcDate
								AND l2.UserId = l.UserId AND l2.ContentId = l.ContentId
								AND at2.ActionType IN ('Interacted', 'Created', 'FormedRelationship', 'Shared'))						
		GROUP BY UserId, DesktopModuleId
	)
	MERGE {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup t
		USING Spectators s
		ON (t.PortalId = @PortalId AND t.DesktopModuleId = s.DesktopModuleId AND t.UserId = s.UserId AND t.Date = @Date)
	WHEN NOT MATCHED BY TARGET THEN
		INSERT (Date, UserId, PortalId, DesktopModuleId, Activities, ReputationPoints, SpectatorCount)
		VALUES (@Date, s.UserId, @PortalId, s.DesktopModuleId, 0, 0, s.SpectatorCount)
	WHEN NOT MATCHED BY SOURCE AND t.SpectatorCount <> 0 AND t.PortalId = @PortalId AND t.Date = @Date THEN
		UPDATE SET t.SpectatorCount = 0
	WHEN MATCHED THEN
		UPDATE SET t.SpectatorCount = s.SpectatorCount;
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_ReputationPoints') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_ReputationPoints
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_ReputationPoints
	@PortalId INT,
	@LocalDate DATE,
	@StartUtcDate DATETIME,
	@EndUtcDate DATETIME
AS 
BEGIN

	DECLARE @Date INT = CAST(convert(varchar, @LocalDate, 112) as int);
	
	WITH ReputationPoints AS
	(
		SELECT UserId, DesktopModuleId, SUM(ReputationPoints) ReputationPoints
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog l
		WHERE PortalId = @PortalId
			AND l.TimeStamp >= @StartUtcDate AND l.TimeStamp < @EndUtcDate		
		GROUP BY UserId, DesktopModuleId
		HAVING SUM(ReputationPoints) > 0
	)
	MERGE {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup t
		USING ReputationPoints s
		ON (t.PortalId = @PortalId AND t.DesktopModuleId = s.DesktopModuleId AND t.UserId = s.UserId AND t.Date = @Date)
	WHEN NOT MATCHED BY TARGET THEN
		INSERT (Date, UserId, PortalId, DesktopModuleId, Activities, ReputationPoints, SpectatorCount)
		VALUES (@Date, s.UserId, @PortalId, s.DesktopModuleId, 0, ReputationPoints, 0)
	WHEN NOT MATCHED BY SOURCE AND t.ReputationPoints <> 0 AND t.PortalId = @PortalId AND t.Date = @Date THEN
		UPDATE SET t.ReputationPoints = 0
	WHEN MATCHED THEN
		UPDATE SET t.ReputationPoints = s.ReputationPoints;
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_Activities') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_Activities
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_Activities
	@PortalId INT,
	@LocalDate DATE,
	@StartUtcDate DATETIME,
	@EndUtcDate DATETIME
AS 
BEGIN

	DECLARE @Date INT = CAST(convert(varchar, @LocalDate, 112) as int);
	
	WITH Activities AS
	(
		SELECT UserId, DesktopModuleId, COUNT(*) Activities
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog l
			JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON l.ActionTypeId = at.ActionTypeId
		WHERE PortalId = @PortalId
			AND l.TimeStamp >= @StartUtcDate AND l.TimeStamp < @EndUtcDate		
			AND l.ContentId > 0
			AND at.ActionType IN ('Created', 'Edited', 'FormedRelationship', 'Interacted')			
		GROUP BY UserId, DesktopModuleId
		HAVING COUNT(*) > 0
	)
	MERGE {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup t
		USING Activities s
		ON (t.PortalId = @PortalId AND t.DesktopModuleId = s.DesktopModuleId AND t.UserId = s.UserId AND t.Date = @Date)
	WHEN NOT MATCHED BY TARGET THEN
		INSERT (Date, UserId, PortalId, DesktopModuleId, Activities, ReputationPoints, SpectatorCount)
		VALUES (@Date, s.UserId, @PortalId, s.DesktopModuleId, s.Activities, 0, 0)
	WHEN NOT MATCHED BY SOURCE AND t.Activities <> 0 AND t.PortalId = @PortalId AND t.Date = @Date  THEN
		UPDATE SET t.Activities = 0
	WHEN MATCHED THEN
		UPDATE SET t.Activities = s.Activities;
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Recalculate_Period') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Recalculate_Period
GO

-- CHANGE TABLE Analytics_PageTime_Aggregate

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_PageTime_Aggregate') and OBJECTPROPERTY(id, N'IsTable') = 1)
	DROP TABLE {databaseOwner}[{objectQualifier}Analytics_PageTime_Aggregate]
GO  

CREATE TABLE {databaseOwner}[{objectQualifier}Analytics_PageTime_Aggregate]
(
	SampleId int NOT NULL IDENTITY (1, 1),
	PortalId int NOT NULL,
	[Date] date NOT NULL,
	TabId int NOT NULL,
	AnonymousViews bigint NOT NULL,
	AnonymousTotalSeconds bigint NOT NULL,
	RegisteredViews bigint NOT NULL,
	RegisteredTotalSeconds bigint NOT NULL,
	TotalViews bigint NOT NULL,
	TotalSeconds bigint NOT NULL,
	CONSTRAINT PK_{objectQualifier}Analytics_PageTime_Aggregate PRIMARY KEY NONCLUSTERED (SampleId)
)
GO

CREATE CLUSTERED INDEX IX_{objectQualifier}Analytics_PageTime_Aggregate ON {databaseOwner}{objectQualifier}Analytics_PageTime_Aggregate
	(
		[PortalId],
		[Date]
	)
GO

ALTER TABLE {databaseOwner}{objectQualifier}Analytics_PageTime_Aggregate SET (LOCK_ESCALATION = TABLE)
GO

-- END CHANGE TABLE Analytics_PageTime_Aggregate

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Calculate_PageTime') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Calculate_PageTime
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Calculate_PageTime]
	@PortalId INT,
	@StartDateUtc SMALLDATETIME,
	@EndDateUtc SMALLDATETIME,
	@LocalDate DATE,
	@BatchSize INT = 5 -- number of iterations to do in the loop
AS
BEGIN

	DECLARE @Results AS Table
	(
		[PortalId] INT,
		[Date] DATE,
		[TabId] INT,
		[AnonymousViews] BIGINT,
		[AnonymousTotalSeconds] BIGINT,
		[RegisteredViews] BIGINT,
		[RegisteredTotalSeconds] BIGINT,
		[TotalViews] BIGINT,
		[TotalSeconds] BIGINT
	)

	DECLARE @MinDate SMALLDATETIME = @StartDateUtc
	DECLARE @MaxDate SMALLDATETIME = DATEADD(DAY, 1, @MinDate)
	DECLARE @Date DATE = @LocalDate
	DECLARE @Count INT = 1	

	WHILE(@Count <= @BatchSize AND @MinDate < @EndDateUtc)
	BEGIN
		INSERT INTO @Results
		(
			[PortalId], [Date], [TabId], 
			[AnonymousViews], 
			[AnonymousTotalSeconds], 
			[RegisteredViews], 
			[RegisteredTotalSeconds], 
			[TotalViews], 
			[TotalSeconds]
		)
		SELECT	@PortalId, @Date, [TabId],
				COALESCE(SUM(CASE WHEN UserId < 0 THEN 1 ELSE 0 END), 0), -- @AnonymousViews
				COALESCE(SUM(CASE WHEN UserId < 0 THEN CONVERT(BIGINT,TotalSeconds) ELSE 0 END), 0), -- @AnonymousTotalSeconds
				COALESCE(SUM(CASE WHEN UserId >= 0 THEN 1 ELSE 0 END), 0), -- @RegisteredViews
				COALESCE(SUM(CASE WHEN UserId >= 0 THEN CONVERT(BIGINT,TotalSeconds) ELSE 0 END), 0), -- @RegisteredTotalSeconds
				COALESCE(COUNT(UserId), 0), -- TotalViews
				COALESCE(SUM(CONVERT(BIGINT,TotalSeconds)), 0) -- @TotalSeconds 				
		FROM	{databaseOwner}[{objectQualifier}Analytics_PageTime] WITH (NOLOCK)
		WHERE	
			[PortalId] = @PortalId AND 
			([CreatedOnDate] >= @MinDate AND [CreatedOnDate] < @MaxDate)			
		GROUP BY [TabId]

		--BEGIN UPSERT - for compatibility, MERGE statement should be peceeded and terminated by a semicolon
		; MERGE INTO {databaseOwner}[{objectQualifier}Analytics_PageTime_Aggregate] AS TARGET
		USING @Results AS SOURCE
			ON  TARGET.[PortalId] = SOURCE.[PortalId] AND 
				TARGET.[Date] = SOURCE.[Date] AND 
				TARGET.[TabId] = SOURCE.[TabId]
		WHEN MATCHED THEN
			UPDATE SET
				TARGET.[AnonymousViews] = SOURCE.[AnonymousViews],
				TARGET.[AnonymousTotalSeconds] = SOURCE.[AnonymousTotalSeconds],
				TARGET.[RegisteredViews] = SOURCE.[RegisteredViews],
				TARGET.[RegisteredTotalSeconds] = SOURCE.[RegisteredTotalSeconds],
				TARGET.[TotalViews] = SOURCE.[TotalViews],
				TARGET.[TotalSeconds] = SOURCE.[TotalSeconds]
		WHEN NOT MATCHED THEN
			INSERT ( [PortalId], [Date], [TabId], 
					 [AnonymousViews], [AnonymousTotalSeconds], [RegisteredViews], 
					 [RegisteredTotalSeconds], [TotalViews], [TotalSeconds])
			VALUES ( SOURCE.[PortalId], SOURCE.[Date], SOURCE.[TabId], 
					 SOURCE.[AnonymousViews], SOURCE.[AnonymousTotalSeconds], SOURCE.[RegisteredViews], 
					 SOURCE.[RegisteredTotalSeconds], SOURCE.[TotalViews], SOURCE.[TotalSeconds]);
		--END UPSERT

		--DELETE TEMP RESULTS
		DELETE FROM @Results

		SET @Count = @Count + 1
		SET @MinDate = @MaxDate
		SET @MaxDate = DATEADD(DAY, 1, @MinDate) 
		SET @Date = DATEADD(DAY, 1, @Date)
										
	END	

	SELECT @MinDate AS LastNonExecutedDate
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetMinimumPageTimeLogDate') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetMinimumPageTimeLogDate
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetMinimumPageTimeLogDate 
	@PortalId INT
AS
BEGIN
	DECLARE @MinDate DATETIME
		
	SELECT @MinDate = MIN([CreatedOnDate]) 
	FROM {databaseOwner}[{objectQualifier}Analytics_PageTime] WITH (NOLOCK)
	WHERE PortalId = @PortalId
	
	SELECT COALESCE(@MinDate, GETDATE()) AS MinDate

END
GO

--RENAME Analytics_Get_Aggregate_ModulePageTime TO Analytics_Get_Module_Aggregate_PageTime

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Get_Aggregate_ModulePageTime') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Get_Aggregate_ModulePageTime
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Get_Module_Aggregate_PageTime') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Get_Module_Aggregate_PageTime
GO

--END RENAME

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Get_Module_Aggregate_PageTime]
	@PortalId INT,
	@StartDateUtc SMALLDATETIME,
	@EndDateUtc SMALLDATETIME,	
	@LocalDate DATETIME,
	@Grouping CHAR(1),
	@ModuleTabs NVARCHAR(MAX)
AS
BEGIN

	DECLARE @Results AS Table
	(
		[PortalId] INT,
		[StartDate] DATETIME,
		[EndDate] DATETIME,
		[TabId] INT,
		[AnonymousViews] BIGINT,
		[AnonymousTotalSeconds] BIGINT,
		[RegisteredViews] BIGINT,
		[RegisteredTotalSeconds] BIGINT,
		[TotalViews] BIGINT,
		[TotalSeconds] BIGINT
	)

	DECLARE @Tabs AS TABLE (TabId INT)
	INSERT INTO @Tabs (TabId) SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@ModuleTabs, ',')

	DECLARE @Count INT = 1
	DECLARE @MaxDate DATETIME = @EndDateUtc	
	DECLARE @MinDate DATETIME = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDateUtc, @StartDateUtc, @Count, @Grouping)
		
	DECLARE @LocalDateDiff INT = DATEDIFF(minute, @EndDateUtc, @LocalDate)
	DECLARE @MinLocalDate DATETIME = DATEADD(minute, @LocalDateDiff, @StartDateUtc)	
	DECLARE @LocalMaxDate DATETIME = DATEADD(minute, @LocalDateDiff, @MaxDate)	
	DECLARE @LocalMinDate DATETIME = DATEADD(minute, @LocalDateDiff, @MinDate)	
	
	WHILE @StartDateUtc < @MaxDate
	BEGIN

		IF @Grouping <> 'h'
			BEGIN			
				INSERT INTO @Results
					SELECT @PortalId, @MinDate, @MaxDate, -1 AS [TabId],
						COALESCE(SUM([AnonymousViews]), 0),
						COALESCE(SUM([AnonymousTotalSeconds]), 0),
						COALESCE(SUM([RegisteredViews]), 0),
						COALESCE(SUM([RegisteredTotalSeconds]), 0),
						COALESCE(SUM([TotalViews]), 0),
						COALESCE(SUM([TotalSeconds]), 0)
					FROM {databaseOwner}[{objectQualifier}Analytics_PageTime_Aggregate] WITH (NOLOCK)
					WHERE   [PortalId] = @PortalId AND
							([Date] >= @LocalMinDate AND [Date] < @LocalMaxDate) AND
							[TabId] IN (SELECT TabId FROM @Tabs)
			END
		ELSE
			BEGIN 
				INSERT INTO @Results
					SELECT @PortalId,  @MinDate, @MaxDate, -1 AS [TabId],
						COALESCE(SUM(CASE WHEN UserId < 0 THEN 1 ELSE 0 END), 0), -- @AnonymousViews
						COALESCE(SUM(CASE WHEN UserId < 0 THEN CONVERT(BIGINT,TotalSeconds) ELSE 0 END), 0), -- @AnonymousTotalSeconds
						COALESCE(SUM(CASE WHEN UserId >= 0 THEN 1 ELSE 0 END), 0), -- @RegisteredViews
						COALESCE(SUM(CASE WHEN UserId >= 0 THEN CONVERT(BIGINT,TotalSeconds) ELSE 0 END), 0), -- @RegisteredTotalSeconds
						COALESCE(COUNT(UserId), 0), -- TotalViews
						COALESCE(SUM(CONVERT(BIGINT,TotalSeconds)), 0) -- @TotalSeconds 	
					FROM {databaseOwner}[{objectQualifier}Analytics_PageTime] WITH (NOLOCK)
					WHERE   [PortalId] = @PortalId AND
							([CreatedOnDate] >= @MinDate AND [CreatedOnDate] < @MaxDate) AND
							[TabId] IN (SELECT TabId FROM @Tabs)
			END	
			
		-- INSERT ZERO VALUES 
		IF NOT EXISTS (
			SELECT * FROM @Results r
			WHERE r.[PortalId] = @PortalId AND
			      r.[StartDate] = @MinDate AND
				  r.[EndDate] = @MaxDate)
			INSERT INTO @Results
				SELECT @PortalId,  @MinDate, @MaxDate, -1, 
				0, 0, 0, 0, 0, 0			

		SET @MaxDate = @MinDate
		SET @Count = @Count + 1
		SET @MinDate = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDateUtc, @StartDateUtc, @Count, @Grouping)

		SET @LocalMaxDate = @LocalMinDate
		SET @LocalMinDate = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@LocalDate, @MinLocalDate, @Count, @Grouping)
		
	END

	SELECT [PortalId], [StartDate], [EndDate], MIN([TabId]) AS [TabId],
		COALESCE(SUM([AnonymousViews]), 0) AS [AnonymousViews],
		COALESCE(SUM([AnonymousTotalSeconds]), 0) AS [AnonymousTotalSeconds],
		COALESCE(SUM([RegisteredViews]), 0) AS [RegisteredViews],
		COALESCE(SUM([RegisteredTotalSeconds]), 0) AS [RegisteredTotalSeconds],
		COALESCE(SUM([TotalViews]), 0) AS [TotalViews],
		COALESCE(SUM([TotalSeconds]), 0) AS [TotalSeconds]
	FROM @Results 
	GROUP BY [PortalId], [StartDate], [EndDate]	
	ORDER BY [StartDate]		
END
GO

--RENAME Analytics_Get_Aggregate_PageTime2 TO Analytics_Get_Portal_Aggregate_PageTime

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Get_Aggregate_PageTime2') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Get_Aggregate_PageTime2
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Get_Portal_Aggregate_PageTime') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Get_Portal_Aggregate_PageTime
GO

--END RENAME

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Get_Portal_Aggregate_PageTime]
	@PortalId int,
	@StartDateUtc SMALLDATETIME,
	@EndDateUtc SMALLDATETIME,	
	@LocalDate DATETIME,
	@Grouping CHAR(1)
AS
BEGIN
	DECLARE @Results AS Table
	(
		[PortalId] INT,
		[StartDate] DATETIME,
		[EndDate] DATETIME,
		[TabId] INT,
		[AnonymousViews] BIGINT,
		[AnonymousTotalSeconds] BIGINT,
		[RegisteredViews] BIGINT,
		[RegisteredTotalSeconds] BIGINT,
		[TotalViews] BIGINT,
		[TotalSeconds] BIGINT
	)

	DECLARE @Count INT = 1
	DECLARE @MaxDate DATETIME = @EndDateUtc	
	DECLARE @MinDate DATETIME = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDateUtc, @StartDateUtc, @Count, @Grouping)
		
	DECLARE @LocalDateDiff INT = DATEDIFF(minute, @EndDateUtc, @LocalDate)
	DECLARE @MinLocalDate DATETIME = DATEADD(minute, @LocalDateDiff, @StartDateUtc)	
	DECLARE @LocalMaxDate DATETIME = DATEADD(minute, @LocalDateDiff, @MaxDate)	
	DECLARE @LocalMinDate DATETIME = DATEADD(minute, @LocalDateDiff, @MinDate)	
	
	WHILE @StartDateUtc < @MaxDate
	BEGIN

		IF @Grouping <> 'h'
			BEGIN			
				INSERT INTO @Results
					SELECT @PortalId, @MinDate, @MaxDate, -1 AS [TabId],
						COALESCE(SUM([AnonymousViews]), 0),
						COALESCE(SUM([AnonymousTotalSeconds]), 0),
						COALESCE(SUM([RegisteredViews]), 0),
						COALESCE(SUM([RegisteredTotalSeconds]), 0),
						COALESCE(SUM([TotalViews]), 0),
						COALESCE(SUM([TotalSeconds]), 0)
					FROM {databaseOwner}[{objectQualifier}Analytics_PageTime_Aggregate] WITH (NOLOCK)
					WHERE   [PortalId] = @PortalId AND
							([Date] >= @LocalMinDate AND [Date] < @LocalMaxDate)
			END
		ELSE
			BEGIN 
				INSERT INTO @Results
					SELECT @PortalId, @MinDate, @MaxDate, -1 AS [TabId],
						COALESCE(SUM(CASE WHEN UserId < 0 THEN 1 ELSE 0 END), 0), -- @AnonymousViews
						COALESCE(SUM(CASE WHEN UserId < 0 THEN CONVERT(BIGINT,TotalSeconds) ELSE 0 END), 0), -- @AnonymousTotalSeconds
						COALESCE(SUM(CASE WHEN UserId >= 0 THEN 1 ELSE 0 END), 0), -- @RegisteredViews
						COALESCE(SUM(CASE WHEN UserId >= 0 THEN CONVERT(BIGINT,TotalSeconds) ELSE 0 END), 0), -- @RegisteredTotalSeconds
						COALESCE(COUNT(UserId), 0), -- TotalViews
						COALESCE(SUM(CONVERT(BIGINT,TotalSeconds)), 0) -- @TotalSeconds 	
					FROM {databaseOwner}[{objectQualifier}Analytics_PageTime] WITH (NOLOCK)
					WHERE   [PortalId] = @PortalId AND
							([CreatedOnDate] >= @MinDate AND [CreatedOnDate] < @MaxDate)
			END	
			
		-- INSERT ZERO VALUES 
		INSERT INTO @Results
			SELECT @PortalId,  @MinDate, @MaxDate, -1 AS [TabId], 
			0, 0, 0, 0, 0, 0
			WHERE NOT EXISTS (SELECT * FROM @Results r
								WHERE r.[PortalId] = @PortalId AND
								r.[StartDate] = @MinDate AND
								r.[EndDate] = @MaxDate AND
								r.[TabId] = -1)	
		
		SET @MaxDate = @MinDate
		SET @Count = @Count + 1
		SET @MinDate = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDateUtc, @StartDateUtc, @Count, @Grouping)

		SET @LocalMaxDate = @LocalMinDate
		SET @LocalMinDate = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@LocalDate, @MinLocalDate, @Count, @Grouping)
		
	END

	SELECT * FROM @Results ORDER BY [StartDate]	
END
GO

IF EXISTS (SELECT 1 FROM sys.indexes
				WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLog]')
				AND name = N'IX_{objectQualifier}Analytics_Fact_UserScoringLog_TimeStamp')
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLog_TimeStamp ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLog]
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLog_TimeStamp]
		ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLog] ([TimeStamp])
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_GetLeaders]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetLeaders]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_GetLeaders
    @PortalId INT,
    @PageIndex INT,
    @PageSize INT,
    @SearchText NVARCHAR(255) = '',
	@StartDate DATE
AS
BEGIN
    DECLARE
        @PageLowerBound INT, 
        @PageUpperBound INT, 
        @RowsToReturn int

	DECLARE @Date INT = CAST(convert(varchar, @StartDate, 112) as int);

    exec {databaseOwner}{objectQualifier}CalculatePagingInformation @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output

    IF @PageLowerBound > 0
        SELECT @PageLowerBound = @PageLowerBound + 1

    IF @RowsToReturn > @PageSize
        SET @RowsToReturn = @PageSize
        
    ;WITH InnerLeaderList AS
    (
        SELECT
            u.UserId AS [UserId],
            COALESCE(SUM(ru.ReputationPoints), 0) AS [ReputationPoints],
			u.CreatedOnDate AS [MemberSince]
        FROM {databaseOwner}{objectQualifier}Users u
            JOIN {databaseOwner}{objectQualifier}UserPortals up ON up.UserId = u.UserID
            LEFT OUTER JOIN {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup ru ON u.UserId = ru.UserID AND up.PortalId = ru.PortalId
				AND (@Date IS NULL OR ru.Date >= @Date OR ru.Date IS NULL)
        WHERE (@SearchText IS NULL OR LEN(@SearchText) = 0 OR u.DisplayName LIKE '%' + @SearchText + '%')
          AND (up.PortalId = @PortalId)
          AND (up.IsDeleted = 0 AND up.Authorised = 1)
          AND (u.IsDeleted = 0)		 
		GROUP BY u.UserId, u.CreatedOnDate
    ),
    OuterLeaderList AS
    (
        SELECT UserId, ReputationPoints, MemberSince,
                ROW_NUMBER() OVER (ORDER BY InnerLeaderList.[ReputationPoints] DESC, InnerLeaderList.[UserId] ASC) AS [RowNumber]
        FROM InnerLeaderList)
    SELECT TOP (@RowsToReturn) UserId, ReputationPoints, MemberSince, (SELECT COUNT(*) FROM OuterLeaderList) TotalLeaders
	FROM OuterLeaderList
    WHERE RowNumber >= @PageLowerBound AND RowNumber <= @PageUpperBound 
    ORDER BY RowNumber ASC
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_GetLeadersWithinFriends]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetLeadersWithinFriends]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetLeadersWithinFriends]
	@PortalId INT,
    @UserId INT,    
    @PageIndex INT,
    @PageSize INT,
    @SearchText NVARCHAR(255) = '',
	@StartDate DATE
AS
BEGIN
    DECLARE
        @PageLowerBound INT, 
        @PageUpperBound INT, 
        @RowsToReturn int

	DECLARE @Date INT = CAST(convert(varchar, @StartDate, 112) as int);

    exec {databaseOwner}{objectQualifier}CalculatePagingInformation @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output

    IF @PageLowerBound > 0
        SELECT @PageLowerBound = @PageLowerBound + 1

    IF @RowsToReturn > @PageSize
        SET @RowsToReturn = @PageSize

    ;WITH InnerLeaderList AS
    (
        SELECT
            u.UserId AS [UserId],
            COALESCE(SUM(ru.ReputationPoints), 0) AS [ReputationPoints],
			u.CreatedOnDate AS [MemberSince]
        FROM {databaseOwner}[{objectQualifier}UserRelationships] ur
            INNER JOIN {databaseOwner}[{objectQualifier}Relationships] r ON r.RelationshipID = ur.RelationshipID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}UserPortals] up ON up.UserId = CASE WHEN ur.[UserID] = @UserId THEN ur.[RelatedUserID] ELSE ur.[UserID] END
            LEFT OUTER JOIN {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup ru ON CASE WHEN ur.[UserID] = @UserId THEN ur.[RelatedUserID] ELSE ur.[UserID] END = ru.UserID AND up.PortalId = ru.PortalId
				AND (@Date IS NULL OR ru.Date >= @Date OR ru.Date IS NULL)
            LEFT OUTER JOIN {databaseOwner}[{objectQualifier}Users] u ON u.UserID = CASE WHEN ur.[UserID] = @UserId THEN ur.[RelatedUserID] ELSE ur.[UserID] END			
        WHERE (@SearchText IS NULL OR LEN(@SearchText) = 0 OR u.DisplayName LIKE '%' + @SearchText + '%')
		  AND (up.PortalID = @PortalId)
          AND (up.IsDeleted = 0 AND up.Authorised = 1)
          AND (ur.UserID = @UserId OR ur.RelatedUserID = @UserId)
          AND r.Name = 'Friends'
          AND ur.Status = 2 --Accepted
          AND u.IsDeleted = 0		
        GROUP BY u.UserId, u.CreatedOnDate

        UNION -- include self

        SELECT
            @UserId AS [UserId],
            COALESCE(SUM(ru.ReputationPoints), 0) AS [ReputationPoints],
			u.CreatedOnDate AS [MemberSince]
        FROM {databaseOwner}[{objectQualifier}Users] u
            LEFT OUTER JOIN {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup ru ON u.UserId = ru.UserID
        WHERE (@SearchText IS NULL OR LEN(@SearchText) = 0 OR u.DisplayName LIKE '%' + @SearchText + '%')
		  AND (u.UserId = @UserId)
          AND (u.IsDeleted = 0)
		  AND (ru.PortalId = @PortalID)
		  AND (@Date IS NULL OR ru.Date >= @Date)
		GROUP BY u.CreatedOnDate
    ),
    OuterLeaderList AS
    (
        SELECT UserId, ReputationPoints, MemberSince,
                ROW_NUMBER() OVER (ORDER BY InnerLeaderList.[ReputationPoints] DESC, InnerLeaderList.[UserId] ASC) AS [RowNumber]
        FROM InnerLeaderList)
    SELECT TOP (@RowsToReturn) UserId, ReputationPoints, MemberSince, (SELECT COUNT(*) FROM OuterLeaderList) TotalLeaders
	FROM OuterLeaderList
    WHERE RowNumber >= @PageLowerBound AND RowNumber <= @PageUpperBound 
    ORDER BY RowNumber ASC
END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_GetLeadersByGroup]', N'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetLeadersByGroup]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetLeadersByGroup]
    @PortalId INT,
    @RoleId INT,
    @PageIndex INT,
    @PageSize INT,
    @SearchText NVARCHAR(255) = '',
	@StartDate DATE
AS
BEGIN
    DECLARE
        @PageLowerBound INT,
        @PageUpperBound INT,
        @RowsToReturn INT

	DECLARE @Date INT = CAST(convert(varchar, @StartDate, 112) as int);

    exec {databaseOwner}{objectQualifier}CalculatePagingInformation @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output

    IF @PageLowerBound > 0
        SELECT @PageLowerBound = @PageLowerBound + 1

    IF @RowsToReturn > @PageSize
        SET @RowsToReturn = @PageSize

    ;WITH InnerLeaderList
    AS (
        SELECT  
			u.UserId AS [UserId],
            COALESCE(SUM(ru.ReputationPoints), 0) AS [ReputationPoints],
			ur.LastModifiedOnDate AS [MemberSince]
        FROM   {databaseOwner}{objectQualifier}Users u
			INNER JOIN {databaseOwner}{objectQualifier}UserRoles ur ON ur.UserId = u.UserID
            JOIN {databaseOwner}{objectQualifier}UserPortals up ON up.UserId = u.UserID
            LEFT OUTER JOIN {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup ru ON u.UserId = ru.UserID AND up.PortalId = ru.PortalId
				 AND (@Date IS NULL OR ru.Date >= @Date OR ru.Date IS NULL)
        WHERE (@SearchText IS NULL OR LEN(@SearchText) = 0 OR u.DisplayName LIKE '%' + @SearchText + '%')
          AND (up.PortalId = @PortalId)
		  AND (ur.RoleID = @RoleId)
		  AND (ur.Status = 1)
          AND (up.IsDeleted = 0 AND up.Authorised = 1)
          AND (u.IsDeleted = 0)		 
		GROUP BY u.UserId, ur.LastModifiedOnDate
      ),
    OuterLeaderList AS
    (
        SELECT UserId, ReputationPoints, MemberSince,
                ROW_NUMBER() OVER (ORDER BY InnerLeaderList.[ReputationPoints] DESC, InnerLeaderList.[UserId] ASC) AS [RowNumber]
        FROM InnerLeaderList)
    SELECT TOP (@RowsToReturn) UserId, ReputationPoints, MemberSince, (SELECT COUNT(*) FROM OuterLeaderList) TotalLeaders
	FROM OuterLeaderList
    WHERE RowNumber >= @PageLowerBound AND RowNumber <= @PageUpperBound 
    ORDER BY RowNumber ASC
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_GetUserPage]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetUserPage]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetUserPage]
	@PortalId INT,
    @UserId INT,
    @PageSize INT,
    @SearchText NVARCHAR(255) = '',
	@StartDate DATE
AS
BEGIN
    SET NOCOUNT ON
        
	DECLARE @Date INT = CAST(convert(varchar, @StartDate, 112) as int);

    ;WITH InnerLeaderList AS
    (
        SELECT
            u.UserId AS [UserId],
            COALESCE(SUM(ru.ReputationPoints), 0) AS [ReputationPoints],
			u.CreatedOnDate AS [MemberSince],
			ROW_NUMBER() OVER (ORDER BY COALESCE(SUM(ru.ReputationPoints), 0) DESC) AS [RowNumber]
        FROM {databaseOwner}{objectQualifier}Users u
            JOIN {databaseOwner}{objectQualifier}UserPortals up ON up.UserId = u.UserID
            LEFT OUTER JOIN {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup ru ON u.UserId = ru.UserID AND up.PortalId = ru.PortalId
				AND (@Date IS NULL OR ru.Date >= @Date OR ru.Date IS NULL)
        WHERE (@SearchText IS NULL OR LEN(@SearchText) = 0 OR u.DisplayName LIKE '%' + @SearchText + '%')
          AND (up.PortalId = @PortalId)
          AND (up.IsDeleted = 0 AND up.Authorised = 1)
          AND (u.IsDeleted = 0)		 
		GROUP BY u.UserId, u.CreatedOnDate
    )
    SELECT UserId, ReputationPoints, RowNumber [Rank], MemberSince, (SELECT COUNT(*) FROM InnerLeaderList) TotalLeaders
    FROM InnerLeaderList
	WHERE RowNumber > ISNULL(((SELECT RowNumber FROM InnerLeaderList WHERE [UserId] = @UserId) / @PageSize), 0) * @PageSize
	  AND RowNumber <= ISNULL(((SELECT RowNumber FROM InnerLeaderList WHERE [UserId] = @UserId) / @PageSize), 0) * @PageSize + @PageSize
	--ORDER BY RowNumber
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_GetUserPageWithinGroup]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetUserPageWithinGroup]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetUserPageWithinGroup]
	@PortalId INT,
    @UserId INT,
    @RoleId INT,
    @PageSize INT,
    @SearchText NVARCHAR(255) = '',
	@StartDate DATE
AS
BEGIN
    SET NOCOUNT ON

	DECLARE @Date INT = CAST(convert(varchar, @StartDate, 112) as int);

    ;WITH InnerLeaderList
    AS (
        SELECT  
			u.UserId AS [UserId],
            COALESCE(SUM(ru.ReputationPoints), 0) AS [ReputationPoints],
			ur.LastModifiedOnDate AS [MemberSince],
            ROW_NUMBER() OVER (ORDER BY COALESCE(SUM(ru.ReputationPoints), 0) DESC) AS [RowNumber]
        FROM   {databaseOwner}{objectQualifier}Users u
			INNER JOIN {databaseOwner}{objectQualifier}UserRoles ur ON ur.UserId = u.UserID
            JOIN {databaseOwner}{objectQualifier}UserPortals up ON up.UserId = u.UserID
            LEFT OUTER JOIN {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup ru ON u.UserId = ru.UserID AND up.PortalId = ru.PortalId
				 AND (@Date IS NULL OR ru.Date >= @Date OR ru.Date IS NULL)
        WHERE (@SearchText IS NULL OR LEN(@SearchText) = 0 OR u.DisplayName LIKE '%' + @SearchText + '%')
          AND (up.PortalId = @PortalId)
		  AND (ur.RoleID = @RoleId)
		  AND (ur.Status = 1)
          AND (up.IsDeleted = 0 AND up.Authorised = 1)
          AND (u.IsDeleted = 0)		 
		GROUP BY u.UserId, ur.LastModifiedOnDate
      )
    SELECT UserId, ReputationPoints, RowNumber [Rank], MemberSince, (SELECT COUNT(*) FROM InnerLeaderList) TotalLeaders
    FROM InnerLeaderList
	WHERE RowNumber > ISNULL(((SELECT RowNumber FROM InnerLeaderList WHERE [UserId] = @UserId) / @PageSize), 0) * @PageSize
	  AND RowNumber <= ISNULL(((SELECT RowNumber FROM InnerLeaderList WHERE [UserId] = @UserId) / @PageSize), 0) * @PageSize + @PageSize
	--ORDER BY RowNumber
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_GetUserPageWithinFriends]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetUserPageWithinFriends]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetUserPageWithinFriends]
	@PortalId INT,
    @UserId INT,
    @PageSize INT,
    @SearchText NVARCHAR(255) = '',
	@StartDate DATE
AS
BEGIN
    SET NOCOUNT ON

	DECLARE @Date INT = CAST(convert(varchar, @StartDate, 112) as int);

    ;WITH InnerLeaderList AS
    (
        SELECT
            u.UserId AS [UserId],
            COALESCE(SUM(ru.ReputationPoints), 0) AS [ReputationPoints],
			u.CreatedOnDate AS [MemberSince]
        FROM {databaseOwner}[{objectQualifier}UserRelationships] ur
            INNER JOIN {databaseOwner}[{objectQualifier}Relationships] r ON r.RelationshipID = ur.RelationshipID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}UserPortals] up ON up.UserId = CASE WHEN ur.[UserID] = @UserId THEN ur.[RelatedUserID] ELSE ur.[UserID] END
            LEFT OUTER JOIN {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup ru ON CASE WHEN ur.[UserID] = @UserId THEN ur.[RelatedUserID] ELSE ur.[UserID] END = ru.UserID AND up.PortalId = ru.PortalId
				AND (@Date IS NULL OR ru.Date >= @Date OR ru.Date IS NULL)
            LEFT OUTER JOIN {databaseOwner}[{objectQualifier}Users] u ON u.UserID = CASE WHEN ur.[UserID] = @UserId THEN ur.[RelatedUserID] ELSE ur.[UserID] END			
        WHERE (@SearchText IS NULL OR LEN(@SearchText) = 0 OR u.DisplayName LIKE '%' + @SearchText + '%')
		  AND (up.PortalID = @PortalId)
          AND (up.IsDeleted = 0 AND up.Authorised = 1)
          AND (ur.UserID = @UserId OR ur.RelatedUserID = @UserId)
          AND r.Name = 'Friends'
          AND ur.Status = 2 --Accepted
          AND u.IsDeleted = 0		
        GROUP BY u.UserId, u.CreatedOnDate

        UNION -- include self

        SELECT
            @UserId AS [UserId],
            COALESCE(SUM(ru.ReputationPoints), 0) AS [ReputationPoints],
			u.CreatedOnDate AS [MemberSince]
        FROM {databaseOwner}[{objectQualifier}Users] u
            LEFT OUTER JOIN {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup ru ON u.UserId = ru.UserID
        WHERE (@SearchText IS NULL OR LEN(@SearchText) = 0 OR u.DisplayName LIKE '%' + @SearchText + '%')
		  AND (u.UserId = @UserId)
          AND (u.IsDeleted = 0)
		  AND (ru.PortalId = @PortalID)
		  AND (@Date IS NULL OR ru.Date >= @Date)
		GROUP BY u.CreatedOnDate
    ),
    OuterLeaderList AS
    (
        SELECT UserId, ReputationPoints, MemberSince,
                ROW_NUMBER() OVER (ORDER BY InnerLeaderList.[ReputationPoints] DESC, InnerLeaderList.[UserId] ASC) AS [RowNumber]
        FROM InnerLeaderList)

	SELECT UserId, ReputationPoints, RowNumber [Rank], MemberSince, (SELECT COUNT(*) FROM OuterLeaderList) TotalLeaders
    FROM OuterLeaderList
	WHERE RowNumber > ISNULL(((SELECT RowNumber FROM OuterLeaderList WHERE [UserId] = @UserId) / @PageSize), 0) * @PageSize
	  AND RowNumber <= ISNULL(((SELECT RowNumber FROM OuterLeaderList WHERE [UserId] = @UserId) / @PageSize), 0) * @PageSize + @PageSize
	--ORDER BY RowNumber
END
GO

