/***** CONTENT-5456: update schedule name to Analytics Engage. *****/
DECLARE @AnalyticsSchedulerType varchar(512)
SET @AnalyticsSchedulerType =
	N'DotNetNuke.Professional.Analytics.Components.Tasks.AnalyticsTask, DotNetNuke.Professional.Analytics'

IF EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}Schedule] WHERE [TypeFullName] = @AnalyticsSchedulerType)
BEGIN
	UPDATE {databaseOwner}[{objectQualifier}Schedule]
		SET [FriendlyName] = N'Analytics Engage'
        WHERE [TypeFullName] = @AnalyticsSchedulerType
END
GO

/***** SOCIAL-4380: Divide by zero error in analytics *****/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Get_User_Score]', N'FN') IS NOT NULL
	DROP FUNCTION {databaseOwner}{objectQualifier}Analytics_Get_User_Score
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}Analytics_Get_User_Score](
	@PortalId int,
	@UserId int,
	@GoalList varchar(64),
	@LowerBound datetime,
	@UpperBound datetime)
		RETURNS decimal
AS
BEGIN
	DECLARE @FriendCount int
	DECLARE @Posts int
	DECLARE @Likes int
	DECLARE @ViewCount int
	DECLARE @Responses int
	DECLARE @AcceptedAnswers int
	DECLARE @DeliveredIdeas int
	DECLARE @ActiveEvents int
	DECLARE @FlaggedContent int
	DECLARE @AvgTime bigint
	DECLARE @SiteTime bigint
	DECLARE @Logins int
	DECLARE @Votes int
	DECLARE	@IdeasVotes int
	DECLARE @AnswersVotes int

	;WITH innerList AS(
		SELECT DISTINCT
				CASE WHEN ur.[UserID] = @UserId THEN ur.[RelatedUserID] ELSE ur.[UserID] END AS [UserId]
		FROM {databaseOwner}[{objectQualifier}UserRelationships] ur WITH (NOLOCK)
			INNER JOIN {databaseOwner}[{objectQualifier}Relationships] r WITH (NOLOCK) ON r.RelationshipID = ur.RelationshipID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}Mechanics_UserScoring] us WITH (NOLOCK) ON CASE WHEN ur.RelatedUserID = @UserId THEN ur.UserID ELSE ur.RelatedUserID END = us.UserId
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}Users] u WITH (NOLOCK) ON u.UserID = CASE WHEN ur.[UserID] = @UserId THEN ur.[RelatedUserID] ELSE ur.[UserID] END
		WHERE (ur.UserID = @UserId OR ur.RelatedUserID = @UserId) AND r.Name = 'Friends' AND ur.Status = 2 --Accepted
		  AND (ur.CreatedOnDate BETWEEN @LowerBound AND @UpperBound)
	)
	SELECT @FriendCount = COALESCE(COUNT(*), 0) FROM innerList

	DECLARE @ContentTypes TABLE(ContentTypeId INT)

	INSERT INTO @ContentTypes (ContentTypeId)
	SELECT	ContentTypeID
	FROM	{databaseOwner}{objectQualifier}ContentTypes
	WHERE	ContentType IN
				('DNNCorp_Answers_Question',
				 'DNNCorp_Blogs_Entry',
				 'DNNCorp_Discussions_Topic',
				 'DNNCorp_Ideas_Idea',
				 'DNNCorp_JournalGroup',
				 'DNNCorp_JournalProfile',
				 'DNNCorp_SocialEvents_Event')

	SELECT	@Posts = COALESCE(COUNT(*), 0)
	FROM	{databaseOwner}{objectQualifier}ContentItems WITH (NOLOCK)
	WHERE	CreatedByUserID = @UserId AND ContentTypeID IN (SELECT ContentTypeId FROM @ContentTypes)
	AND		CreatedOnDate >= @LowerBound AND CreatedOnDate <= @UpperBound

	-- Find out how many likes posts by this user have received.
	SELECT @Likes = COALESCE(JournalXML.value('count(//likes/u)', 'int'), 0)
	FROM {databaseOwner}{objectQualifier}Journal_Data jd WITH (NOLOCK)
	INNER JOIN {databaseOwner}{objectQualifier}Journal j WITH (NOLOCK) ON j.JournalId = jd.JournalId
	INNER JOIN {databaseOwner}{objectQualifier}ContentItems ci WITH (NOLOCK) ON ci.ContentItemID = j.ContentItemId
	WHERE ci.CreatedByUserID = @UserId AND j.DateCreated >= @LowerBound AND j.DateCreated <= @UpperBound

	-- Find out how many views posts by this user have received.
	;WITH cteContentItems
		AS (Select ContentItemID
			From {databaseOwner}[{objectQualifier}ContentItems] WITH (NOLOCK)
			Where CreatedByUserID = @UserId
			  And CreatedOnDate >= @LowerBound
			  And CreatedOnDate <= @UpperBound
		),
	cteUserViews(ViewCount)
		AS (
				SELECT COALESCE(SUM([ViewCount]), 0) AS [ViewCount]
				FROM {databaseOwner}[{objectQualifier}Answers_Post] ap WITH (NOLOCK)
					INNER JOIN cteContentItems ci On ci.ContentItemID = ap.ContentItemID
			UNION
				SELECT COALESCE(SUM([Views]), 0) AS [ViewCount]
				FROM {databaseOwner}[{objectQualifier}Ideas_Idea] ii WITH (NOLOCK)
					INNER JOIN cteContentItems ci On ci.ContentItemID = ii.ContentItemID
			UNION
				SELECT COALESCE(SUM([ViewCount]), 0) AS [ViewCount]
				FROM {databaseOwner}[{objectQualifier}Discussions_Topic] dt WITH (NOLOCK)
					INNER JOIN cteContentItems ci On ci.ContentItemID = dt.ContentItemID
			UNION
				SELECT COALESCE(SUM([ViewCount]), 0) AS [ViewCount]
				FROM {databaseOwner}[{objectQualifier}SocialEvents_Event] se WITH (NOLOCK)
					INNER JOIN cteContentItems ci On ci.ContentItemID = se.ContentItemID
			UNION
				SELECT COALESCE(SUM([Views]), 0) AS [ViewCount]
				FROM {databaseOwner}[{objectQualifier}Blogs_Entry] be WITH (NOLOCK)
					INNER JOIN cteContentItems ci On ci.ContentItemID = be.ContentItemID
			UNION
				SELECT COALESCE(SUM([ViewCount]), 0) AS [ViewCount]
				FROM {databaseOwner}[{objectQualifier}Wiki_Article] wa WITH (NOLOCK)
					INNER JOIN cteContentItems ci On ci.ContentItemID = wa.ContentItemID
		)
	SELECT @ViewCount = COALESCE(SUM([ViewCount]), 0) From cteUserViews

	-- Find out how many responses that posts by this user have received.
	SELECT	@Responses = COALESCE(COUNT(*), 0)
	FROM	{databaseOwner}[{objectQualifier}Journal_Comments] jc WITH (NOLOCK)
	INNER JOIN {databaseOwner}[{objectQualifier}Journal] j WITH (NOLOCK) ON j.JournalId = jc.JournalId
	INNER JOIN {databaseOwner}[{objectQualifier}ContentItems] ci WITH (NOLOCK) ON ci.ContentItemID = j.ContentItemId
	WHERE	ci.CreatedByUserID = @UserId AND jc.DateCreated >= @LowerBound AND jc.DateCreated <= @UpperBound

	-- Find out how many answers they've posted that have been accepted.
	SELECT	@AcceptedAnswers = COALESCE(COUNT(*), 0)
	FROM	{databaseOwner}[{objectQualifier}Answers_Post] WITH (NOLOCK)
	WHERE	CreatedUserId = @UserId AND ParentId > 0 AND CreatedDate >= @LowerBound AND CreatedDate <= @UpperBound

	-- Find out how many ideas have been placed into Delivered state.
	SELECT	@DeliveredIdeas = COALESCE(COUNT(*), 0)
	FROM	{databaseOwner}{objectQualifier}Ideas_Idea i WITH (NOLOCK)
	INNER JOIN {databaseOwner}{objectQualifier}ContentItems ci WITH (NOLOCK) ON ci.ContentItemID = i.ContentItemId
	WHERE	ci.CreatedByUserID = @UserId
	AND		i.Status = 6

	-- Find out how many events are active.
	SELECT	@ActiveEvents = COALESCE(COUNT(*), 0)
	FROM	{databaseOwner}{objectQualifier}SocialEvents_Event se WITH (NOLOCK)
	INNER JOIN {databaseOwner}{objectQualifier}ContentItems ci WITH (NOLOCK) ON ci.ContentItemID = se.ContentItemId
	WHERE	ci.CreatedByUserID = @UserId
	AND		se.StartTime >= @LowerBound AND se.StartTime <= @UpperBound AND [Approved] = 1

	-- Find out how much content has been flagged.
	;WITH pagerCount AS (
		SELECT			DISTINCT musl.[ContentItemId]
		FROM			{databaseOwner}[{objectQualifier}Mechanics_UserScoringLog] musl WITH (NOLOCK)
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}ContentItems] ci WITH (NOLOCK) ON ci.[ContentItemID] = musl.[ContentItemId]
		WHERE			musl.[UserId] = @UserId AND musl.[CreatedOnDate] >= @LowerBound AND musl.[CreatedOnDate] <= @UpperBound
		AND				ci.[ContentTypeID] > 3
		AND				{databaseOwner}{objectQualifier}Mechanics_ScoringActionIsOfActionType(musl.[ScoringActionDefId], 5) = 1)
	SELECT @FlaggedContent = COALESCE(COUNT(*), 0) FROM pagerCount

	-- How much time they've spent on each page on average.

	DECLARE @LowerBoundInt INT = Year(@LowerBound) * 1000000 + Month(@LowerBound) * 10000 + Day(@LowerBound) * 100 + DATEPART(Hour, @LowerBound);
	DECLARE @UpperBoundInt INT = Year(@UpperBound) * 1000000 + Month(@UpperBound) * 10000 + Day(@UpperBound) * 100 + DATEPART(Hour, @UpperBound);

	DECLARE @TotalViews INT = (SELECT  COALESCE(SUM(PageViews), 1)
	FROM	{databaseOwner}{objectQualifier}Analytics_Fact_Users WITH (NOLOCK)
	WHERE	UserId = @UserId AND PortalId = @PortalId AND (DateId BETWEEN @LowerBoundInt AND @UpperBoundInt))

	SELECT	@SiteTime = COALESCE(SUM(CONVERT(bigint,COALESCE(TimeOnPage, 0))), 0)
	FROM	{databaseOwner}{objectQualifier}Analytics_Fact_Users WITH (NOLOCK)
	WHERE	UserId = @UserId AND Portalid = @PortalId AND (DateId BETWEEN @LowerBoundInt AND @UpperBoundInt)

	IF @TotalViews > 0
		SET @AvgTime = COALESCE(@SiteTime / @TotalViews, 0)
	ELSE
		SET @AvgTime = 0

	;WITH loginCount AS(
		SELECT	DISTINCT usl.UserId,
				(SELECT		COUNT(*)
				 FROM		{databaseOwner}[{objectQualifier}Mechanics_UserScoringLog] WITH (NOLOCK)
				 WHERE		UserId = usl.UserId AND PortalId = @PortalId AND CreatedOnDate >= @LowerBound AND CreatedOnDate <= @UpperBound) AS Logins
		FROM {databaseOwner}[{objectQualifier}Mechanics_UserScoringLog] usl WITH (NOLOCK)
		RIGHT JOIN {databaseOwner}[{objectQualifier}Mechanics_ScoringActionDefinition] sad WITH (NOLOCK) ON sad.ScoringActionDefId = usl.ScoringActionDefId
		WHERE sad.ActionName = 'Login' AND usl.UserId = @UserId
		GROUP BY usl.UserId)
	SELECT @Logins = COALESCE(SUM(CAST([Logins] AS DECIMAL)), 0) FROM loginCount

	SELECT		@AnswersVotes = COALESCE(SUM(VoteTypeId), 0)
	FROM		{databaseOwner}{objectQualifier}Answers_Vote v
	INNER JOIN	{databaseOwner}{objectQualifier}Answers_Post p ON p.PostId = v.PostId
	WHERE		p.PortalId = @PortalId AND p.CreatedUserId = @UserId

	SELECT		@IdeasVotes = SUM(COALESCE(Votes, 0))
	FROM		{databaseOwner}{objectQualifier}Ideas_Idea i
	INNER JOIN	{databaseOwner}{objectQualifier}ContentItems ci ON ci.ContentItemID = i.ContentItemId
	WHERE		ci.CreatedByUserID = @UserId

	SELECT	@Votes = COALESCE(@AnswersVotes, 0) + COALESCE(@IdeasVotes, 0)

	-- Total it all up.
	DECLARE @Total decimal
	SELECT @Total = {databaseOwner}{objectQualifier}Analytics_Get_Score(
		@PortalId,
		@GoalList,
		COALESCE(@FriendCount, 0),
		COALESCE(@Posts, 0),
		COALESCE(@Likes, 0),
		COALESCE(@ViewCount, 0),
		COALESCE(@Responses, 0),
		COALESCE(@AcceptedAnswers, 0),
		COALESCE(@DeliveredIdeas, 0),
		COALESCE(@ActiveEvents, 0),
		COALESCE(@FlaggedContent, 0),
		COALESCE(@AvgTime, 0),
		COALESCE(@SiteTime, 0),
		COALESCE(@Logins, 0),
		COALESCE(@Votes, 0))

	RETURN COALESCE(@Total, 0)
END
GO

