-- =========================================================
-- Analytics Activities
-- =========================================================
-- RENAME TABLE
IF EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Activities') and OBJECTPROPERTY(id, N'IsTable') = 1)
BEGIN	
	EXEC sp_rename '{objectQualifier}Analytics_Activities', '{objectQualifier}Analytics_Activities_OLD'
END
GO

-- RENAME Primary Key
IF EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id = object_id(N'PK_{objectQualifier}Analytics_Activities'))
BEGIN	
	EXEC sp_rename 'PK_{objectQualifier}Analytics_Activities', 'PK_{objectQualifier}Analytics_Activities_OLD'
END
GO

-- CREATE NEW TABLE
IF NOT EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Activities') and OBJECTPROPERTY(id, N'IsTable') = 1)
BEGIN
	CREATE TABLE {databaseOwner}[{objectQualifier}Analytics_Activities](
		[SampleId] int NOT NULL IDENTITY (1, 1),
		[PortalId] int NOT NULL,
		[LowerBound] smalldatetime NOT NULL,
		[UpperBound] smalldatetime NOT NULL,
		[ContentTypeId] int NOT NULL,
		[Create] bigint NOT NULL,
		[Search] bigint NOT NULL,
		[Edit] bigint NOT NULL,
		[Delete] bigint NOT NULL,
		[View] bigint NOT NULL
		CONSTRAINT [PK_{objectQualifier}Analytics_Activities] PRIMARY KEY NONCLUSTERED 
		(
			[SampleId] ASC
		)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
	)

	CREATE CLUSTERED INDEX IX_{objectQualifier}Analytics_Activities ON {databaseOwner}[{objectQualifier}Analytics_Activities]
	(
		[PortalId] ASC,
		[LowerBound] DESC,
		[UpperBound] DESC,
		[ContentTypeId] ASC
	)WITH (STATISTICS_NORECOMPUTE = OFF, DROP_EXISTING = OFF, ONLINE = OFF)
END
GO
IF EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Activities_OLD') and OBJECTPROPERTY(id, N'IsTable') = 1)
BEGIN	
	-- COPY DATA TO NEW TABLE
	SET IDENTITY_INSERT {databaseOwner}[{objectQualifier}Analytics_Activities] ON
	INSERT INTO [{objectQualifier}Analytics_Activities] ([SampleId], [PortalId], [LowerBound], [UpperBound], [ContentTypeId], [Create], [Search], [Edit], [Delete], [View])
	SELECT [SampleId], [PortalId], [LowerBound], [UpperBound], [ContentTypeId], [Create], [Search], [Edit], [Delete], [View] FROM  {databaseOwner}[{objectQualifier}Analytics_Activities_OLD]
	SET IDENTITY_INSERT {databaseOwner}[{objectQualifier}Analytics_Activities] OFF

	-- DELETE OLD TABLE
	DROP TABLE {databaseOwner}[{objectQualifier}Analytics_Activities_OLD]
END
GO

-- *********************************
-- Analytics_Calculate_User [Update new Influence columns instead of XML]
-- *********************************
IF EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Calculate_User') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Calculate_User
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Calculate_User]
	@PortalId int,
	@UserId int,
	@InfluenceGoal int
AS
BEGIN
	DECLARE @TotalSeconds bigint
	DECLARE @Engagement xml
	DECLARE @Contribution xml
	DECLARE @Activity xml
	DECLARE @Login xml

	DECLARE @ExistingEngagement xml
	DECLARE @ExistingContribution xml
	DECLARE @ExistingActivity xml
	DECLARE @ExistingLogin xml

	DECLARE @InfluenceDaily INT
	DECLARE @InfluenceWeekly INT
	DECLARE @InfluenceMonthly INT
	DECLARE @InfluenceYearly INT

	DECLARE @LowerDaily DATETIME
	DECLARE @UpperDaily DATETIME
	DECLARE @LowerWeekly DATETIME
	DECLARE @LowerMonthly DATETIME
	DECLARE @LowerYearly DATETIME

	SET @UpperDaily = getutcdate()
	SET @LowerDaily = dateadd(day, -1, @UpperDaily)
	SET @LowerWeekly = dateadd(day, -7, @UpperDaily)
	SET @LowerMonthly = dateadd(day, -28, @UpperDaily)
	SET @LowerYearly = dateadd(day, -364, @UpperDaily)

	-- Get all the Influence Data
	SELECT	@InfluenceDaily = {databaseOwner}{objectQualifier}Analytics_Calculate_User_Influence(@PortalId, @UserId, @LowerDaily, @UpperDaily)
	SELECT	@InfluenceWeekly = {databaseOwner}{objectQualifier}Analytics_Calculate_User_Influence(@PortalId, @UserId, @LowerWeekly, @UpperDaily)
	SELECT	@InfluenceMonthly = {databaseOwner}{objectQualifier}Analytics_Calculate_User_Influence(@PortalId, @UserId, @LowerMonthly, @UpperDaily)
	SELECT	@InfluenceYearly = {databaseOwner}{objectQualifier}Analytics_Calculate_User_Influence(@PortalId, @UserId, @LowerYearly, @UpperDaily)

	--Convert to Percentage
	IF @InfluenceGoal = 0
		SET @InfluenceGoal = 2000

	SET @InfluenceDaily = (@InfluenceDaily * 100) / @InfluenceGoal
	SET @InfluenceWeekly = (@InfluenceWeekly * 100) / @InfluenceGoal
	SET @InfluenceMonthly = (@InfluenceMonthly * 100) / @InfluenceGoal
	SET @InfluenceYearly = (@InfluenceYearly * 100) / @InfluenceGoal

	SELECT	@TotalSeconds = COALESCE(SUM(CONVERT(bigint,COALESCE(TotalSeconds, 0))), 0)
	FROM	{databaseOwner}[{objectQualifier}Analytics_PageTime]
	WHERE	[PortalId] = @PortalId AND [UserId] = @UserId

	-- Generate user time series XML documents
	SELECT	@Engagement = {databaseOwner}{objectQualifier}Analytics_Generate_Engagement_TimeSeries(@PortalId, @UserId)
	SELECT	@Contribution = {databaseOwner}{objectQualifier}Analytics_Generate_Contribution_TimeSeries(@PortalId, @UserId)
	SELECT	@Activity = {databaseOwner}{objectQualifier}Analytics_Generate_Activity_TimeSeries(@PortalId, @UserId)
	SELECT	@Login = {databaseOwner}{objectQualifier}Analytics_Generate_Login_TimeSeries(@PortalId, @UserId)

	SELECT	@ExistingEngagement = N'<TimeSeries />';
	SELECT	@ExistingContribution = N'<TimeSeries />';
	SELECT	@ExistingActivity = N'<TimeSeries />';
	SELECT	@ExistingLogin = N'<TimeSeries />';

	SET		@ExistingEngagement.modify('insert sql:variable("@Engagement") into (/TimeSeries)[1]')
	SET		@ExistingContribution.modify('insert sql:variable("@Contribution") into (/TimeSeries)[1]')
	SET		@ExistingActivity.modify('insert sql:variable("@Activity") into (/TimeSeries)[1]')
	SET		@ExistingLogin.modify('insert sql:variable("@Login") into (/TimeSeries)[1]')

	IF EXISTS(
			SELECT	*
			FROM	{databaseOwner}[{objectQualifier}Analytics_Users]
			WHERE	[PortalId] = @PortalId AND [UserId] = @UserId)
	BEGIN
		UPDATE {databaseOwner}[{objectQualifier}Analytics_Users]
			SET
				[ProcessDate] = NULL,
				[TotalSeconds] = @TotalSeconds,
				[Engagement] = @ExistingEngagement,
				[Contribution] = @ExistingContribution,
				[Activity] = @ExistingActivity,
				[Login] = @ExistingLogin
		WHERE	[PortalId] = @PortalId AND [UserId] = @UserId
	END
	ELSE
	BEGIN
		INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Users]
			([PortalId],
			 [UserId],
			 [ProcessDate],
			 [TotalSeconds],
			 [Engagement],
			 [Contribution],
			 [Activity],
			 [Login])
		VALUES
			(@PortalId,
			 @UserId,
			 NULL,
			 @TotalSeconds,
			 @ExistingEngagement,
			 @ExistingContribution,
			 @ExistingActivity,
			 @ExistingLogin)
	END

	--Set initial record. This will delete older records and create all the interval records
	EXEC  {databaseOwner}{objectQualifier}Analytics_Warehouse_ApplyUserScoringLogRollup
				@UserId,
				@PortalId,
				-1,
				@InfluenceDaily,
				0,
				0
	--Set them now individually as the pref SP adds them. We actually need to replace the values
	UPDATE {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup SET Influence = @InfluenceDaily
	WHERE UserId = @UserId AND PortalId = @PortalId AND DesktopModuleId = -1 AND Interval = 1

	UPDATE {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup SET Influence = @InfluenceWeekly
	WHERE UserId = @UserId AND PortalId = @PortalId AND DesktopModuleId = -1 AND Interval = 7

	UPDATE {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup SET Influence = @InfluenceMonthly
	WHERE UserId = @UserId AND PortalId = @PortalId AND DesktopModuleId = -1 AND Interval = 28
	
	UPDATE {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup SET Influence = @InfluenceYearly
	WHERE UserId = @UserId AND PortalId = @PortalId AND DesktopModuleId = -1 AND Interval = 364

	-- Result set
	SELECT
		@PortalId AS [PortalId],
		@UserId AS [UserId],
		(SELECT	[ProcessDate]
		 FROM	{databaseOwner}[{objectQualifier}Analytics_Users] WITH (NOLOCK)
		 WHERE	[PortalId] = @PortalId AND [UserId] = @UserId) AS [ProcessDate],
		@TotalSeconds AS [TotalSeconds],
		@ExistingEngagement AS [EngagementDocument],
		@ExistingContribution AS [ContributionDocument],
		@ExistingActivity AS [ActivityDocument],
		@ExistingLogin AS [LoginDocument]
END
GO

-- =========================================================
-- Analytics_Get_User -- added new columns in the SP
-- =========================================================

IF EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Get_User') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Get_User
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Get_User]
	@PortalId int,
	@UserId int
AS
BEGIN
	SELECT	[UserSampleId],
			[PortalId],
			[UserId],
			[ProcessDate],
			[TotalSeconds],
			[Engagement] AS [EngagementDocument],
			[Influence] AS [InfluenceDocument],
			[Contribution] AS [ContributionDocument],
			[Activity] AS [ActivityDocument],
			[Login] AS [LoginDocument]
	FROM	{databaseOwner}[{objectQualifier}Analytics_Users] WITH (NOLOCK)
	WHERE	[PortalId] = @PortalId AND [UserId] = @UserId

	--Period specific Influence
	SELECT COALESCE(Influence, 0) FROM {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup] WITH (NOLOCK)
	WHERE [PortalId] = @PortalId AND [UserId] = @UserId AND DesktopModuleId = -1 AND Interval = 1

	SELECT COALESCE(Influence, 0) FROM {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup] WITH (NOLOCK)
	WHERE [PortalId] = @PortalId AND [UserId] = @UserId AND DesktopModuleId = -1 AND Interval = 7

	SELECT COALESCE(Influence, 0) FROM {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup] WITH (NOLOCK)
	WHERE [PortalId] = @PortalId AND [UserId] = @UserId AND DesktopModuleId = -1 AND Interval = 28

	SELECT COALESCE(Influence, 0) FROM {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup] WITH (NOLOCK)
	WHERE [PortalId] = @PortalId AND [UserId] = @UserId AND DesktopModuleId = -1 AND Interval = 364
END
GO

-- =========================================================
-- Social Analytics Data Warehouse Star Schema Migrations
-- =========================================================

IF NOT EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Dim_Date') and OBJECTPROPERTY(id, N'IsTable') = 1)
BEGIN
	CREATE TABLE {databaseOwner}[{objectQualifier}Analytics_Dim_Date] (
		[DateId] INT NOT NULL IDENTITY(1,1), 
		[Year] SMALLINT NOT NULL, 
		[Month] SMALLINT NOT NULL, 
		[Day] SMALLINT NOT NULL, 
		[Hour] SMALLINT NOT NULL, 
		[QuarterStartDay] SMALLINT NOT NULL, 
		[DayOfWeek] SMALLINT NOT NULL, 
		[Quarter] SMALLINT NOT NULL, 
		[TotalDays] INT NOT NULL, 
		-- TODO We should consider add TotalHours as a stored field instead of computed, to replace TotalDays
		[TotalHours]  AS TotalDays * 24 + Hour,
		CONSTRAINT [PK_Analytics_Dim_Date] PRIMARY KEY ([DateId]))

	INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_Date] ([Year], [Month], [Day], [Hour], [QuarterStartDay], [DayOfWeek], [Quarter], [TotalDays]) VALUES (1753, 1, 1, 0, 1, 1, 1, 639905)
END
GO

IF NOT EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Dim_Tag') and OBJECTPROPERTY(id, N'IsTable') = 1)
BEGIN
	CREATE TABLE {databaseOwner}[{objectQualifier}Analytics_Dim_Tag] ([TagId] INT NOT NULL IDENTITY(1,1), [Term] NVARCHAR(255) NOT NULL, CONSTRAINT [PK_Analytics_Dim_Tag] PRIMARY KEY ([TagId]))
	CREATE UNIQUE INDEX [IX_Analytics_Dim_Tag_Term] ON {databaseOwner}[{objectQualifier}Analytics_Dim_Tag] ([Term] ASC)
	INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_Tag] ([Term]) VALUES ('')
END
GO

IF NOT EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Dim_TagGroup') and OBJECTPROPERTY(id, N'IsTable') = 1)
BEGIN
	CREATE TABLE {databaseOwner}[{objectQualifier}Analytics_Dim_TagGroup] ([TagGroupId] INT NOT NULL IDENTITY(1,1), [TagCount] SMALLINT NOT NULL, CONSTRAINT [PK_Analytics_Dim_TagGroup] PRIMARY KEY ([TagGroupId]))
	INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_TagGroup] ([TagCount]) VALUES (0)
END
GO

IF NOT EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Dim_Bridge_TagGroup_Tag') and OBJECTPROPERTY(id, N'IsTable') = 1)
BEGIN
	CREATE TABLE {databaseOwner}[{objectQualifier}Analytics_Dim_Bridge_TagGroup_Tag] ([TagGroupId] INT NOT NULL, [TagId] INT NOT NULL, CONSTRAINT [PK_Analytics_Dim_Bridge_TagGroup_Tag] PRIMARY KEY ([TagGroupId], [TagId]))
	ALTER TABLE {databaseOwner}[{objectQualifier}Analytics_Dim_Bridge_TagGroup_Tag] ADD CONSTRAINT [FK_Analytics_Dim_Bridge_TagGroup_Tag_TagGroupId_Analytics_Dim_TagGroup_TagGroupId] FOREIGN KEY ([TagGroupId]) REFERENCES {databaseOwner}[{objectQualifier}Analytics_Dim_TagGroup] ([TagGroupId])
	ALTER TABLE {databaseOwner}[{objectQualifier}Analytics_Dim_Bridge_TagGroup_Tag] ADD CONSTRAINT [FK_Analytics_Dim_Bridge_TagGroup_Tag_TagId_Analytics_Dim_Tag_TagId] FOREIGN KEY ([TagId]) REFERENCES {databaseOwner}[{objectQualifier}Analytics_Dim_Tag] ([TagId])
	INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_Bridge_TagGroup_Tag] ([TagGroupId], [TagId]) VALUES (1, 1)
END
GO

IF NOT EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Dim_ContentType') and OBJECTPROPERTY(id, N'IsTable') = 1)
BEGIN
	CREATE TABLE {databaseOwner}[{objectQualifier}Analytics_Dim_ContentType] ([ContentTypeId] INT NOT NULL IDENTITY(1,1), [ContentType] NVARCHAR(255) NOT NULL, CONSTRAINT [PK_Analytics_Dim_ContentType] PRIMARY KEY ([ContentTypeId]))
	INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_ContentType] ([ContentType]) VALUES ('')

END
GO

IF NOT EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Dim_ActionType') and OBJECTPROPERTY(id, N'IsTable') = 1)
BEGIN
	CREATE TABLE {databaseOwner}[{objectQualifier}Analytics_Dim_ActionType] ([ActionTypeId] INT NOT NULL, [ActionType] NVARCHAR(255) NOT NULL, CONSTRAINT [PK_Analytics_Dim_ActionType] PRIMARY KEY ([ActionTypeId]))
	INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_ActionType] ([ActionTypeId], [ActionType]) VALUES (0, 'Interacted')
	INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_ActionType] ([ActionTypeId], [ActionType]) VALUES (1, 'Viewed')
	INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_ActionType] ([ActionTypeId], [ActionType]) VALUES (2, 'Created')
	INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_ActionType] ([ActionTypeId], [ActionType]) VALUES (3, 'Edited')
	INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_ActionType] ([ActionTypeId], [ActionType]) VALUES (4, 'Deleted')
	INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_ActionType] ([ActionTypeId], [ActionType]) VALUES (5, 'Flagged')
	INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_ActionType] ([ActionTypeId], [ActionType]) VALUES (6, 'Profile')
	INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_ActionType] ([ActionTypeId], [ActionType]) VALUES (7, 'FormedRelationship')
	INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_ActionType] ([ActionTypeId], [ActionType]) VALUES (8, 'DissolvedRelationship')
	INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_ActionType] ([ActionTypeId], [ActionType]) VALUES (9, 'Moderated')
	INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_ActionType] ([ActionTypeId], [ActionType]) VALUES (10, 'Searched')
	INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_ActionType] ([ActionTypeId], [ActionType]) VALUES (11, 'Shared')
	INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_ActionType] ([ActionTypeId], [ActionType]) VALUES (12, 'Awarded')
	INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_ActionType] ([ActionTypeId], [ActionType]) VALUES (13, 'Revoked')
END
GO

IF NOT EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition') and OBJECTPROPERTY(id, N'IsTable') = 1)
BEGIN
	CREATE TABLE {databaseOwner}[{objectQualifier}Analytics_Dim_ActionDefinition] ([ActionDefinitionId] INT NOT NULL, [DesktopModuleId] INT NOT NULL, [ActionName] NVARCHAR(255) NOT NULL, CONSTRAINT [PK_Analytics_Dim_ActionDefinition] PRIMARY KEY ([ActionDefinitionId]))
	INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_ActionDefinition] ([ActionDefinitionId], [ActionName], [DesktopModuleId]) VALUES (0, '', 0)
END
GO

IF NOT EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog') and OBJECTPROPERTY(id, N'IsTable') = 1)
BEGIN
	CREATE TABLE {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLog] (
		[UserScoringLogId] INT NOT NULL,
		[UserId] INT NOT NULL,
		[ActionDefinitionId] INT NOT NULL,
		[DateId] INT NOT NULL,
		[TimeStamp] DATETIME2 NOT NULL,
		[ContentId] INT NOT NULL,
		[DesktopModuleId] INT NOT NULL,
		[TagGroupId] INT NOT NULL,
		[PortalId] INT NOT NULL,
		[ActionTypeId] INT NOT NULL,
		[ContentTypeId] INT NOT NULL,
		[GroupId] INT NOT NULL,
		[ExperiencePoints] INT NOT NULL,
		[ReputationPoints] INT NOT NULL,
		CONSTRAINT [PK_Analytics_Fact_UserScoringLog] PRIMARY KEY ([UserScoringLogId])
	)

	ALTER TABLE {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLog] ADD CONSTRAINT [FK_Analytics_Fact_UserScoringLog_ActionDefinitionId_Analytics_Dim_ActionDefinition_ActionDefinitionId] FOREIGN KEY ([ActionDefinitionId]) REFERENCES {databaseOwner}[{objectQualifier}Analytics_Dim_ActionDefinition] ([ActionDefinitionId])
	ALTER TABLE {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLog] ADD CONSTRAINT [FK_Analytics_Fact_UserScoringLog_DateId_Analytics_Dim_Date_DateId] FOREIGN KEY ([DateId]) REFERENCES {databaseOwner}[{objectQualifier}Analytics_Dim_Date] ([DateId])
	ALTER TABLE {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLog] ADD CONSTRAINT [FK_Analytics_Fact_UserScoringLog_TagGroupId_Analytics_Dim_TagGroup_TagGroupId] FOREIGN KEY ([TagGroupId]) REFERENCES {databaseOwner}[{objectQualifier}Analytics_Dim_TagGroup] ([TagGroupId])
	ALTER TABLE {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLog] ADD CONSTRAINT [FK_Analytics_Fact_UserScoringLog_ActionTypeId_Analytics_Dim_ActionType_ActionTypeId] FOREIGN KEY ([ActionTypeId]) REFERENCES {databaseOwner}[{objectQualifier}Analytics_Dim_ActionType] ([ActionTypeId])
	ALTER TABLE {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLog] ADD CONSTRAINT [FK_Analytics_Fact_UserScoringLog_ContentTypeId_Analytics_Dim_ContentType_ContentTypeId] FOREIGN KEY ([ContentTypeId]) REFERENCES {databaseOwner}[{objectQualifier}Analytics_Dim_ContentType] ([ContentTypeId])

	CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLog_ContentId]
		ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLog] ([ContentId])

	CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLog_PortalId]
		ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLog] ([PortalId])
		INCLUDE ([DateId], [DesktopModuleId], [ActionTypeId])

	CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLog_UserId]
		ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLog] ([UserId])

    CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLog_DateId]
		ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLog] ([DateId])
		INCLUDE ([UserScoringLogId], [ActionDefinitionId])

    CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLog_DMID_PID]
		ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLog] ([DesktopModuleId], [PortalId])
		INCLUDE ([ActionDefinitionId], [UserId], [DateId], [ActionTypeId])

    CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLog_DMID_PID_AID]
		ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLog] ([DesktopModuleId], [PortalId], [ActionTypeId])
		INCLUDE ([UserId], [DateId], [ContentId])

	CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLog_DTID_DMID_PID]
		ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLog] ([DateId], [DesktopModuleId], [PortalId])
		INCLUDE ([UserId], [ActionTypeId])

	CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLog_ADID_DMID_PID]
		ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLog] ([ActionDefinitionId], [DesktopModuleId], [PortalId])

	CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLog_PID_CID]
		ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLog] ([PortalId], [ContentId])
		INCLUDE ([DateId], [DesktopModuleId], [ActionTypeId])

	CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLog_PID_AID]
		ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLog] ([PortalId],[ActionTypeId])
		INCLUDE ([DateId],[ContentId],[DesktopModuleId])
END
GO

IF NOT EXISTS (SELECT * FROM {databaseOwner}sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup') and OBJECTPROPERTY(id, N'IsTable') = 1)
BEGIN
	CREATE TABLE {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup] (
		[RollupId]  [INT] IDENTITY(1,1) NOT NULL,
		[Date] INT NOT NULL,
		[UserId] INT NOT NULL,
		[PortalId] INT NOT NULL,
		[DesktopModuleId] INT NOT NULL,
		[Interval] INT NOT NULL,
		[Influence] INT NOT NULL,
		[Activities] INT NOT NULL,
		[ReputationPoints] INT NOT NULL,
		CONSTRAINT [PK_Analytics_Fact_UserScoringRollup] PRIMARY KEY ([RollupId])
	)

	CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_PortalId]
		ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup] ([PortalId])
		INCLUDE ([Influence],[Activities],[ReputationPoints])

	CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_DesktopModuleId]
		ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup] ([DesktopModuleId])

	CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_Interval]
		ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup] ([Interval])

	CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_Influence]
		ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup] ([Influence])
		INCLUDE ([PortalId],[DesktopModuleId],[Interval])

	CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_Activities]
		ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup] ([Activities])
		INCLUDE ([PortalId],[DesktopModuleId],[Interval])

	CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_ReputationPoints]
		ON {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup] ([ReputationPoints])
		INCLUDE ([PortalId],[DesktopModuleId],[Interval])
END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_CsvSplit]') IS NOT NULL
	DROP FUNCTION {databaseOwner}{objectQualifier}Analytics_CsvSplit
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}Analytics_CsvSplit]
	(
		@param NVARCHAR(MAX), 
		@delimiter CHAR(1)
	)
	RETURNS @t TABLE (val NVARCHAR(MAX), seq INT)
AS
BEGIN
	SET @param += @delimiter

	;WITH a AS
	(
		SELECT CAST(1 AS BIGINT) f, CHARINDEX(@delimiter, @param) t, 1 seq
		UNION ALL
		SELECT t + 1, charindex(@delimiter, @param, t + 1), seq + 1
		FROM a
		WHERE CHARINDEX(@delimiter, @param, t + 1) > 0
	)
	INSERT @t
	SELECT SUBSTRING(@param, f, t - f), seq FROM a
	OPTION (MAXRECURSION 0)
	RETURN
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_AddActionType') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddActionType
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddActionType
	@ActionTypeId INT,
	@ActionType NVARCHAR(50)
AS
BEGIN
	IF NOT EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}Analytics_Dim_ActionType] WHERE ActionTypeId = @ActionTypeId)
	BEGIN	
		INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_ActionType] (ActionTypeId, ActionType) 
		VALUES (@ActionTypeId, @ActionType);
	END
END
GO
	
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_AddContentType') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddContentType
GO	
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddContentType
	@ContentType NVARCHAR(50),
	@ContentTypeId INT OUTPUT	
AS
BEGIN
	SET NOCOUNT ON;
	SELECT @ContentTypeId = ContentTypeId FROM {databaseOwner}[{objectQualifier}Analytics_Dim_ContentType]
	WHERE(ContentType = @ContentType)
    IF (@ContentTypeId IS NULL)
	BEGIN	
		INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_ContentType] (ContentType) 
		VALUES (@ContentType);
		SET @ContentTypeId = SCOPE_IDENTITY()
	END
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_AddDateDimension') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddDateDimension
GO	
SET ANSI_NULLS ON
    GO
    SET QUOTED_IDENTIFIER ON
    GO
    CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddDateDimension
	    @Year SMALLINT,
	    @Month SMALLINT,
	    @Day SMALLINT,
        @Hour SMALLINT,
	    @QuarterStartDay SMALLINT,
	    @DayOfWeek SMALLINT,
	    @Quarter SMALLINT,
        @TotalDays INT,
	    @DateId INT OUTPUT
    AS
    BEGIN
	    SET NOCOUNT ON;
	    SELECT @DateId = DateId FROM {databaseOwner}[{objectQualifier}Analytics_Dim_Date]
	    WHERE(
		    Year = @Year AND 
		    Month = @Month AND 
		    Day = @Day AND 
            Hour = @Hour AND
		    QuarterStartDay = @QuarterStartDay AND 
		    DayOfWeek = @DayOfWeek AND 
		    Quarter = @Quarter AND
            TotalDays = @TotalDays)
        IF (@DateId IS NULL)
	    BEGIN	
		    INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Dim_Date] (Year,Month,Day,Hour,QuarterStartDay,DayOfWeek,Quarter,TotalDays) 
		    VALUES (@Year,@Month,@Day,@Hour,@QuarterStartDay,@DayOfWeek,@Quarter,@TotalDays);
		    SET @DateId = SCOPE_IDENTITY()
	    END
    END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_AddTagsAndTagGroup') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddTagsAndTagGroup
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddTagsAndTagGroup
	@CommaSeparatedTags NVARCHAR(MAX),
	@TagGroupId INT OUTPUT
AS
BEGIN
	DECLARE @TagCount INT
	DECLARE @NewTagCount INT

	
	DECLARE @Terms TABLE
	(
		Id INT IDENTITY(1,1) PRIMARY KEY,
		Term NVARCHAR(MAX)
	)

	DECLARE @NewTerms TABLE
	(
		Id INT IDENTITY(1,1) PRIMARY KEY,
		Term NVARCHAR(MAX)
	)

	INSERT INTO @Terms (Term) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@CommaSeparatedTags, ','));
	--Determine the terms that are not in the db yet
	INSERT INTO @NewTerms (Term) SELECT Term FROM @Terms terms
	WHERE NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}Analytics_Dim_Tag tags WHERE tags.Term = terms.Term)

	SET @TagCount = (SELECT COUNT(*) FROM @Terms)
	SET @NewTagCount = (SELECT COUNT(*) FROM @NewTerms)

	IF @NewTagCount = 0
	BEGIN
		--See if there is an existing group with exactly these terms
		SET @TagGroupId = (SELECT  tg.TagGroupId FROM {databaseOwner}{objectQualifier}Analytics_Dim_TagGroup tg
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Bridge_TagGroup_Tag b ON tg.TagGroupId = b.TagGroupId 
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Tag t ON b.TagId = t.TagId	
			WHERE tg.TagCount = @TagCount AND t.Term IN (SELECT Term FROM @Terms)
		EXCEPT 
		SELECT  tg.TagGroupId FROM {databaseOwner}{objectQualifier}Analytics_Dim_TagGroup tg
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Bridge_TagGroup_Tag b ON tg.TagGroupId = b.TagGroupId 
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Tag t ON b.TagId = t.TagId	
			WHERE tg.TagCount = @TagCount AND t.Term NOT IN (SELECT Term FROM @Terms))
	END
	ELSE
	BEGIN
		--Add the new terms first
		INSERT INTO {databaseOwner}{objectQualifier}Analytics_Dim_Tag (Term) SELECT Term FROM @NewTerms	
	END

	IF @TagGroupId IS NULL
	BEGIN
		--We need to create a new group and link it to the new grouping of terms
		DECLARE @temp table 
		(
			Id INT PRIMARY KEY
		)
		INSERT INTO {databaseOwner}{objectQualifier}Analytics_Dim_TagGroup (TagCount) OUTPUT INSERTED.TagGroupId INTO @temp VALUES (@TagCount)
		SELECT @TagGroupId = Id FROM @temp
		INSERT INTO {databaseOwner}{objectQualifier}Analytics_Dim_Bridge_TagGroup_Tag (TagGroupId,TagId) 
			SELECT @TagGroupId, dimTags.TagId 
			FROM {databaseOwner}{objectQualifier}Analytics_Dim_Tag dimTags 
			INNER JOIN @Terms t ON dimTags.Term = t.Term
	END
END
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_AddActionDefinition') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddActionDefinition
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddActionDefinition
    @ActionDefinitionId INT,
	@ActionName NVARCHAR(50),
    @DesktopModuleId INT
AS
BEGIN
    IF NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition WHERE ActionDefinitionId = @ActionDefinitionId)
	BEGIN	
		INSERT INTO {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition (ActionDefinitionId, ActionName, DesktopModuleId) 
		VALUES (@ActionDefinitionId, @ActionName, @DesktopModuleId);
	END
END
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_AddUserScoringFact') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddUserScoringFact
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddUserScoringFact
	@UserScoringLogId INT,
	@UserId INT,
	@ActionDefinitionId INT,
	@DateId INT,
	@ContentId INT,
	@DesktopModuleId INT,
	@TagGroupId INT,
	@PortalId INT,
	@ActionTypeId INT,
	@ContentTypeId INT,
	@GroupId INT,
	@ExperiencePoints INT,
	@ReputationPoints INT
AS
BEGIN
	INSERT INTO {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog (UserScoringLogId, UserId,ActionDefinitionId,DateId,ContentId,DesktopModuleId,TagGroupId,PortalId,ActionTypeId,ContentTypeId,GroupId,ExperiencePoints,ReputationPoints)
		VALUES(@UserScoringLogId, @UserId,@ActionDefinitionId,@DateId,@ContentId,@DesktopModuleId,@TagGroupId,@PortalId,@ActionTypeId,@ContentTypeId,@GroupId,@ExperiencePoints,@ReputationPoints);
END
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_QueryTrendingTags') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryTrendingTags
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryTrendingTags
	@FilteredActionTypes NVARCHAR(MAX),
	@DesktopModuleId INT,
	@Skip INT,
	@Take INT,
	@StartDay INT,
	@EndDay INT,
	@PortalId INT
AS
BEGIN		
	DECLARE @ActionTypes TABLE
	(
		ActionType NVARCHAR(MAX)
	)

	DECLARE @SubResults TABLE
	(
		UserScoringLogId INT,
		ContentId INT,
		TagGroupId INT,
		ActionType NVARCHAR(MAX)
	)
	DECLARE @EditedItems TABLE
	(
		UserScoringLogId INT,
		ContentId INT,
		NewTagGroupId INT,
		ActionType NVARCHAR(MAX)
	)
	DECLARE @Results TABLE
	(
		TermRank INT,
		Term NVARCHAR(MAX),
		TermCount INT
	)
	DECLARE @TotalTermCount INT

	INSERT INTO @ActionTypes (ActionType) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@FilteredActionTypes, ','));

	INSERT INTO @SubResults
	SELECT f.UserScoringLogId, f.ContentId, f.TagGroupId, at.ActionType FROM  {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_TagGroup tg ON f.TagGroupId = tg.TagGroupId 
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d ON f.DateId = d.DateId
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
	WHERE 
		f.PortalId = @PortalId AND
		(@DesktopModuleId = 0 OR f.DesktopModuleId = @DesktopModuleId) AND
		d.TotalDays >= @StartDay AND d.TotalDays <= @EndDay

	INSERT INTO @EditedItems
	SELECT UserScoringLogId, ContentId, TagGroupId, ActionType 
	FROM 
		(SELECT UserScoringLogId, ContentId, TagGroupId, ActionType, RowNum = ROW_NUMBER() OVER (PARTITION BY ContentId ORDER BY UserScoringLogId DESC)
		 FROM @SubResults
		 WHERE ActionType = 'Edited' OR ActionType IN (SELECT * FROM @ActionTypes) ) Singles
	WHERE RowNum = 1

	DELETE R FROM @SubResults R INNER JOIN @EditedItems E ON R.ContentId = E.ContentId
	WHERE E.ActionType IN (SELECT * FROM @ActionTypes)

	UPDATE R SET TagGroupId = e.NewTagGroupId 
	FROM @SubResults R 
		INNER JOIN @EditedItems E ON R.ContentId = E.ContentId
	WHERE E.ActionType = 'Edited'

	INSERT INTO @Results 
	SELECT ROW_NUMBER() OVER(ORDER BY COUNT(t.Term) DESC) AS RowNumber, t.Term, COUNT(t.Term) AS TermCount
	FROM @SubResults R 
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Bridge_TagGroup_Tag tgb ON R.TagGroupId = tgb.TagGroupId
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Tag t ON tgb.TagId = t.TagId 
	WHERE t.Term <> ''
	GROUP BY t.Term

	SELECT @TotalTermCount = COUNT(DISTINCT Term) FROM @Results
	SELECT Term, TermCount, @TotalTermCount AS TotalTermCount FROM @Results WHERE TermRank BETWEEN @Skip + 1 AND @Skip + @Take ORDER BY TermRank
END
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_QueryAdoption') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryAdoption
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryAdoption
	@IncludedActionTypes NVARCHAR(MAX),
	@PortalId INT,
	@EndDay INT,
	@Interval INT,
	@NumDataPoints INT
AS
BEGIN		
	DECLARE @rangeCounter int
	SET @rangeCounter = 0
	DECLARE @resultsTable table
	(
		RangeIndex int PRIMARY KEY,
		MetricCount int,
		MinDay int,
		MaxDay int
	)
	DECLARE @ActionTypes TABLE
	(
		ActionTypeId INT IDENTITY(1,1) PRIMARY KEY,
		ActionType NVARCHAR(MAX)
	)
	INSERT INTO @ActionTypes (ActionType) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@IncludedActionTypes, ','));

	WHILE @rangeCounter < @numDataPoints
	BEGIN
		DECLARE @minDay int
		DECLARE @maxDay int
		SET @minDay = @EndDay - ((@NumDataPoints - @rangeCounter) * @Interval)
		SET @maxDay = @minDay + @Interval
		INSERT INTO @resultsTable (RangeIndex, MetricCount, MinDay, MaxDay) VALUES (@rangeCounter,
			(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d ON f.DateId = d.DateId
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad ON f.ActionDefinitionId = ad.ActionDefinitionId
				WHERE ad.ActionName IN (SELECT ActionType FROM @ActionTypes)
					AND d.TotalDays > @minDay AND d.TotalDays <= @maxDay), @minDay + 1, @maxDay)
		SET @rangeCounter = @rangeCounter + 1
	END
	SELECT * FROM @resultsTable
END
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_QueryParticipation') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryParticipation
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryParticipation
	@IncludedActionTypes NVARCHAR(MAX),
	@PortalId INT,
	@EndDay INT,
	@Interval INT,
	@NumDataPoints INT
AS
BEGIN		
	DECLARE @rangeCounter int
	SET @rangeCounter = 0
	DECLARE @resultsTable table
	(
		RangeIndex int PRIMARY KEY,
		MetricCount int,
		MinDay int,
		MaxDay int
	)
	DECLARE @ActionTypes TABLE
	(
		ActionTypeId INT IDENTITY(1,1) PRIMARY KEY,
		ActionType NVARCHAR(MAX)
	)
	INSERT INTO @ActionTypes (ActionType) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@IncludedActionTypes, ','));
	WHILE @rangeCounter < @numDataPoints
	BEGIN
		DECLARE @minDay int
		DECLARE @maxDay int
		SET @minDay = @EndDay - ((@NumDataPoints - @rangeCounter) * @Interval)
		SET @maxDay = @minDay + @Interval
		INSERT INTO @resultsTable (RangeIndex, MetricCount, MinDay, MaxDay) VALUES (@rangeCounter,
			(SELECT COUNT(DISTINCT(f.UserId)) FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d ON f.DateId = d.DateId
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
				WHERE f.PortalId = @PortalId
					AND at.ActionType IN (SELECT ActionType FROM @ActionTypes)
					AND d.TotalDays > @minDay AND d.TotalDays <= @maxDay), @minDay + 1, @maxDay)
		SET @rangeCounter = @rangeCounter + 1
	END
	SELECT * FROM @resultsTable
END
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_QueryActivityByModule') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryActivityByModule
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryActivityByModule
	@ExcludedActionTypes NVARCHAR(MAX),
	@PortalId INT,
	@ModuleId INT,
	@EndDay INT,
	@Interval INT,
	@NumDataPoints INT
AS
BEGIN		
	DECLARE @rangeCounter int
	SET @rangeCounter = 0
	DECLARE @resultsTable table
	(
		RangeIndex int PRIMARY KEY,
		MetricCount int,
		MinDay int,
		MaxDay int
	)
	DECLARE @ActionTypes TABLE
	(
		ActionTypeId INT IDENTITY(1,1) PRIMARY KEY,
		ActionType NVARCHAR(MAX)
	)
	INSERT INTO @ActionTypes (ActionType) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@ExcludedActionTypes, ','));
	WHILE @rangeCounter < @numDataPoints
	BEGIN
		DECLARE @minDay int
		DECLARE @maxDay int
		SET @minDay = @EndDay - ((@NumDataPoints - @rangeCounter) * @Interval)
		SET @maxDay = @minDay + @Interval
		INSERT INTO @resultsTable (RangeIndex, MetricCount, MinDay, MaxDay) VALUES (@rangeCounter,
			(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d ON f.DateId = d.DateId
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
				WHERE f.PortalId = @PortalId
					AND f.DesktopModuleId = @ModuleId
					AND at.ActionType NOT IN (SELECT ActionType FROM @ActionTypes)
					AND d.TotalDays > @minDay AND d.TotalDays <= @maxDay), @minDay + 1, @maxDay)
		SET @rangeCounter = @rangeCounter + 1
	END
	SELECT * FROM @resultsTable
END
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_EnsureDimensionsAndAddUserScoringFact') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_EnsureDimensionsAndAddUserScoringFact
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_EnsureDimensionsAndAddUserScoringFact
	@UserScoringLogId INT,
	@UserId INT,
	@ContentId INT,
	@PortalId INT,
	@GroupId INT,
	@ExperiencePoints INT,
	@ReputationPoints INT,

	--Date Dimension
	@Year SMALLINT,
	@Month SMALLINT,
	@Day SMALLINT,
    @Hour SMALLINT,
	@QuarterStartDay SMALLINT,
	@DayOfWeek SMALLINT,
	@Quarter SMALLINT,
    @TotalDays INT,
		
	--ActionDefinition Dimension
	@ActionDefinitionId INT,
	@ActionName NVARCHAR(50),
    @DesktopModuleId INT, 

	--ActionType Dimension
	@ActionTypeId INT,
	@ActionType NVARCHAR(50), 

	--TagGroupDimension 
	@CommaSeparatedTags NVARCHAR(MAX), 

	--ContentType Dimension
	@ContentType NVARCHAR(50)
			    
AS
BEGIN
	DECLARE @DateId INT
	DECLARE @TagGroupId INT
	DECLARE @ContentTypeId INT

	EXECUTE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddDateDimension
		@Year, 
		@Month, 
		@Day,
		@Hour,
		@QuarterStartDay,
		@DayOfWeek,
		@Quarter,
		@TotalDays,
		@DateId OUTPUT;

	EXECUTE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddActionDefinition
		@ActionDefinitionId,
	    @ActionName,
        @DesktopModuleId;

	EXECUTE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddContentType
		@ContentType,
		@ContentTypeId OUTPUT;

	EXECUTE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddTagsAndTagGroup
		@CommaSeparatedTags,
		@TagGroupId OUTPUT;

	INSERT INTO {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog (
		UserScoringLogId, 
		UserId,
		ActionDefinitionId,
		DateId,ContentId,
		DesktopModuleId,
		TagGroupId,
		PortalId,
		ActionTypeId,
		ContentTypeId,
		GroupId,
		ExperiencePoints,
		ReputationPoints)
	VALUES(
		@UserScoringLogId, 
		@UserId,
		@ActionDefinitionId,
		@DateId,
		@ContentId,
		@DesktopModuleId,
		@TagGroupId,
		@PortalId,
		@ActionTypeId,
		@ContentTypeId,
		@GroupId,
		@ExperiencePoints,
		@ReputationPoints);
END
GO

            
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_AddDateDimensionFromDateTime') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddDateDimensionFromDateTime
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
    CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddDateDimensionFromDateTime
	    @TimeStamp DATETIME,
		@DateId INT OUTPUT	                        
    AS
    BEGIN
		DECLARE @Year SMALLINT
		DECLARE @Month SMALLINT
	    DECLARE @Day SMALLINT
        DECLARE @Hour SMALLINT
	    DECLARE @QuarterStartDay SMALLINT
	    DECLARE @DayOfWeek SMALLINT
	    DECLARE @Quarter SMALLINT
        DECLARE @TotalDays INT

		SET @TotalDays = DATEDIFF(day, CONVERT(DATE, '0001-01-01'), @TimeStamp);
		SET @Year = DATEPART(year,@TimeStamp);
		SET @Month = DATEPART(month,@TimeStamp);
		SET @Day = DATEPART(day,@TimeStamp);
		SET @Hour = DATEPART(hour,@TimeStamp);
		SET @Quarter = DATEPART(quarter,@TimeStamp);
		SET @DayOfWeek = DATEPART(weekday,@TimeStamp) - 1;
		SET @QuarterStartDay = 1;

	    SET NOCOUNT ON;
	    SELECT @DateId = DateId FROM {databaseOwner}{objectQualifier}Analytics_Dim_Date
	    WHERE(
		    Year = @Year AND 
		    Month = @Month AND 
		    Day = @Day AND 
            Hour = @Hour AND
		    QuarterStartDay = @QuarterStartDay AND 
		    DayOfWeek = @DayOfWeek AND 
		    Quarter = @Quarter AND
            TotalDays = @TotalDays)
        IF (@DateId IS NULL)
	    BEGIN	
		    INSERT INTO {databaseOwner}{objectQualifier}Analytics_Dim_Date (Year,Month,Day,Hour,QuarterStartDay,DayOfWeek,Quarter,TotalDays) 
		    VALUES (@Year,@Month,@Day,@Hour,@QuarterStartDay,@DayOfWeek,@Quarter,@TotalDays);
		    SET @DateId = SCOPE_IDENTITY()
	    END
    END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_ApplyUserScoringLogRollup') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_ApplyUserScoringLogRollup
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_ApplyUserScoringLogRollup
	@UserId INT,
	@PortalId INT,
	@DesktopModuleId INT,
	@Influence INT,
	@Activities INT,
	@ReputationPoints INT,
	@EventDate DATETIME = NULL
AS
BEGIN		
	
	DECLARE @Event INT
	DECLARE @Today INT
	DECLARE @Prev7 INT
	DECLARE @Prev28 INT
	DECLARE @Prev364 INT
	DECLARE @Current DATETIME
	SET @Current = GETUTCDATE()
	SET @Today =  CAST(convert(varchar,@Current,112) as int)	

	--needed for historical data migration
	IF @EventDate IS NULL
        SET @EventDate = GETUTCDATE()

	SET @Event =  CAST(convert(varchar,@EventDate,112) as int)
			
	DECLARE @RollupId INT
	DECLARE @Lower INT
	DECLARE @Interval INT
	DECLARE @Loop INT
	SET @Loop = 0
	WHILE @Loop < 4 BEGIN
		SET @Loop = @Loop + 1

		IF @Loop = 1 
		BEGIN 
			SET @Lower = @Today
			SET @Interval = 1 
		END
		ELSE IF @Loop=2
		BEGIN 
			SET @Interval = 7 
			SET @Lower = CAST(convert(varchar,DATEADD(DAY, -@Interval, @Current),112) as int)			
		END
		ELSE IF @Loop=3
		BEGIN 
			SET @Interval = 28 
			SET @Lower = CAST(convert(varchar,DATEADD(DAY, -@Interval, @Current),112) as int)
		END
		ELSE IF @Loop=4
		BEGIN 
			SET @Interval = 364 
			SET @Lower = CAST(convert(varchar,DATEADD(DAY, -@Interval, @Current),112) as int)
		END

		--Do not bother handling older data
		IF @Event < @Lower CONTINUE

		--Remove older records
		DELETE {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup] WHERE [Interval] = @Interval AND [Date] < @Lower
		
		--load up DesktopModule's stuff first
		SET @RollupId = NULL
		SELECT	@RollupId = RollupId 
		FROM	{databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup] WITH (NOLOCK)
		WHERE   [PortalId] = @PortalId 
			AND [UserId] = @UserId 
			AND [DesktopModuleId] = @DesktopModuleId
			AND [Interval] = @Interval
		IF @RollupId IS NOT NULL
		BEGIN
				UPDATE {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]
					SET
						[Influence] = [Influence] + @Influence,
						[Activities] = [Activities] + @Activities,
						[ReputationPoints] = [ReputationPoints] + @ReputationPoints,
						[Date] = @Today
					WHERE
						[RollupId] = @RollupId
		END
		ELSE
		BEGIN
				INSERT INTO {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup (
					[Date],
					UserId,
					PortalId,
					DesktopModuleId,
					Interval,
					Influence,
					Activities,
					ReputationPoints)
				VALUES(
					@Today, 
					@UserId,
					@PortalId,
					@DesktopModuleId,
					@Interval,
					@Influence,
					@Activities,
					@ReputationPoints);
		END

		--load up site's stuff first
		SET @RollupId = NULL
		SELECT	@RollupId = RollupId 
		FROM	{databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup] WITH (NOLOCK)
		WHERE   [PortalId] = @PortalId 
			AND [UserId] = @UserId 
			AND [DesktopModuleId] = -1
			AND [Interval] = @Interval
		IF @RollupId IS NOT NULL
		BEGIN
				UPDATE {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup]
					SET
						[Influence] = [Influence] + @Influence,
						[Activities] = [Activities] + @Activities,
						[ReputationPoints] = [ReputationPoints] + @ReputationPoints,
						[Date] = @Today
					WHERE
						[RollupId] = @RollupId
		END
		ELSE
		BEGIN
				INSERT INTO {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup (
					[Date],
					UserId,
					PortalId,
					DesktopModuleId,
					Interval,
					Influence,
					Activities,
					ReputationPoints)
				VALUES(
					@Today, 
					@UserId,
					@PortalId,
					-1,
					@Interval,
					@Influence,
					@Activities,
					@ReputationPoints);
		END

	END	
END
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_MigrateUserScoringLogEntry') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_MigrateUserScoringLogEntry
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_MigrateUserScoringLogEntry
		@UserScoringLogId INT,    
		@UserId INT,
		@PortalId INT,
		@ContentItemId INT,
		@ScoringActionDefId INT,
		@ExperiencePoints INT,
		@ReputationPoints INT,
		@CreatedOnDate DATETIME,
		@GroupId INT			
	AS
	BEGIN					
		DECLARE @ActionName NVARCHAR(50)
		DECLARE @DesktopModuleId INT	
		DECLARE @ActionType NVARCHAR(50)	
		DECLARE @ActionTypeId INT
		DECLARE @CommaSeparatedTags NVARCHAR(MAX) 
		DECLARE @ContentType NVARCHAR(50)
		DECLARE @DateId INT
		DECLARE @TagGroupId INT
		DECLARE @ContentTypeId INT
		DECLARE @TagsTable TABLE
		(
			TagName NVARCHAR(50),
			ContentType NVARCHAR(50)
		);
		SELECT @ActionName = ActionName, @DesktopModuleId = DesktopModuleId, @ActionTypeId = ActionType
			FROM {databaseOwner}{objectQualifier}Mechanics_ScoringActionDefinition
			WHERE ScoringActionDefId = @ScoringActionDefId

		INSERT INTO @TagsTable (TagName,ContentType)
		SELECT REPLACE(tt.Name,',',' '), ct.ContentType
		FROM {databaseOwner}{objectQualifier}Taxonomy_Terms tt 
			INNER JOIN {databaseOwner}{objectQualifier}ContentItems_Tags cit ON tt.TermID = cit.TermID 
			INNER JOIN {databaseOwner}{objectQualifier}ContentItems ci ON cit.ContentItemID = ci.ContentItemID 
			INNER JOIN {databaseOwner}{objectQualifier}ContentTypes ct ON ci.ContentTypeID = ct.ContentTypeID
			WHERE ci.ContentItemID = @ContentItemId
		SELECT @CommaSeparatedTags = STUFF((SELECT  ',' + TagName FROM @TagsTable FOR XML PATH('')), 1, 1, '')
		SELECT TOP(1) @ContentType = ContentType FROM @TagsTable
		SET @ContentType = COALESCE(@ContentType,'');
		SET @CommaSeparatedTags = COALESCE(@CommaSeparatedTags,'');
		--Ensure date dimension exists
		EXECUTE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddDateDimensionFromDateTime
			@CreatedOnDate,
			@DateId OUTPUT;

		--Ensure action definition dimension exists
		EXECUTE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddActionDefinition
			@ScoringActionDefId,
			@ActionName,
			@DesktopModuleId;

		--Ensure content type dimension exists
		EXECUTE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddContentType
			@ContentType,
			@ContentTypeId OUTPUT

		--Ensure tag group dimension exists
		EXECUTE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddTagsAndTagGroup
			@CommaSeparatedTags,
			@TagGroupId OUTPUT;

		INSERT INTO {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog (
			UserScoringLogId, 
			UserId,
			ActionDefinitionId,
			DateId,
			TimeStamp,
			ContentId,
			DesktopModuleId,
			TagGroupId,
			PortalId,
			ActionTypeId,
			ContentTypeId,
			GroupId,
			ExperiencePoints,
			ReputationPoints)
		VALUES(
			@UserScoringLogId, 
			@UserId,
			@ScoringActionDefId,
			@DateId,
			@CreatedOnDate,
			@ContentItemId,
			@DesktopModuleId,
			@TagGroupId,
			@PortalId,
			@ActionTypeId,
			@ContentTypeId,
			@GroupId,
			@ExperiencePoints,
			@ReputationPoints);
	END
GO
            
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_MigrateUserScoringLogEntries') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_MigrateUserScoringLogEntries
GO            

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_MigrateUserScoringLogEntries
	@StartingLogId INT,
	@EndLogId INT,    
	@MaxLogs INT					
AS
BEGIN
	DECLARE @LastLogMigrated INT
	DECLARE @UserScoringLogId INT    
	DECLARE @UserId INT
	DECLARE @PortalId INT
	DECLARE @ContentItemId INT
	DECLARE @ScoringActionDefId INT
	DECLARE @ExperiencePoints INT
	DECLARE @ReputationPoints INT
	DECLARE @CreatedOnDate DATETIME
	DECLARE @GroupId INT
	DECLARE @ActionType INT
	DECLARE @DesktopModuleId INT
	DECLARE @Activities INT
	DECLARE LogCursor CURSOR FAST_FORWARD
	FOR SELECT TOP(@MaxLogs)
		usl.UserScoringLogId,
		usl.UserId,
		usl.PortalId,
		usl.ContentItemId,
		usl.ScoringActionDefId,
		usl.ExperiencePoints,
		usl.ReputationPoints,
		usl.CreatedOnDate,
		usl.GroupId,
		sad.ActionType,
		sad.DesktopModuleId
	FROM {databaseOwner}{objectQualifier}Mechanics_UserScoringLog usl
	INNER JOIN {databaseOwner}{objectQualifier}Mechanics_ScoringActionDefinition sad
		ON usl.ScoringActionDefId = sad.ScoringActionDefId
	WHERE UserScoringLogId >= @StartingLogId AND (@EndLogId = 0 OR UserScoringLogId <= @EndLogId)
	ORDER BY UserScoringLogId
	OPEN LogCursor
	FETCH NEXT FROM LogCursor INTO 
		@UserScoringLogId,
		@UserId,
		@PortalId,
		@ContentItemId,
		@ScoringActionDefId,
		@ExperiencePoints,
		@ReputationPoints,
		@CreatedOnDate,
		@GroupId,
		@ActionType,
		@DesktopModuleId
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @LastLogMigrated = @UserScoringLogId

		BEGIN TRY
			IF NOT EXISTS (SELECT 1 FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog WHERE UserScoringLogId = @UserScoringLogId)
			BEGIN
				EXEC  {databaseOwner}{objectQualifier}Analytics_Warehouse_MigrateUserScoringLogEntry
					@UserScoringLogId,
					@UserId,
					@PortalId,
					@ContentItemId,
					@ScoringActionDefId,
					@ExperiencePoints,
					@ReputationPoints,
					@CreatedOnDate,
					@GroupId
			END

			--Created, Edited, FormedRelationship, Interacted
			IF (@ActionType = 2 OR @ActionType = 3 OR @ActionType = 7 OR @ActionType = 0)
				SET @Activities = 1
			ELSE
				SET @Activities = 0

			EXEC  {databaseOwner}{objectQualifier}Analytics_Warehouse_ApplyUserScoringLogRollup
				@UserId,
				@PortalId,
				@DesktopModuleId,
				0,
				@Activities,
				@ReputationPoints,
				@CreatedOnDate
		END TRY
		BEGIN CATCH
			--do nothing
		END CATCH

		FETCH NEXT FROM LogCursor INTO
			@UserScoringLogId,
			@UserId,
			@PortalId,
			@ContentItemId,
			@ScoringActionDefId,
			@ExperiencePoints,
			@ReputationPoints,
			@CreatedOnDate,
			@GroupId,
			@ActionType,
			@DesktopModuleId
	END
	CLOSE LogCursor
	DEALLOCATE LogCursor
	SELECT @LastLogMigrated		
END
GO

IF NOT EXISTS (SELECT 1 FROM {databaseOwner}{objectQualifier}HostSettings WHERE SettingName = 'SocialAnalyticsMigrationLogEndId')
BEGIN
	DECLARE @migrationStopPoint INT;
	SELECT @migrationStopPoint = MAX(UserScoringLogId) FROM {databaseOwner}{objectQualifier}Mechanics_UserScoringLog
	SET @migrationStopPoint = COALESCE(@migrationStopPoint, 0);
	INSERT INTO {databaseOwner}{objectQualifier}HostSettings (SettingName, SettingValue, SettingIsSecure, CreatedByUserID, CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
		VALUES('SocialAnalyticsMigrationLogEndId', CAST(@migrationStopPoint AS INT), 0, -1, GETDATE(), -1, GETDATE())
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_QueryModulePopularContent') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryModulePopularContent
GO   

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryModulePopularContent
	@FilteredActionTypes NVARCHAR(MAX),
	@DesktopModuleId INT,
	@Skip INT,
	@Take INT,
	@StartDay INT,
	@EndDay INT,
	@PortalId INT,
	@ComparativeTermOffset INT
AS
BEGIN		
	DECLARE @SeparatedFilteredActionTypes TABLE(Term NVARCHAR(MAX));
	INSERT INTO @SeparatedFilteredActionTypes (Term) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@FilteredActionTypes, ','));
	WITH PopularContent AS
	(				
		SELECT ROW_NUMBER() OVER(ORDER BY COUNT(f.ContentId) DESC) AS 'Rank', f.ContentId as ContentId, count(*) as ContentCount, f.DesktopModuleId as DesktopModuleId 
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f 
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d ON f.DateId = d.DateId
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
		WHERE at.ActionType NOT IN (SELECT Term FROM @SeparatedFilteredActionTypes)
			AND f.ContentId <> -1
			AND (@DesktopModuleId = 0 OR f.DesktopModuleId = @DesktopModuleId)
			AND f.PortalId = @PortalId
            AND d.TotalDays BETWEEN @StartDay AND @EndDay
		GROUP BY f.ContentId, f.DesktopModuleId
	),
	ComparativeTermPopularContent AS	
	(				
		SELECT ROW_NUMBER() OVER(ORDER BY COUNT(f.ContentId) DESC) AS 'Rank', f.ContentId as ContentId, count(*) as ContentCount
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f 
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d ON f.DateId = d.DateId
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
		WHERE at.ActionType NOT IN (SELECT Term FROM @SeparatedFilteredActionTypes)
			AND f.ContentId <> -1
			AND (@DesktopModuleId = 0 OR f.DesktopModuleId = @DesktopModuleId)
			AND f.PortalId = @PortalId
            AND d.TotalDays BETWEEN (@StartDay - @ComparativeTermOffset) AND (@EndDay - @ComparativeTermOffset)
		GROUP BY f.ContentId
	)
	SELECT p.ContentId, p.DesktopModuleId, p.Rank, p.ContentCount,(SELECT COUNT(*) FROM PopularContent) AS Total, c.Rank AS ComparativeRank, c.ContentCount AS ComparativeContentCount, (SELECT SUM(ContentCount) FROM ComparativeTermPopularContent) AS ComparativeTotal FROM PopularContent p
		LEFT JOIN ComparativeTermPopularContent c ON p.ContentId = c.ContentId
		WHERE p.Rank > @Skip AND p.Rank <= (@Skip + @Take)
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetFilteredHourlyTimeSeriesByModule') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetFilteredHourlyTimeSeriesByModule
GO   

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetFilteredHourlyTimeSeriesByModule
	@ExcludedActionTypes NVARCHAR(MAX),
	@PortalId INT,
	@PeriodEndDate DATETIME,
	@NumDataPoints INT
AS
BEGIN		
	DECLARE @RangeCounter INT
	SET @RangeCounter = 0

	DECLARE @ResultsTable TABLE
	(	
		RangeIndex INT,
		DesktopModuleId INT,
		MetricCount INT,
		TimeSliceStart DATETIME,
		TimeSliceEnd DATETIME
	)
	DECLARE @Filtered TABLE
	(
		ExcludedType NVARCHAR(MAX)
	)

	INSERT INTO @Filtered (ExcludedType) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@ExcludedActionTypes, ','));
	WHILE @RangeCounter < @numDataPoints
		BEGIN
			DECLARE @TimeSliceStart DATETIME
			DECLARE @TimeSliceEnd DATETIME
			SET @TimeSliceStart = DATEADD(HOUR, -@NumDataPoints + @RangeCounter, @PeriodEndDate)
			SET @TimeSliceEnd = DATEADD(HOUR, 1, @TimeSliceStart)			
					
			INSERT INTO @ResultsTable (RangeIndex, DesktopModuleId, MetricCount, TimeSliceStart, TimeSliceEnd)
			SELECT @RangeCounter, f.DesktopModuleId, COUNT(*), @TimeSliceStart + 1, @TimeSliceEnd
			FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d ON f.DateId = d.DateId
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
			WHERE f.PortalId = @PortalId
				AND at.ActionType NOT IN (SELECT ExcludedType FROM @Filtered)
				AND (d.Year BETWEEN DatePart(YEAR, @TimeSliceStart) AND  DATEPART(YEAR, @TimeSliceEnd))
				AND (d.Month BETWEEN DATEPART(MONTH, @TimeSliceStart) AND DATEPART(MONTH, @TimeSliceEnd))
				AND (d.Day BETWEEN DATEPART(DAY, @TimeSliceStart) AND DATEPART(DAY, @TimeSliceEnd))
				AND (d.Hour > DATEPART(HOUR, @TimeSliceStart) AND d.Hour <= DATEPART(HOUR, @TimeSliceEnd))
			GROUP BY f.DesktopModuleId
			SET @RangeCounter = @RangeCounter + 1
		END
	SELECT * FROM @ResultsTable
END
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetFilteredDailyTimeSeriesByModule') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetFilteredDailyTimeSeriesByModule
GO   

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetFilteredDailyTimeSeriesByModule
	@ExcludedActionTypes NVARCHAR(MAX),
	@PortalId INT,
	@PeriodEndDate DATETIME,
	@NumDataPoints INT
AS
BEGIN		
	DECLARE @RangeCounter INT
	SET @RangeCounter = 0

	DECLARE @ResultsTable TABLE
	(	
		RangeIndex INT,
		DesktopModuleId INT,
		MetricCount INT,
		TimeSliceStart DATETIME,
		TimeSliceEnd DATETIME
	)
	DECLARE @Filtered TABLE
	(
		ExcludedType NVARCHAR(MAX)
	)

	INSERT INTO @Filtered (ExcludedType) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@ExcludedActionTypes, ','));
	WHILE @RangeCounter < @numDataPoints
		BEGIN
			DECLARE @TimeSliceStart DATETIME
			DECLARE @TimeSliceEnd DATETIME
			SET @TimeSliceStart = DATEADD(DAY, -@NumDataPoints + @RangeCounter, @PeriodEndDate)
			SET @TimeSliceEnd = DATEADD(DAY, 1, @TimeSliceStart)			
					
			INSERT INTO @ResultsTable (RangeIndex, DesktopModuleId, MetricCount, TimeSliceStart, TimeSliceEnd)
			SELECT @RangeCounter, f.DesktopModuleId, COUNT(*), @TimeSliceStart + 1, @TimeSliceEnd
			FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d ON f.DateId = d.DateId
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
			WHERE f.PortalId = @PortalId
				AND at.ActionType NOT IN (SELECT ExcludedType FROM @Filtered)
				AND (d.Year BETWEEN DatePart(YEAR, @TimeSliceStart) AND  DATEPART(YEAR, @TimeSliceEnd))
				AND (d.Month BETWEEN DATEPART(MONTH, @TimeSliceStart) AND DATEPART(MONTH, @TimeSliceEnd))
				AND (d.Day > DATEPART(DAY, @TimeSliceStart) AND d.Day <= DATEPART(DAY, @TimeSliceEnd))
			GROUP BY f.DesktopModuleId
			SET @RangeCounter = @RangeCounter + 1
		END
	SELECT * FROM @ResultsTable
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetFilteredMonthlyTimeSeriesByModule') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetFilteredMonthlyTimeSeriesByModule
GO  

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetFilteredMonthlyTimeSeriesByModule
	@ExcludedActionTypes NVARCHAR(MAX),
	@PortalId INT,
	@PeriodEndDate DATETIME,
	@NumDataPoints INT
AS
BEGIN		
	DECLARE @RangeCounter INT
	SET @RangeCounter = 0

	DECLARE @ResultsTable TABLE
	(	
		RangeIndex INT,
		DesktopModuleId INT,
		MetricCount INT,
		TimeSliceStart DATETIME,
		TimeSliceEnd DATETIME
	)
	DECLARE @Filtered TABLE
	(
		ExcludedType NVARCHAR(MAX)
	)

	INSERT INTO @Filtered (ExcludedType) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@ExcludedActionTypes, ','));
	WHILE @RangeCounter < @numDataPoints
		BEGIN
			DECLARE @TimeSliceStart DATETIME
			DECLARE @TimeSliceEnd DATETIME
			SET @TimeSliceStart = DATEADD(MONTH, -@NumDataPoints + @RangeCounter, @PeriodEndDate)
			SET @TimeSliceEnd = DATEADD(MONTH, 1, @TimeSliceStart)			
					
			INSERT INTO @ResultsTable (RangeIndex, DesktopModuleId, MetricCount, TimeSliceStart, TimeSliceEnd)
			SELECT @RangeCounter, f.DesktopModuleId, COUNT(*), @TimeSliceStart + 1, @TimeSliceEnd
			FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d ON f.DateId = d.DateId
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
			WHERE f.PortalId = @PortalId
				AND at.ActionType NOT IN (SELECT ExcludedType FROM @Filtered)
				AND (d.Year BETWEEN DatePart(YEAR, @TimeSliceStart) AND  DATEPART(YEAR, @TimeSliceEnd))
				AND (d.Month > DATEPART(MONTH, @TimeSliceStart) AND d.Month <= DATEPART(MONTH, @TimeSliceEnd))
			GROUP BY f.DesktopModuleId
			SET @RangeCounter = @RangeCounter + 1
		END
	SELECT * FROM @ResultsTable
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_QueryTopInfluencers') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryTopInfluencers
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryTopInfluencers
	@PortalId INT,
	@EndingDate DATETIME,
	@Interval INT,
	@PageIndex INT,
	@PageSize INT
AS
BEGIN		
	DECLARE @Lower INT = CAST(convert(varchar, DATEADD(DAY, - @Interval, @EndingDate), 112) as int)

	;WITH TopInfluencers AS
	(
		SELECT	U.UserID, U.DisplayName, RU.Influence,
				ROW_NUMBER() OVER (ORDER BY Influence DESC) AS RowNumber
		FROM	{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup RU WITH (NOLOCK)
					INNER JOIN {databaseOwner}{objectQualifier}Users U WITH (NOLOCK)
						ON U.UserID = RU.UserId AND U.IsDeleted = 0
					INNER JOIN {databaseOwner}{objectQualifier}UserPortals UP WITH (NOLOCK)
						ON U.UserID = UP.UserId AND UP.PortalId = @PortalId AND UP.IsDeleted = 0
		WHERE	RU.PortalId = @PortalId
		  AND	RU.Date >= @Lower
		  AND	RU.Interval = @Interval
		  AND	DesktopModuleId = -1 --Influence is available site wide only
		  --AND   RU.Influence > 0
	)
	SELECT	TOP(@PageSize) UserId, DisplayName, Influence AS Value
	FROM	TopInfluencers RU
	WHERE	RowNumber > @PageIndex
END
GO

/********************************************************
 * SPROC: Analytics_Warehouse_QueryTopTopActiveUsers
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Warehouse_QueryTopTopActiveUsers]', N'P') IS NULL
	EXEC('CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_QueryTopTopActiveUsers] AS BEGIN SELECT 1 END');
GO

ALTER PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_QueryTopTopActiveUsers]
	@PortalId INT,
	@DesktopModuleId INT,
	@EndingDate DATETIME,
	@Interval INT,
	@PageIndex INT,
	@PageSize INT
AS
BEGIN
	DECLARE @Lower INT = CAST(convert(varchar, DATEADD(DAY, - @Interval, @EndingDate), 112) as int)

	;WITH TopActiveUsers AS
	(
		SELECT	U.UserID, U.DisplayName, RU.Activities,
				ROW_NUMBER() OVER (ORDER BY Activities DESC) AS RowNumber
		FROM	{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup RU WITH (NOLOCK)
					INNER JOIN {databaseOwner}{objectQualifier}Users U WITH (NOLOCK)
						ON U.UserID = RU.UserId AND U.IsDeleted = 0
					INNER JOIN {databaseOwner}{objectQualifier}UserPortals UP WITH (NOLOCK)
						ON U.UserID = UP.UserId AND UP.PortalId = @PortalId AND UP.IsDeleted = 0
		WHERE	RU.PortalId = @PortalId
		  AND	RU.Date >= @Lower
		  AND	RU.Interval = @Interval
		  AND	RU.DesktopModuleId = @DesktopModuleId
		  --AND   RU.Activities > 0
	)
	SELECT	TOP(@PageSize) UserId, DisplayName, Activities AS Value
	FROM	TopActiveUsers RU
	WHERE	RowNumber > @PageIndex
END
GO

/********************************************************
 * SPROC: Analytics_Warehouse_QueryTopRankers
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Warehouse_QueryTopRankers]', N'P') IS NULL
	EXEC('CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_QueryTopRankers] AS BEGIN SELECT 1 END');
GO

ALTER PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_QueryTopRankers]
	@PortalId INT,
	@DesktopModuleId INT,
	@EndingDate DATETIME,
	@Interval INT,
	@PageIndex INT,
	@PageSize INT
AS
BEGIN
	DECLARE @Lower INT = CAST(convert(varchar, DATEADD(DAY, - @Interval, @EndingDate), 112) as int)
	;WITH TopRankers AS
	(
		SELECT	U.UserID, U.DisplayName, RU.ReputationPoints,
				ROW_NUMBER() OVER (ORDER BY ReputationPoints DESC) AS RowNumber
		FROM	{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup RU WITH (NOLOCK)
					INNER JOIN {databaseOwner}{objectQualifier}Users U WITH (NOLOCK)
						ON U.UserID = RU.UserId AND U.IsDeleted = 0
					INNER JOIN {databaseOwner}{objectQualifier}UserPortals UP WITH (NOLOCK)
						ON U.UserID = UP.UserId AND UP.PortalId = @PortalId AND UP.IsDeleted = 0
		WHERE	RU.PortalId = @PortalId
		  AND	RU.Date >= @Lower
		  AND	RU.Interval = @Interval
		  AND	RU.DesktopModuleId =  @DesktopModuleId
		  --AND   RU.ReputationPoints > 0
	)
	SELECT	TOP(@PageSize) UserId, DisplayName, ReputationPoints AS Value
	FROM	TopRankers RU
	WHERE	RowNumber > @PageIndex
END
GO

/********************************************************
 * FUNCTION: Analytics_GetTimeBoundaries
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_GetTimeBoundaries]') IS NOT NULL
	DROP FUNCTION {databaseOwner}{objectQualifier}Analytics_GetTimeBoundaries
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}Analytics_GetTimeBoundaries](@EndDate datetime, @Interval int)
	RETURNS @Table TABLE ([LowerBound] datetime, [UpperBound] datetime)
AS
BEGIN
	DECLARE @DtDiff AS int
	DECLARE @Counter AS int = 0

	--Note: these values are coming from the "enum AnalyticsPeriod" in C# code
	IF @Interval = 1 -- day => 24 hours back
		WHILE @Counter < 24
			BEGIN
				SET @DtDiff = DATEDIFF(hour, 0, @EndDate)
				INSERT INTO @Table SELECT dateadd(hour, @DtDiff, 0), dateadd(hour, @DtDiff + 1, 0) -- hour
				SET @EndDate = dateadd(hour, @DtDiff - 1, 0)
				SET @Counter = @Counter + 1
			END
	ELSE IF @Interval = 7 -- week => 7 days back
		WHILE @Counter < 7
			BEGIN
				SET @DtDiff = DATEDIFF(day, 0, @EndDate)
				INSERT INTO @Table SELECT CAST(dateadd(day, @DtDiff, 0) AS DATE), CAST(dateadd(day, @DtDiff + 1, 0) AS DATE) -- day boundary
				SET @EndDate = dateadd(day, @DtDiff - 1, 0)
				SET @Counter = @Counter + 1
			END
	ELSE IF @Interval = 28 -- month => 28 days back
		WHILE @Counter < 28
			BEGIN
				SET @DtDiff = DATEDIFF(day, 0, @EndDate)
				INSERT INTO @Table SELECT CAST(dateadd(day, @DtDiff, 0) AS DATE), CAST(dateadd(day, @DtDiff + 1, 0) AS DATE) -- day boundary
				SET @EndDate = dateadd(day, @DtDiff - 1, 0)
				SET @Counter = @Counter + 1
			END
	ELSE -- @Interval = 91 or 364 -- quarter or year => 12 months back
		WHILE @Counter < 12
			BEGIN
				SET @DtDiff = DATEDIFF(month, 0, @EndDate)
				INSERT INTO @Table SELECT CAST(dateadd(month, @DtDiff, 0) AS DATE), CAST(dateadd(month, @DtDiff + 1, 0) AS DATE) -- month
				SET @EndDate = dateadd(month, @DtDiff - 1, 0)
				SET @Counter = @Counter + 1
			END
	RETURN
END
GO

/********************************************************
 * INDEX: Analytics_PageTime_TabId
 ********************************************************/
 IF NOT EXISTS (SELECT 1 FROM sys.indexes
				WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_PageTime]')
				AND name = N'IX_{objectQualifier}Analytics_PageTime_TabId')
    CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_PageTime_TabId]
		ON {databaseOwner}[{objectQualifier}Analytics_PageTime] ([TabId])
GO

/********************************************************
 * INDEX: Analytics_PageTime_PID_UID
 ********************************************************/
 IF NOT EXISTS (SELECT 1 FROM sys.indexes
				WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_PageTime]')
				AND name = N'IX_{objectQualifier}Analytics_PageTime_PID_UID')
    CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Analytics_PageTime_PID_UID]
		ON {databaseOwner}[{objectQualifier}Analytics_PageTime] ([PortalId],[UserId])
		INCLUDE ([TotalSeconds])
GO

/********************************************************
 * SPROC: Analytics_Calculate_PageTime
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Calculate_PageTime]', N'P') IS NULL
	EXEC('CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Calculate_PageTime] AS BEGIN SELECT 1 END');
GO

ALTER PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Calculate_PageTime]
	@PortalId int,
	@LowerBound smalldatetime,
	@UpperBound smalldatetime
AS
BEGIN
	DECLARE @AnonymousViews bigint
	DECLARE @AnonymousTotalSeconds bigint
	DECLARE @RegisteredViews bigint
	DECLARE @RegisteredTotalSeconds bigint
	DECLARE @TotalViews bigint
	DECLARE @TotalSeconds bigint
	DECLARE @TabId int
	DECLARE @TABS TABLE(TabId int)

	INSERT INTO @TABS (TabId) VALUES(-1)
	INSERT INTO @TABS (TabId) (SELECT DISTINCT TabId FROM {databaseOwner}{objectQualifier}Analytics_PageTime WITH (NOLOCK) WHERE TabId >  0)

	DECLARE TabCursor CURSOR FOR
		SELECT TabId FROM @TABS ORDER BY TabId

	OPEN  TabCursor
	FETCH NEXT FROM TabCursor INTO @TabId

	WHILE @@FETCH_STATUS = 0
	BEGIN

		SELECT	@AnonymousViews = COUNT(*),
				@AnonymousTotalSeconds = COALESCE(SUM(CONVERT(bigint,TotalSeconds)), 0)
		FROM	{databaseOwner}[{objectQualifier}Analytics_PageTime] WITH (NOLOCK)
		WHERE	[PortalId] = @PortalId AND ([CreatedOnDate] BETWEEN @LowerBound AND @UpperBound)
		  AND	(@TabId < 0 OR [TabId] = @TabId)
		  AND	[UserId] < 0

		SELECT	@RegisteredViews = COUNT(*),
				@RegisteredTotalSeconds = COALESCE(SUM(CONVERT(bigint,TotalSeconds)), 0)
		FROM	{databaseOwner}[{objectQualifier}Analytics_PageTime] WITH (NOLOCK)
		WHERE	[PortalId] = @PortalId AND ([CreatedOnDate] BETWEEN @LowerBound AND @UpperBound)
		  AND	(@TabId < 0 OR [TabId] = @TabId)
		  AND	[UserId] >= 0

		SELECT	@TotalSeconds = COALESCE(SUM(CONVERT(bigint,TotalSeconds)), 0)
		FROM	{databaseOwner}[{objectQualifier}Analytics_PageTime] WITH (NOLOCK)
		WHERE	[PortalId] = @PortalId AND ([CreatedOnDate] BETWEEN @LowerBound AND @UpperBound)
		  AND	(@TabId < 0 OR [TabId] = @TabId)

		SELECT	@TotalViews = @AnonymousViews + @RegisteredViews

		IF (@TotalViews > 0 OR @TotalSeconds > 0)
		BEGIN
			IF EXISTS(
					SELECT	1
					FROM	{databaseOwner}[{objectQualifier}Analytics_PageTime_Aggregate] WITH (NOLOCK)
					WHERE	[PortalId] = @PortalId AND [LowerBound] = @LowerBound AND [UpperBound] = @UpperBound AND [TabId] = @TabId)
			BEGIN
				UPDATE {databaseOwner}[{objectQualifier}Analytics_PageTime_Aggregate]
					SET
						[AnonymousViews] = @AnonymousViews,
						[AnonymousTotalSeconds] = @AnonymousTotalSeconds,
						[RegisteredViews] = @RegisteredViews,
						[RegisteredTotalSeconds] = @RegisteredTotalSeconds,
						[TotalViews] = @TotalViews,
						[TotalSeconds] = @TotalSeconds
					WHERE
						[PortalId] = @PortalId AND [LowerBound] = @LowerBound AND [UpperBound] = @UpperBound AND [TabId] = @TabId
			END
			ELSE
			BEGIN
				INSERT INTO {databaseOwner}[{objectQualifier}Analytics_PageTime_Aggregate]
					([PortalId],
					 [LowerBound],
					 [UpperBound],
					 [TabId],
					 [AnonymousViews],
					 [AnonymousTotalSeconds],
					 [RegisteredViews],
					 [RegisteredTotalSeconds],
					 [TotalViews],
					 [TotalSeconds])
				VALUES
					(@PortalId,
					 @LowerBound,
					 @UpperBound,
					 @TabId,
					 COALESCE(@AnonymousViews, 0),
					 COALESCE(@AnonymousTotalSeconds, 0),
					 COALESCE(@RegisteredViews, 0),
					 COALESCE(@RegisteredTotalSeconds, 0),
					 COALESCE(@TotalViews, 0),
					 COALESCE(@TotalSeconds, 0))
			END
		END

		FETCH NEXT FROM TabCursor INTO @TabId
	END

	CLOSE TabCursor
	DEALLOCATE TabCursor
END
GO

/********************************************************
 * SPROC: Analytics_Get_Aggregate_PageTime2
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Get_Aggregate_PageTime2]', N'P') IS NULL
	EXEC('CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Get_Aggregate_PageTime2] AS BEGIN SELECT 1 END');
GO

ALTER PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Get_Aggregate_PageTime2]
	@PortalId int,
	@EndDate datetime,
	@Interval int
AS
BEGIN
	CREATE TABLE #tempBounds (PortalId int, LowerBound datetime, UpperBound datetime)
 	INSERT INTO #tempBounds SELECT @PortalId AS PortalId, * FROM {databaseOwner}{objectQualifier}Analytics_GetTimeBoundaries(@EndDate, @Interval)

	SELECT	t.PortalId, t.LowerBound, t.UpperBound,
			COALESCE(pt.SampleId, 0) AS SampleId, COALESCE(pt.TabId, -1) AS TabId,
			COALESCE(pt.AnonymousViews, 0) AS AnonymousViews, COALESCE(pt.AnonymousTotalSeconds, 0) AS AnonymousTotalSeconds,
			COALESCE(pt.RegisteredViews, 0) AS AnonymousTotalSeconds, COALESCE(pt.RegisteredTotalSeconds, 0) AS RegisteredTotalSeconds,
			COALESCE(pt.TotalViews, 0) AS TotalViews, COALESCE(pt.TotalSeconds, 0) AS TotalSeconds
	FROM	#tempBounds t
				LEFT OUTER JOIN {databaseOwner}{objectQualifier}Analytics_PageTime_Aggregate AS pt WITH (NOLOCK)
					ON t.PortalId = pt.PortalId AND t.LowerBound = pt.LowerBound AND t.UpperBound = pt.UpperBound AND pt.TabId = -1
	ORDER BY LowerBound ASC

	DROP TABLE #tempBounds
END
GO

/********************************************************
 * SPROC: Analytics_Get_Aggregate_ModulePageTime
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Get_Aggregate_ModulePageTime]', N'P') IS NULL
	EXEC('CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Get_Aggregate_ModulePageTime] AS BEGIN SELECT 1 END');
GO

ALTER PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Get_Aggregate_ModulePageTime]
	@PortalId int,
	@EndDate datetime,
	@Interval int,
	@ModuleTabs NVARCHAR(MAX)
AS
BEGIN
	CREATE TABLE #tempBounds (PortalId int, LowerBound datetime, UpperBound datetime)
	INSERT INTO #tempBounds SELECT @PortalId AS PortalId, * FROM {databaseOwner}{objectQualifier}Analytics_GetTimeBoundaries(@EndDate, @Interval)

	CREATE TABLE #tempTabs (TabId int)
	INSERT INTO #tempTabs (TabId) SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@ModuleTabs, ',')

	;WITH AGGRGT AS (
		SELECT	t.PortalId, t.LowerBound, t.UpperBound,
				COALESCE(pt.SampleId, 0) AS SampleId, COALESCE(pt.TabId, -1) AS TabId,
				COALESCE(pt.AnonymousViews, 0) AS AnonymousViews, COALESCE(pt.AnonymousTotalSeconds, 0) AS AnonymousTotalSeconds,
				COALESCE(pt.RegisteredViews, 0) AS RegisteredViews, COALESCE(pt.RegisteredTotalSeconds, 0) AS RegisteredTotalSeconds,
				COALESCE(pt.TotalViews, 0) AS TotalViews, COALESCE(pt.TotalSeconds, 0) AS TotalSeconds
		FROM	#tempBounds t
						LEFT OUTER JOIN {databaseOwner}{objectQualifier}Analytics_PageTime_Aggregate AS pt WITH (NOLOCK)
							ON t.PortalId = pt.PortalId AND t.LowerBound = pt.LowerBound AND t.UpperBound = pt.UpperBound AND pt.TabId IN (SELECT TabId FROM #tempTabs)
	)
	SELECT	LowerBound, MIN(UpperBound) AS UpperBound, MIN(PortalId) AS PortalId, MIN(TabId) AS TabId,
			SUM(AnonymousViews) AS AnonymousViews, SUM(AnonymousTotalSeconds) AS AnonymousTotalSeconds,
			SUM(RegisteredViews) AS RegisteredViews, SUM(RegisteredTotalSeconds) AS RegisteredTotalSeconds,
			SUM(TotalViews) AS TotalViews, SUM(TotalSeconds) AS TotalSeconds
	FROM	AGGRGT
	GROUP BY LowerBound
	ORDER BY LowerBound

	DROP TABLE #tempBounds
END
GO

/********************************************************
 * SPROC: Analytics_Get_DueUserTasks
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Get_DueUserTasks]', N'P') IS NULL
	EXEC('CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Get_DueUserTasks] AS BEGIN SELECT 1 END');
GO

ALTER PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Get_DueUserTasks]
	@PortalId int
AS
BEGIN
	-- limit retrieved records so that it won't take forever to process them in the scheduler
	SELECT	TOP 1000	[PortalId], [UserId]
	FROM	{databaseOwner}[{objectQualifier}Analytics_Users] WITH (NOLOCK)
	WHERE	[PortalId] = @PortalId AND [ProcessDate] <= getutcdate()
	ORDER BY ProcessDate ASC
END
GO

/********************************************************
 * DML: Update existing record so we kick off Analytics
 *      for those users who have no recent activities.
 ********************************************************/

UPDATE {databaseOwner}{objectQualifier}Analytics_Users SET ProcessDate = getutcdate()
WHERE UserId in (
	SELECT au.UserId
	FROM {databaseOwner}{objectQualifier}Analytics_Users au WITH (NOLOCK)
		 INNER JOIN {databaseOwner}{objectQualifier}Users u WITH (NOLOCK) ON au.UserId = u.UserID AND u.IsDeleted = 0
	WHERE au.ProcessDate IS NULL
)
GO

/********************************************************
 * SPROC: Analytics_Warehouse_QueryModulePerformance
 ********************************************************/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_QueryModulePerformance') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryModulePerformance
GO  

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryModulePerformance
	@PortalId INT,
	@EndDay INT,
	@NumDataPoints INT,
	@DesktopModuleId INT,
	@Engagement FLOAT OUTPUT,
	@CreateCount INT OUTPUT,
	@UniqueViewCount INT OUTPUT
AS
BEGIN		
	DECLARE @UniqueViews INT
	DECLARE @Numerator FLOAT
	DECLARE @Denominator FLOAT
	DECLARE @EngagementActions NVARCHAR(MAX)

	SET @EngagementActions = 'Created,FormedRelationship,Shared,Interacted,DissolvedRelationship,Deleted'

	DECLARE @ResultsTable TABLE
	(	
		ActionId INT PRIMARY KEY,
		ActionType NVARCHAR(MAX),
		ActionCount INT
	)

	DECLARE @ActionTypes TABLE
	(
		ActionTypeId INT IDENTITY(1,1) PRIMARY KEY,
		ActionType NVARCHAR(MAX)
	)

	INSERT INTO @ActionTypes (ActionType) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@EngagementActions, ','));

	INSERT INTO @ResultsTable 
	SELECT at.ActionTypeId, at.ActionType, COUNT(*) AS ActionTypeCount 
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d ON f.DateId = d.DateId
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
		WHERE f.PortalId = @PortalId
			AND f.DesktopModuleId = @DesktopModuleId
			AND (at.ActionType IN (SELECT ActionType FROM @ActionTypes))
			AND d.TotalDays > (@EndDay - @NumDataPoints) 
			AND d.TotalDays <= @EndDay
		GROUP BY at.ActionTypeId, at.ActionType

	SELECT @UniqueViews = (SELECT TOP 1 COUNT(*) OVER ()
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d ON f.DateId = d.DateId
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
		WHERE f.PortalId = @PortalId
			AND f.DesktopModuleId = @DesktopModuleId
			AND (at.ActionType = 'Viewed')
			AND d.TotalDays > (@EndDay - @NumDataPoints) 
			AND d.TotalDays <= @EndDay
		GROUP BY f.ContentId, f.UserId)

	SELECT @Numerator =
	(
		@UniqueViews +
		COALESCE((SELECT ActionCount FROM @ResultsTable WHERE ActionType = 'Created'),0) +
		COALESCE((SELECT ActionCount FROM @ResultsTable WHERE ActionType = 'FormedRelationship'),0) +
		COALESCE((SELECT ActionCount FROM @ResultsTable WHERE ActionType = 'Shared'),0) +
		COALESCE((SELECT ActionCount FROM @ResultsTable WHERE ActionType = 'Interacted'),0) -
		COALESCE((SELECT ActionCount FROM @ResultsTable WHERE ActionType = 'DissolvedRelationship'),0) -
		COALESCE((SELECT ActionCount FROM @ResultsTable WHERE ActionType = 'Deleted'),0) - 1
	) 
	FROM @ResultsTable

	SELECT @Denominator =
	(
		COALESCE((SELECT ActionCount FROM @ResultsTable WHERE ActionType = 'Shared'),0) + 
		COALESCE(@UniqueViews,0)	
	) 
	FROM @ResultsTable

	SELECT @Engagement = COALESCE(@Numerator / NULLIF(@Denominator,0), 0)
	SET @CreateCount = COALESCE((SELECT ActionCount FROM @ResultsTable WHERE ActionType = 'Created'),0)
	SET @UniqueViewCount = COALESCE(@UniqueViews,0)	
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_QueryMultipleModulePerformance') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryMultipleModulePerformance
GO  

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryMultipleModulePerformance
	@PortalId INT,
	@EndDay INT,
	@NumDataPoints INT,
	@ComparativeTermOffset INT,
	@DesktopModuleIdList NVARCHAR(MAX)
AS
BEGIN
	DECLARE @ModuleCounter INT
	DECLARE @DesktopModuleId INT
	DECLARE @NumModules INT	
	DECLARE @OffsetEndDay INT

	DECLARE @TempEngagement FLOAT
	DECLARE @ComparativeTermEngagement FLOAT
	DECLARE @TempViewCount INT
	DECLARE @TempCreateCount INT
	DECLARE @ComparativeTermViewCount INT
	DECLARE @ComparativeTermCreateCount INT
	
	DECLARE @DesktopModuleIds TABLE
	(		
		DesktopModuleId INT PRIMARY KEY,
		ModuleRow INT
	)

	DECLARE @Results TABLE
	(
		DesktopModuleId INT PRIMARY KEY,
		Engagement FLOAT,
		ComparativeTermEngagement FLOAT,
		CreateCount INT,
		UniqueViewCount INT		
	)

	SET @OffsetEndDay = @EndDay - @ComparativeTermOffset
	SET @ModuleCounter = 0

	INSERT INTO @DesktopModuleIds (DesktopModuleId, ModuleRow) (SELECT val,  ROW_NUMBER() OVER(ORDER BY val DESC) FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@DesktopModuleIdList, ','));
	SELECT @NumModules = COUNT(*) FROM @DesktopModuleIds

	WHILE @ModuleCounter < @NumModules
	BEGIN	
		SELECT @DesktopModuleId = DesktopModuleId FROM @DesktopModuleIds WHERE ModuleRow = @ModuleCounter + 1

		EXECUTE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryModulePerformance
		@PortalId,
		@EndDay,
		@NumDataPoints,
		@DesktopModuleId,
		@TempEngagement OUTPUT,
		@TempCreateCount OUTPUT,
		@TempViewCount OUTPUT

		EXECUTE {databaseOwner}{objectQualifier}Analytics_Warehouse_QueryModulePerformance
		@PortalId,
		@OffsetEndDay,
		@NumDataPoints,
		@DesktopModuleId,
		@ComparativeTermEngagement OUTPUT,
		@ComparativeTermCreateCount OUTPUT,
		@ComparativeTermViewCount OUTPUT
			
		INSERT INTO @Results (DesktopModuleId, Engagement, ComparativeTermEngagement, CreateCount, UniqueViewCount)
		VALUES(@DesktopModuleId, @TempEngagement, @ComparativeTermEngagement, @TempCreateCount, @TempViewCount)

		SET @ModuleCounter = @ModuleCounter + 1
	END
	SELECT * FROM @Results
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetHourlyTimeSeriesByActionType') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetHourlyTimeSeriesByActionType
GO  

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetHourlyTimeSeriesByActionType
	@IncludedActionTypes NVARCHAR(MAX),
	@PortalId INT,
	@DesktopModuleId INT,
	@PeriodEndDate DATETIME,
	@NumDataPoints INT
AS
BEGIN		
	DECLARE @RangeCounter INT
	SET @RangeCounter = 0

	DECLARE @ResultsTable TABLE
	(	
		RangeIndex INT,
		ActionTypeId INT,
		MetricCount INT,
		TimeSliceStart DATETIME,
		TimeSliceEnd DATETIME
	)
	DECLARE @ActionTypes TABLE
	(
		ActionType NVARCHAR(MAX)
	)

	INSERT INTO @ActionTypes (ActionType) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@IncludedActionTypes, ','));
	WHILE @RangeCounter < @numDataPoints
		BEGIN
			DECLARE @TimeSliceStart DATETIME
			DECLARE @TimeSliceEnd DATETIME
			SET @TimeSliceStart = DATEADD(HOUR, -@NumDataPoints + @RangeCounter, @PeriodEndDate)
			SET @TimeSliceEnd = DATEADD(HOUR, 1, @TimeSliceStart)			
					
			INSERT INTO @ResultsTable (RangeIndex, ActionTypeId, MetricCount, TimeSliceStart, TimeSliceEnd)
			SELECT @RangeCounter, f.ActionTypeId, COUNT(*), @TimeSliceStart + 1, @TimeSliceEnd
			FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d ON f.DateId = d.DateId
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
			WHERE f.PortalId = @PortalId
				AND f.DesktopModuleId = @DesktopModuleId
				AND at.ActionType IN (SELECT ActionType FROM @ActionTypes)
				AND (d.Year BETWEEN DATEPART(YEAR, @TimeSliceStart) AND  DATEPART(YEAR, @TimeSliceEnd))
				AND (d.Month BETWEEN DATEPART(MONTH, @TimeSliceStart) AND DATEPART(MONTH, @TimeSliceEnd))
				AND (d.Day BETWEEN DATEPART(DAY, @TimeSliceStart) AND DATEPART(DAY, @TimeSliceEnd))
				AND (d.Hour > DATEPART(HOUR, @TimeSliceStart) AND d.Hour <= DATEPART(HOUR, @TimeSliceEnd))
			GROUP BY f.ActionTypeId
			SET @RangeCounter = @RangeCounter + 1
		END
	SELECT * FROM @ResultsTable
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetDailyTimeSeriesByActionType') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetDailyTimeSeriesByActionType
GO  

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetDailyTimeSeriesByActionType
	@IncludedActionTypes NVARCHAR(MAX),
	@PortalId INT,
	@DesktopModuleId INT,
	@PeriodEndDate DATETIME,
	@NumDataPoints INT
AS
BEGIN		
	DECLARE @RangeCounter INT
	SET @RangeCounter = 0

	DECLARE @ResultsTable TABLE
	(	
		RangeIndex INT,
		ActionTypeId INT,
		MetricCount INT,
		TimeSliceStart DATETIME,
		TimeSliceEnd DATETIME
	)
	DECLARE @ActionTypes TABLE
	(
		ActionType NVARCHAR(MAX)
	)

	INSERT INTO @ActionTypes (ActionType) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@IncludedActionTypes, ','));
	WHILE @RangeCounter < @numDataPoints
		BEGIN
			DECLARE @TimeSliceStart DATETIME
			DECLARE @TimeSliceEnd DATETIME
			SET @TimeSliceStart = DATEADD(DAY, -@NumDataPoints + @RangeCounter, @PeriodEndDate)
			SET @TimeSliceEnd = DATEADD(DAY, 1, @TimeSliceStart)			
					
			INSERT INTO @ResultsTable (RangeIndex, ActionTypeId, MetricCount, TimeSliceStart, TimeSliceEnd)
			SELECT @RangeCounter, f.ActionTypeId, COUNT(*), @TimeSliceStart + 1, @TimeSliceEnd
			FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d ON f.DateId = d.DateId
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
			WHERE f.PortalId = @PortalId
				AND f.DesktopModuleId = @DesktopModuleId
				AND at.ActionType IN (SELECT ActionType FROM @ActionTypes)
				AND (d.Year BETWEEN DATEPART(YEAR, @TimeSliceStart) AND  DATEPART(YEAR, @TimeSliceEnd))
				AND (d.Month BETWEEN DATEPART(MONTH, @TimeSliceStart) AND DATEPART(MONTH, @TimeSliceEnd))
				AND (d.Day > DATEPART(DAY, @TimeSliceStart) AND d.Day <= DATEPART(DAY, @TimeSliceEnd))
			GROUP BY f.ActionTypeId
			SET @RangeCounter = @RangeCounter + 1
		END
	SELECT * FROM @ResultsTable
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetMonthlyTimeSeriesByActionType') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetMonthlyTimeSeriesByActionType
GO  

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetMonthlyTimeSeriesByActionType
	@IncludedActionTypes NVARCHAR(MAX),
	@PortalId INT,
	@DesktopModuleId INT,
	@PeriodEndDate DATETIME,
	@NumDataPoints INT
AS
BEGIN		
	DECLARE @RangeCounter INT
	SET @RangeCounter = 0

	DECLARE @ResultsTable TABLE
	(	
		RangeIndex INT,
		ActionTypeId INT,
		MetricCount INT,
		TimeSliceStart DATETIME,
		TimeSliceEnd DATETIME
	)
	DECLARE @ActionTypes TABLE
	(
		ActionType NVARCHAR(MAX)
	)

	INSERT INTO @ActionTypes (ActionType) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@IncludedActionTypes, ','));
	WHILE @RangeCounter < @numDataPoints
		BEGIN
			DECLARE @TimeSliceStart DATETIME
			DECLARE @TimeSliceEnd DATETIME
			SET @TimeSliceStart = DATEADD(MONTH, -@NumDataPoints + @RangeCounter, @PeriodEndDate)
			SET @TimeSliceEnd = DATEADD(MONTH, 1, @TimeSliceStart)			
					
			INSERT INTO @ResultsTable (RangeIndex, ActionTypeId, MetricCount, TimeSliceStart, TimeSliceEnd)
			SELECT @RangeCounter, f.ActionTypeId, COUNT(*), @TimeSliceStart + 1, @TimeSliceEnd
			FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d ON f.DateId = d.DateId
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
			WHERE f.PortalId = @PortalId
				AND f.DesktopModuleId = @DesktopModuleId
				AND at.ActionType IN (SELECT ActionType FROM @ActionTypes)
				AND (d.Year BETWEEN DatePart(YEAR, @TimeSliceStart) AND  DATEPART(YEAR, @TimeSliceEnd))
				AND (d.Month > DATEPART(MONTH, @TimeSliceStart) AND d.Month <= DATEPART(MONTH, @TimeSliceEnd))
			GROUP BY f.ActionTypeId
			SET @RangeCounter = @RangeCounter + 1
		END
	SELECT * FROM @ResultsTable
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetProblemArea_SocialItemsWithNoAction') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetProblemArea_SocialItemsWithNoAction
GO  

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetProblemArea_SocialItemsWithNoAction
	@PortalId INT,
	@DesktopModuleId INT,
	@ProblemOffSetInHours INT,
	@Start DATETIME,
	@End DATETIME,
	@CreatedAction NVARCHAR(MAX),
	@ActionsToCheck NVARCHAR(MAX),
	@IgnoreActionDoneByItemCreator BIT
AS
BEGIN			
	DECLARE @TotalItems INT
	DECLARE @TotalProblematicItems INT
	
	DECLARE @Start_Total_Hours INT = DATEDIFF(hour, CONVERT(DATE, '0001-01-01'), @Start)
	DECLARE @Problem_Scope_End DATETIME = DATEADD(hour, -@ProblemOffSetInHours, @End)
	DECLARE @Problem_Scope_End_Total_Hours INT = DATEDIFF(hour, CONVERT(DATE, '0001-01-01'), @Problem_Scope_End)
	DECLARE @End_Total_Hours INT = DATEDIFF(hour, CONVERT(DATE, '0001-01-01'), @End)
		
	DECLARE @Actions TABLE
	(
		ActionName NVARCHAR(MAX)
	)

	INSERT INTO @Actions (ActionName) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@ActionsToCheck, ','));

	-- GET TOTAL SOCIAL ITEMS CREATED IN THE SELECTED PERIOD W/NO ACTION
	SELECT @TotalProblematicItems = COUNT(*) FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f WITH (NOLOCK)
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d WITH (NOLOCK) ON f.DateId = d.DateId
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad WITH (NOLOCK) ON f.ActionDefinitionId = ad.ActionDefinitionId
		WHERE 
		f.PortalId = @PortalId and 
		f.DesktopModuleId = @DesktopModuleId and 
		ad.ActionName = @CreatedAction and 
		(d.TotalHours BETWEEN @Start_Total_Hours AND @Problem_Scope_End_Total_Hours) and
		f.ContentId not in(
			SELECT ContentId FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f2 WITH (NOLOCK)
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d2 WITH (NOLOCK) ON f2.DateId = d2.DateId
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad2 WITH (NOLOCK) ON f2.ActionDefinitionId = ad2.ActionDefinitionId 		
			WHERE f2.ContentId = f.ContentId and 
			(@IgnoreActionDoneByItemCreator = 0 OR f.UserId != f2.UserId) and
			ad2.ActionName IN (SELECT ActionName FROM @Actions) and
			(d2.TotalHours BETWEEN @Start_Total_Hours AND @End_Total_Hours)
		)
		
	-- GET TOTAL SOCIAL ITEMS CREATED IN THE SELECTED PERIOD
	SELECT @TotalItems = COUNT(*) FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f WITH (NOLOCK)
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d WITH (NOLOCK) ON f.DateId = d.DateId
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad WITH (NOLOCK) ON f.ActionDefinitionId = ad.ActionDefinitionId
		WHERE f.PortalId = @PortalId and f.DesktopModuleId = @DesktopModuleId and ad.ActionName = @CreatedAction
		and (d.TotalHours BETWEEN @Start_Total_Hours AND @Problem_Scope_End_Total_Hours)
		
	SELECT @TotalItems TotalItems, @TotalProblematicItems TotalProblematicItems
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetProblemArea_SocialItemsWithAction') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetProblemArea_SocialItemsWithAction
GO  

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetProblemArea_SocialItemsWithAction
	@PortalId INT,
	@DesktopModuleId INT,
	@ProblemOffSetInHours INT,
	@Start DATETIME,
	@End DATETIME,
	@CreatedAction NVARCHAR(MAX),
	@ActionsToCheck NVARCHAR(MAX),
	@IgnoreActionDoneByItemCreator BIT
AS
BEGIN			
	DECLARE @TotalItems INT
	DECLARE @TotalProblematicItems INT
	
	DECLARE @Start_Total_Hours INT = DATEDIFF(hour, CONVERT(DATE, '0001-01-01'), @Start)
	DECLARE @Problem_Scope_End DATETIME = DATEADD(hour, -@ProblemOffSetInHours, @End)
	DECLARE @Problem_Scope_End_Total_Hours INT = DATEDIFF(hour, CONVERT(DATE, '0001-01-01'), @Problem_Scope_End)
	DECLARE @End_Total_Hours INT = DATEDIFF(hour, CONVERT(DATE, '0001-01-01'), @End)
		
	DECLARE @Actions TABLE
	(
		ActionName NVARCHAR(MAX)
	)

	INSERT INTO @Actions (ActionName) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@ActionsToCheck, ','));

	-- GET TOTAL SOCIAL ITEMS CREATED IN THE SELECTED PERIOD W/NO ACTION
	SELECT @TotalProblematicItems = COUNT(*) FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f WITH (NOLOCK)
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d WITH (NOLOCK) ON f.DateId = d.DateId
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad WITH (NOLOCK) ON f.ActionDefinitionId = ad.ActionDefinitionId
		WHERE 
		f.PortalId = @PortalId and 
		f.DesktopModuleId = @DesktopModuleId and 
		ad.ActionName = @CreatedAction and 
		(d.TotalHours BETWEEN @Start_Total_Hours AND @Problem_Scope_End_Total_Hours) and
		f.ContentId in(
			SELECT ContentId FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f2 WITH (NOLOCK)
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d2 WITH (NOLOCK) ON f2.DateId = d2.DateId
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad2 WITH (NOLOCK) ON f2.ActionDefinitionId = ad2.ActionDefinitionId 		
			WHERE f2.ContentId = f.ContentId and 
			(@IgnoreActionDoneByItemCreator = 0 OR f.UserId != f2.UserId) and
			ad2.ActionName IN (SELECT ActionName FROM @Actions) and
			(d2.TotalHours BETWEEN @Start_Total_Hours AND @End_Total_Hours)
		)
		
	-- GET TOTAL SOCIAL ITEMS CREATED IN THE SELECTED PERIOD
	SELECT @TotalItems = COUNT(*) FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f WITH (NOLOCK)
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d WITH (NOLOCK) ON f.DateId = d.DateId
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad WITH (NOLOCK) ON f.ActionDefinitionId = ad.ActionDefinitionId
		WHERE f.PortalId = @PortalId and f.DesktopModuleId = @DesktopModuleId and ad.ActionName = @CreatedAction
		and (d.TotalHours BETWEEN @Start_Total_Hours AND @Problem_Scope_End_Total_Hours)
		
	SELECT @TotalItems TotalItems, @TotalProblematicItems TotalProblematicItems
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetProblemArea_SocialItemsWithActionAndNoAction') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetProblemArea_SocialItemsWithActionAndNoAction
GO  

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetProblemArea_SocialItemsWithActionAndNoAction
	@PortalId INT,
	@DesktopModuleId INT,
	@ProblemOffSetInHours INT,
	@Start DATETIME,
	@End DATETIME,
	@CreatedAction NVARCHAR(MAX),
	@ActionsWith NVARCHAR(MAX),
	@ActionsWithout NVARCHAR(MAX)
AS
BEGIN			
	DECLARE @TotalItems INT
	DECLARE @TotalProblematicItems INT
	
	DECLARE @Start_Total_Hours INT = DATEDIFF(hour, CONVERT(DATE, '0001-01-01'), @Start)
	DECLARE @Problem_Scope_End DATETIME = DATEADD(hour, -@ProblemOffSetInHours, @End)
	DECLARE @Problem_Scope_End_Total_Hours INT = DATEDIFF(hour, CONVERT(DATE, '0001-01-01'), @Problem_Scope_End)
	DECLARE @End_Total_Hours INT = DATEDIFF(hour, CONVERT(DATE, '0001-01-01'), @End)
	
	DECLARE @ActionsWithTable TABLE
	(
		ActionName NVARCHAR(MAX)
	)

	INSERT INTO @ActionsWithTable (ActionName) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@ActionsWith, ','));

	
	DECLARE @ActionsWithoutTable TABLE
	(
		ActionName NVARCHAR(MAX)
	)

	INSERT INTO @ActionsWithoutTable (ActionName) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@ActionsWithout, ','));

	-- GET TOTAL SOCIAL ITEMS CREATED IN THE SELECTED PERIOD W/NO ACTION
	SELECT @TotalProblematicItems = COUNT(*) FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f WITH (NOLOCK)
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d WITH (NOLOCK) ON f.DateId = d.DateId
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad WITH (NOLOCK) ON f.ActionDefinitionId = ad.ActionDefinitionId
		WHERE 
		f.PortalId = @PortalId and 
		f.DesktopModuleId = @DesktopModuleId and 
		ad.ActionName = @CreatedAction and 
		(d.TotalHours BETWEEN @Start_Total_Hours AND @Problem_Scope_End_Total_Hours) and
		f.ContentId in (
			SELECT ContentId FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f2 WITH (NOLOCK)
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d2 WITH (NOLOCK) ON f2.DateId = d2.DateId
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad2 WITH (NOLOCK) ON f2.ActionDefinitionId = ad2.ActionDefinitionId 		
			WHERE f2.ContentId = f.ContentId and 
			ad2.ActionName IN (SELECT ActionName FROM @ActionsWithTable) and
			(d2.TotalHours BETWEEN @Start_Total_Hours AND @End_Total_Hours)
		) and
		f.ContentId not in(
			SELECT ContentId FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f2 WITH (NOLOCK)
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d2 WITH (NOLOCK) ON f2.DateId = d2.DateId
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad2 WITH (NOLOCK) ON f2.ActionDefinitionId = ad2.ActionDefinitionId 		
			WHERE f2.ContentId = f.ContentId and 
			ad2.ActionName IN (SELECT ActionName FROM @ActionsWithoutTable) and
			(d2.TotalHours BETWEEN @Start_Total_Hours AND @End_Total_Hours)
		)
		
	-- GET TOTAL SOCIAL ITEMS CREATED IN THE SELECTED PERIOD
	SELECT @TotalItems = COUNT(*) FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f WITH (NOLOCK)
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d WITH (NOLOCK) ON f.DateId = d.DateId
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad WITH (NOLOCK) ON f.ActionDefinitionId = ad.ActionDefinitionId
		WHERE f.PortalId = @PortalId and f.DesktopModuleId = @DesktopModuleId and ad.ActionName = @CreatedAction
		and (d.TotalHours BETWEEN @Start_Total_Hours AND @Problem_Scope_End_Total_Hours)
		
	SELECT @TotalItems TotalItems, @TotalProblematicItems TotalProblematicItems
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetProblemArea_SocialItemsWithMinimumActions') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetProblemArea_SocialItemsWithMinimumActions
GO  

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetProblemArea_SocialItemsWithMinimumActions
	@PortalId INT,
	@DesktopModuleId INT,
	@Start DATETIME,
	@End DATETIME,
	@CreatedAction NVARCHAR(MAX),
	@ActionsToCheck NVARCHAR(MAX),
	@MinimumToCheck INT,
	@HoursLimitToCheck INT
AS
BEGIN			
	DECLARE @TotalItems INT
	DECLARE @TotalProblematicItems INT
	
	DECLARE @Start_Total_Hours INT = DATEDIFF(hour, CONVERT(DATE, '0001-01-01'), @Start)
	DECLARE @End_Total_Hours INT = DATEDIFF(hour, CONVERT(DATE, '0001-01-01'), @End)
	
	DECLARE @Actions TABLE
	(
		ActionName NVARCHAR(MAX)
	)

	INSERT INTO @Actions (ActionName) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@ActionsToCheck, ','));

	SELECT @TotalProblematicItems = COUNT(*) FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f WITH (NOLOCK)
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d WITH (NOLOCK) ON f.DateId = d.DateId
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad WITH (NOLOCK) ON f.ActionDefinitionId = ad.ActionDefinitionId
		WHERE 
		f.PortalId = @PortalId and 
		f.DesktopModuleId = @DesktopModuleId and 
		ad.ActionName = @CreatedAction and 
		(d.TotalHours BETWEEN @Start_Total_Hours AND @End_Total_Hours) and
		( 
			SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f2 WITH (NOLOCK)		
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad2 WITH (NOLOCK) ON f2.ActionDefinitionId = ad2.ActionDefinitionId 		
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d2 WITH (NOLOCK) ON f2.DateId = d2.DateId
			WHERE f2.ContentId = f.ContentId 
			  AND ad2.ActionName IN (SELECT ActionName FROM @Actions)
			  AND (d2.TotalHours BETWEEN @Start_Total_Hours AND @End_Total_Hours)
			  AND (@HoursLimitToCheck IS NULL OR d2.TotalHours - d.TotalHours <= @HoursLimitToCheck)
		) >= @MinimumToCheck		
	SELECT @TotalItems = COUNT(*) FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f WITH (NOLOCK)
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d WITH (NOLOCK) ON f.DateId = d.DateId
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad WITH (NOLOCK) ON f.ActionDefinitionId = ad.ActionDefinitionId
		WHERE f.PortalId = @PortalId and f.DesktopModuleId = @DesktopModuleId and ad.ActionName = @CreatedAction
		and (d.TotalHours BETWEEN @Start_Total_Hours AND @End_Total_Hours)
	
	SELECT @TotalItems TotalItems, @TotalProblematicItems TotalProblematicItems
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetProblemArea_SocialItemsWithViewsButNoInteraction') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetProblemArea_SocialItemsWithViewsButNoInteraction
GO  

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetProblemArea_SocialItemsWithViewsButNoInteraction
	@PortalId INT,
	@DesktopModuleId INT,
	@ProblemOffSetInHours INT,
	@Start DATETIME,
	@End DATETIME,
	@CreatedAction NVARCHAR(MAX)
AS
BEGIN			
	DECLARE @TotalItems INT
	DECLARE @TotalProblematicItems INT
	
	DECLARE @Start_Total_Hours INT = DATEDIFF(hour, CONVERT(DATE, '0001-01-01'), @Start)
	DECLARE @Problem_Scope_End DATETIME = DATEADD(hour, -@ProblemOffSetInHours, @End)
	DECLARE @Problem_Scope_End_Total_Hours INT = DATEDIFF(hour, CONVERT(DATE, '0001-01-01'), @Problem_Scope_End)
	DECLARE @End_Total_Hours INT = DATEDIFF(hour, CONVERT(DATE, '0001-01-01'), @End)
	
	-- ITEMS WITH VIEWS BUT NO INTERACTION	
	SELECT @TotalProblematicItems = COUNT(*) FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f WITH (NOLOCK) 
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d WITH (NOLOCK) ON f.DateId = d.DateId
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad WITH (NOLOCK) ON f.ActionDefinitionId = ad.ActionDefinitionId
		WHERE 
		f.PortalId = @PortalId and 
		f.DesktopModuleId = @DesktopModuleId and 
		ad.ActionName = @CreatedAction and 
		((d.TotalHours) BETWEEN @Start_Total_Hours AND @Problem_Scope_End_Total_Hours) and
		f.ContentId not in ( -- WITH NO INTERACTION
			SELECT DISTINCT ContentId FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f2 WITH (NOLOCK)
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d2 WITH (NOLOCK) ON f2.DateId = d2.DateId
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at WITH (NOLOCK) ON f2.ActionTypeId = at.ActionTypeId	
			WHERE f2.ContentId = f.ContentId and 
			f.UserId != f2.UserId and
			(d2.TotalHours BETWEEN @Start_Total_Hours AND @End_Total_Hours) and
			(at.ActionType = 'Interacted' OR at.ActionType = 'Created')
		) and
		f.ContentId in ( -- WITH VIEWS
			SELECT DISTINCT ContentId FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f2 WITH (NOLOCK)
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d2 WITH (NOLOCK) ON f2.DateId = d2.DateId
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at WITH (NOLOCK) ON f2.ActionTypeId = at.ActionTypeId 		
			WHERE f2.ContentId = f.ContentId and 
			f.UserId != f2.UserId and
			(d2.TotalHours BETWEEN @Start_Total_Hours AND @End_Total_Hours) and
			at.ActionType = 'Viewed'
		)
	
	-- TOTAL ITEMS
	SELECT @TotalItems = COUNT(*) FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f WITH (NOLOCK)
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d WITH (NOLOCK) ON f.DateId = d.DateId
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad WITH (NOLOCK) ON f.ActionDefinitionId = ad.ActionDefinitionId
		WHERE f.PortalId = @PortalId and f.DesktopModuleId = @DesktopModuleId and ad.ActionName = @CreatedAction
		and (d.TotalHours BETWEEN @Start_Total_Hours AND @Problem_Scope_End_Total_Hours)
			
	SELECT @TotalItems TotalItems, @TotalProblematicItems TotalProblematicItems
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetUniqueViewTimeSeriesByModule') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetUniqueViewTimeSeriesByModule
GO  

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetUniqueViewTimeSeriesByModule
	@PortalId INT,
	@DesktopModuleId INT,
	@PeriodEndDate DATETIME,
	@HoursPerTimeSlice INT,
	@NumDataPoints INT
AS
BEGIN		
	DECLARE @RangeCounter INT
	DECLARE @PeriodEndDateTotalHours INT
	SET @RangeCounter = 0
	SET @PeriodEndDateTotalHours = DATEDIFF(HOUR, CONVERT(DATE, '0001-01-01'), @PeriodEndDate);

	DECLARE @ResultsTable TABLE
	(	
		RangeIndex INT,
		DesktopModuleId INT,
		MetricCount INT,
		TimeSliceStart INT,
		TimeSliceEnd INT
	)
	
	WHILE @RangeCounter < @numDataPoints
		BEGIN
			DECLARE @TimeSliceStart INT
			DECLARE @TimeSliceEnd INT
			SET @TimeSliceStart = @PeriodEndDateTotalHours - (@HoursPerTimeSlice * @NumDataPoints) + (@HoursPerTimeSlice * @RangeCounter)
			SET @TimeSliceEnd = @TimeSliceStart + @HoursPerTimeSlice		
					
			INSERT INTO @ResultsTable (RangeIndex, DesktopModuleId, MetricCount, TimeSliceStart, TimeSliceEnd)
			SELECT @RangeCounter, @DesktopModuleId, COUNT(DISTINCT f.UserId), @TimeSliceStart + 1, @TimeSliceEnd
			FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d ON f.DateId = d.DateId
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
			WHERE f.PortalId = @PortalId
				AND f.DesktopModuleId = @DesktopModuleId
				AND at.ActionType = 'Viewed'
				AND d.TotalHours BETWEEN @TimeSliceStart AND @TimeSliceEnd
			GROUP BY f.UserId

			IF NOT EXISTS
			(
				SELECT 1 FROM @ResultsTable WHERE RangeIndex = @RangeCounter
			)
			BEGIN
				INSERT INTO @ResultsTable (RangeIndex, DesktopModuleId, MetricCount, TimeSliceStart, TimeSliceEnd)
				VALUES (@RangeCounter, @DesktopModuleId, 0, @TimeSliceStart + 1, @TimeSliceEnd)
			END
			SET @RangeCounter = @RangeCounter + 1
		END
	SELECT RangeIndex, DesktopModuleId, SUM(MetricCount) AS MetricCount, TimeSliceStart, TimeSliceEnd 
		FROM @ResultsTable 
		GROUP BY RangeIndex, DesktopModuleId, TimeSliceStart, TimeSliceEnd
END
GO

/********************************************************
 * SPROC: Analytics_Reschedule_User
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Reschedule_User]', N'P') IS NULL
	EXEC('CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Reschedule_User] AS BEGIN SELECT 1 END');
GO

ALTER PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Reschedule_User]
	@PortalId int,
	@UserId int
AS
BEGIN
	IF NOT EXISTS(
			SELECT	1
			FROM	{databaseOwner}[{objectQualifier}Analytics_Users] -- WITH (NOLOCK) we must lock here
			WHERE	[PortalId] = @PortalId AND [UserId] = @UserId)
	BEGIN
		INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Users]
			([PortalId],
			 [UserId],
			 [ProcessDate],
			 [TotalSeconds])
		VALUES
			(@PortalId,
			 @UserId,
			 dateadd(MINUTE, 5, getutcdate()),
			 0)
	END
	ELSE IF (	SELECT [ProcessDate]
				FROM {databaseOwner}[{objectQualifier}Analytics_Users] -- WITH (NOLOCK) we must lock here
				WHERE [PortalId] = @PortalId AND [UserId] = @UserId
			) IS NULL
	BEGIN
		UPDATE	{databaseOwner}[{objectQualifier}Analytics_Users]
		SET		[ProcessDate] = dateadd(MINUTE, 5, getutcdate())
		WHERE	[PortalId] = @PortalId AND [UserId] = @UserId
	END
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_IncludedActionNameTimeSeries') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_IncludedActionNameTimeSeries
GO  

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_IncludedActionNameTimeSeries
	@PortalId INT,
	@DesktopModuleId INT,
	@EndTotalHours INT,
	@IntervalHours INT,
	@NumDataPoints INT,
	@IncludedActionNames NVARCHAR(MAX)
AS
BEGIN		
	DECLARE @RangeCounter int
	SET @RangeCounter = 0
	DECLARE @ResultsTable TABLE
	(
		RangeIndex int PRIMARY KEY,
		MetricCount int,
		TimeSliceStart int,
		TimeSliceEnd int
	)
	DECLARE @IncludedActionNameTable TABLE
	(
		ActionName NVARCHAR(MAX)
	)	
	INSERT INTO @IncludedActionNameTable (ActionName) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@IncludedActionNames, ','));

	WHILE @RangeCounter < @numDataPoints
	BEGIN
		DECLARE @minHour int
		DECLARE @maxHour int
		SET @minHour = @EndTotalHours - ((@NumDataPoints - @RangeCounter) * @IntervalHours)
		SET @maxHour = @minHour + @IntervalHours
		INSERT INTO @ResultsTable (RangeIndex, MetricCount, TimeSliceStart, TimeSliceEnd) 
		VALUES (
			@RangeCounter,
			(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d ON f.DateId = d.DateId
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad ON f.ActionDefinitionId = ad.ActionDefinitionId
				INNER JOIN @IncludedActionNameTable i ON ad.ActionName = i.ActionName
				WHERE 
				f.PortalId = @PortalId AND
				(@DesktopModuleId = 0 OR f.DesktopModuleId = @DesktopModuleId) AND
				d.TotalHours > @minHour AND 
				d.TotalHours <= @maxHour),
			 @minHour,
			 @maxHour)
		SET @RangeCounter = @RangeCounter + 1
	END
	SELECT * FROM @ResultsTable
END
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_IncludedActionTypeTimeSeries') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_IncludedActionTypeTimeSeries
GO  

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_IncludedActionTypeTimeSeries
	@PortalId INT,
	@DesktopModuleId INT,
	@EndTotalHours INT,
	@IntervalHours INT,
	@NumDataPoints INT,
	@IncludedActionTypes NVARCHAR(MAX)
AS
BEGIN		
	DECLARE @RangeCounter int
	SET @RangeCounter = 0
	DECLARE @ResultsTable TABLE
	(
		RangeIndex int PRIMARY KEY,
		MetricCount int,
		TimeSliceStart int,
		TimeSliceEnd int
	)
	DECLARE @IncludedActionTypeTable TABLE
	(
		ActionType NVARCHAR(MAX)
	)	
	INSERT INTO @IncludedActionTypeTable (ActionType) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@IncludedActionTypes, ','));

	WHILE @RangeCounter < @numDataPoints
	BEGIN
		DECLARE @minHour int
		DECLARE @maxHour int
		SET @minHour = @EndTotalHours - ((@NumDataPoints - @RangeCounter) * @IntervalHours)
		SET @maxHour = @minHour + @IntervalHours
		INSERT INTO @ResultsTable (RangeIndex, MetricCount, TimeSliceStart, TimeSliceEnd) 
		VALUES (
			@RangeCounter,
			(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d ON f.DateId = d.DateId
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
				INNER JOIN @IncludedActionTypeTable i ON at.ActionType = i.ActionType
				WHERE 
				f.PortalId = @PortalId AND
				(@DesktopModuleId = 0 OR f.DesktopModuleId = @DesktopModuleId) AND
				d.TotalHours > @minHour AND 
				d.TotalHours <= @maxHour),
			 @minHour,
			 @maxHour)
		SET @RangeCounter = @RangeCounter + 1
	END
	SELECT * FROM @ResultsTable
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetUserContentDistribution') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetUserContentDistribution
GO  

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetUserContentDistribution
	@PortalId INT,
	@UserId INT,
	@Start DATETIME,
	@End DATETIME
AS
BEGIN			
	DECLARE @Start_Total_Hours INT = DATEDIFF(hour, CONVERT(DATE, '0001-01-01'), @Start)
	DECLARE @End_Total_Hours INT = DATEDIFF(hour, CONVERT(DATE, '0001-01-01'), @End)

	SELECT dm.FriendlyName AS ModuleName, Count(*) As CreatedItems
	FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f WITH (NOLOCK)
	INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at WITH (NOLOCK)
		ON f.ActionTypeId = at.ActionTypeId
	INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d WITH (NOLOCK)
		ON f.DateId = d.DateId
	INNER JOIN {databaseOwner}{objectQualifier}DesktopModules dm WITH (NOLOCK)
		ON f.DesktopModuleId = dm.DesktopModuleId
	WHERE f.UserId = @UserId
	AND   f.PortalId = @PortalId
	AND   at.ActionType = 'Created'
	AND  (d.TotalHours BETWEEN @Start_Total_Hours AND @End_Total_Hours)
	GROUP BY dm.FriendlyName
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_ParticipationTimeSeries') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_ParticipationTimeSeries
GO  

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_ParticipationTimeSeries
	@PortalId INT,
	@DesktopModuleId INT,
	@EndTotalHours INT,
	@IntervalHours INT,
	@NumDataPoints INT,
	@IncludedActionTypes NVARCHAR(MAX)
AS
BEGIN		
	DECLARE @RangeCounter int
	SET @RangeCounter = 0
	DECLARE @ResultsTable TABLE
	(
		RangeIndex int PRIMARY KEY,
		MetricCount int,
		TimeSliceStart int,
		TimeSliceEnd int
	)
	DECLARE @IncludedActionTypeTable TABLE
	(
		ActionType NVARCHAR(MAX)
	)	
	INSERT INTO @IncludedActionTypeTable (ActionType) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@IncludedActionTypes, ','));

	WHILE @RangeCounter < @numDataPoints
	BEGIN
		DECLARE @minHour int
		DECLARE @maxHour int
		SET @minHour = @EndTotalHours - ((@NumDataPoints - @RangeCounter) * @IntervalHours)
		SET @maxHour = @minHour + @IntervalHours
		INSERT INTO @ResultsTable (RangeIndex, MetricCount, TimeSliceStart, TimeSliceEnd) 
		VALUES (
			@RangeCounter,
			(SELECT COUNT(DISTINCT(f.UserId)) FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_Date d ON f.DateId = d.DateId
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
				INNER JOIN @IncludedActionTypeTable i ON at.ActionType = i.ActionType
				WHERE 
				f.PortalId = @PortalId AND
				(@DesktopModuleId = 0 OR f.DesktopModuleId = @DesktopModuleId) AND
				d.TotalHours > @minHour AND 
				d.TotalHours <= @maxHour),
			 @minHour,
			 @maxHour)
		SET @RangeCounter = @RangeCounter + 1
	END
	SELECT * FROM @ResultsTable
END
GO


IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_IncludedActionTypeUniquesGroupedMonthlySummedDailyTimeSeries') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_IncludedActionTypeUniquesGroupedMonthlySummedDailyTimeSeries
GO  

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_IncludedActionTypeUniquesGroupedMonthlySummedDailyTimeSeries
	@PortalId INT,
	@DesktopModuleId INT,
	@TimeStamp DATETIME2,
	@NumDataPoints INT,
	@IncludedActionTypes NVARCHAR(MAX)
AS
BEGIN
	
	DECLARE @ResultsTable TABLE
	(
		RangeIndex INT,
		MonthIndex INT,
		MetricCount INT,
		TimeSliceStart DATETIME2,
		TimeSliceEnd DATETIME2
	)

	DECLARE @RangeCounter int
	DECLARE @minDateSlice DATETIME2
	DECLARE @maxDateSlice DATETIME2
	DECLARE @DayCounter DATETIME2
	DECLARE @MonthCounter INT
	DECLARE @MonthStart DATETIME2
	DECLARE @MonthEnd DATETIME2
	SET @DayCounter = DATEADD(YEAR,-1,@TimeStamp)
	SET @MonthCounter = 0
	SET @RangeCounter = 0

	WHILE @MonthCounter < @NumDataPoints
	BEGIN
		SET @MonthStart = DATEADD(MONTH, @MonthCounter - @NumDataPoints, @TimeStamp);
		SET @MonthEnd = DATEADD(MONTH, 1, @MonthStart);
		SET @DayCounter = @MonthStart

		WHILE @DayCounter < @MonthEnd
		BEGIN
			SET @minDateSlice = @DayCounter
			SET @maxDateSlice = DATEADD(DAY, 1, @minDateSlice)
			INSERT INTO @ResultsTable (RangeIndex, MonthIndex, MetricCount, TimeSliceStart, TimeSliceEnd) 
			VALUES (
				@RangeCounter,
				@MonthCounter,
				0,
				@minDateSlice,
				@maxDateSlice)
			SET @DayCounter = DATEADD(DAY, 1, @DayCounter)
			SET @RangeCounter = @RangeCounter + 1
		END
		SET @MonthCounter = @MonthCounter + 1
	END

	DECLARE @IncludedActionTypeTable TABLE
	(
		ActionType NVARCHAR(MAX)
	)	
	INSERT INTO @IncludedActionTypeTable (ActionType) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@IncludedActionTypes, ','));

	;WITH Temp AS
	(
		SELECT r.RangeIndex, COUNT(DISTINCT(f.UserId)) AS MetricCount
			FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
			INNER JOIN @ResultsTable r ON f.TimeStamp BETWEEN r.TimeSliceStart AND r.TimeSliceEnd
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
			INNER JOIN @IncludedActionTypeTable i ON at.ActionType = i.ActionType				
			WHERE 
			f.PortalId = @PortalId AND
			(@DesktopModuleId = 0 OR f.DesktopModuleId = @DesktopModuleId)
			GROUP BY r.RangeIndex
	)
	UPDATE r SET r.MetricCount = t.MetricCount FROM @ResultsTable r 
		INNER JOIN Temp t ON r.RangeIndex = t.RangeIndex
	SELECT r.MonthIndex AS RangeIndex, 
		SUM(r.MetricCount) AS MetricCount, 
		DATEDIFF(HOUR, '01/01/0001 12:00:00 AM',MIN(r.TimeSliceStart)) AS TimeSliceStart, 
		DATEDIFF(HOUR, '01/01/0001 12:00:00 AM',MAX(r.TimeSliceEnd)) AS TimeSliceEnd 
	FROM @ResultsTable r GROUP BY MonthIndex
END
GO