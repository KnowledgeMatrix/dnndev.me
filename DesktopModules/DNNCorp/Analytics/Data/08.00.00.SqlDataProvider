IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_GetLeaders]', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetLeaders]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_GetLeaders
    @PortalId INT,
    @PageIndex INT,
    @PageSize INT,
    @SearchText NVARCHAR(255) = '',
	@StartDate DATE
AS
BEGIN
    DECLARE
        @PageLowerBound INT, 
        @PageUpperBound INT, 
        @RowsToReturn int

	DECLARE @Date INT = CAST(convert(varchar, @StartDate, 112) as int);

    exec {databaseOwner}{objectQualifier}CalculatePagingInformation @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output

    IF @PageLowerBound > 0
        SELECT @PageLowerBound = @PageLowerBound + 1

    IF @RowsToReturn > @PageSize
        SET @RowsToReturn = @PageSize
        
	;WITH ActiveUsers AS (
		SELECT u.UserId
		FROM {databaseOwner}{objectQualifier}Users u
            JOIN {databaseOwner}{objectQualifier}UserPortals up ON u.UserId = up.UserID
		WHERE (@SearchText IS NULL OR LEN(@SearchText) = 0 OR u.DisplayName LIKE '%' + @SearchText + '%')
		  AND up.PortalId = @PortalId
          AND up.IsDeleted = 0 AND up.Authorised = 1
          AND u.IsDeleted = 0 AND u.IsSuperUser = 0		
	)
    ,Scoring AS
    (
        SELECT UserId, SUM(ReputationPoints) AS ReputationPoints
        FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup				
		WHERE PortalId = @PortalId
			AND (@Date IS NULL OR Date >= @Date OR Date IS NULL)
		GROUP BY UserId
	)
	,Leaders AS
	(
		SELECT u.UserId, ISNULL(s.ReputationPoints, 0) ReputationPoints, 
			ROW_NUMBER() OVER (ORDER BY ReputationPoints DESC, u.UserId ASC) AS [Rank]
		FROM ActiveUsers u
			LEFT JOIN Scoring s ON u.UserId = s.UserId
	)
    SELECT TOP (@PageSize) u.UserId, ISNULL(ReputationPoints, 0) ReputationPoints, u.CreatedOnDate MemberSince, 
		(SELECT COUNT(*) FROM Leaders) TotalLeaders
	FROM Leaders l
		JOIN {databaseOwner}{objectQualifier}Users u on l.UserId = u.UserId
    WHERE [Rank] >= @PageLowerBound
    ORDER BY [Rank] ASC
END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_GetLeadersWithinFriends]', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetLeadersWithinFriends]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetLeadersWithinFriends]
	@PortalId INT,
    @UserId INT,    
    @PageIndex INT,
    @PageSize INT,
    @SearchText NVARCHAR(255) = '',
	@StartDate DATE
AS
BEGIN
    DECLARE
        @PageLowerBound INT, 
        @PageUpperBound INT, 
        @RowsToReturn int

	DECLARE @Date INT = CAST(convert(varchar, @StartDate, 112) as int);

    exec {databaseOwner}{objectQualifier}CalculatePagingInformation @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output

    IF @PageLowerBound > 0
        SELECT @PageLowerBound = @PageLowerBound + 1

    IF @RowsToReturn > @PageSize
        SET @RowsToReturn = @PageSize

    DECLARE @FriendsRelationshipId INT 
	SELECT @FriendsRelationshipId = RelationshipId 
	FROM {databaseOwner}{objectQualifier}Relationships WHERE Name = 'Friends' AND PortalId = @PortalId;

	WITH Friends AS
	(
		SELECT UserId 
		FROM {databaseOwner}{objectQualifier}UserRelationships
		WHERE RelationshipID = @FriendsRelationshipId AND RelatedUserID = @UserId
		UNION
		SELECT RelatedUserId 
		FROM {databaseOwner}{objectQualifier}UserRelationships
		WHERE RelationshipID = @FriendsRelationshipId AND UserID = @UserId
		UNION
		SELECT @UserId
	)
	,ActiveFriends AS (
		SELECT u.UserId
		FROM Friends f
			JOIN {databaseOwner}{objectQualifier}Users u ON f.UserID = u.UserID
            JOIN {databaseOwner}{objectQualifier}UserPortals up ON u.UserId = up.UserID
		WHERE (@SearchText IS NULL OR LEN(@SearchText) = 0 OR u.DisplayName LIKE '%' + @SearchText + '%')
		  AND up.PortalId = @PortalId
          AND up.IsDeleted = 0 AND up.Authorised = 1
          AND u.IsDeleted = 0		
	)
	,Scoring AS
    (
        SELECT ru.UserId, SUM(ReputationPoints) AS ReputationPoints
        FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup ru
			JOIN ActiveFriends f ON ru.UserId = f.UserID
		WHERE PortalId = @PortalId
			AND (@Date IS NULL OR Date >= @Date OR Date IS NULL)
		GROUP BY ru.UserId
	)
	,Leaders AS
	(
		SELECT u.UserId, ISNULL(s.ReputationPoints, 0) ReputationPoints, 
			ROW_NUMBER() OVER (ORDER BY ReputationPoints DESC, u.UserId ASC) AS [Rank]
		FROM ActiveFriends u
			LEFT JOIN Scoring s ON u.UserId = s.UserId
	)
    SELECT TOP (@PageSize) u.UserId, ISNULL(ReputationPoints, 0) ReputationPoints, u.CreatedOnDate MemberSince, 
		(SELECT COUNT(*) FROM Leaders) TotalLeaders
	FROM Leaders l
		JOIN {databaseOwner}{objectQualifier}Users u on l.UserId = u.UserId
    WHERE [Rank] >= @PageLowerBound
    ORDER BY [Rank] ASC
END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_GetLeadersByGroup]', N'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetLeadersByGroup]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetLeadersByGroup]
    @PortalId INT,
    @RoleId INT,
    @PageIndex INT,
    @PageSize INT,
    @SearchText NVARCHAR(255) = '',
	@StartDate DATE
AS
BEGIN
    DECLARE
        @PageLowerBound INT,
        @PageUpperBound INT,
        @RowsToReturn INT

	DECLARE @Date INT = CAST(convert(varchar, @StartDate, 112) as int);

    exec {databaseOwner}{objectQualifier}CalculatePagingInformation @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output

    IF @PageLowerBound > 0
        SELECT @PageLowerBound = @PageLowerBound + 1

    IF @RowsToReturn > @PageSize
        SET @RowsToReturn = @PageSize

  ;WITH GroupActiveUsers AS (
		SELECT u.UserId
		FROM {databaseOwner}{objectQualifier}Users u
            JOIN {databaseOwner}{objectQualifier}UserPortals up ON u.UserId = up.UserID
			JOIN {databaseOwner}{objectQualifier}UserRoles ur ON ur.UserId = u.UserID
		WHERE (@SearchText IS NULL OR LEN(@SearchText) = 0 OR u.DisplayName LIKE '%' + @SearchText + '%')
		  AND up.PortalId = @PortalId
          AND up.IsDeleted = 0 AND up.Authorised = 1
          AND u.IsDeleted = 0	
		  AND (ur.RoleID = @RoleId)
		  AND (ur.Status = 1)
	)
    ,Scoring AS
    (
        SELECT UserId, SUM(ReputationPoints) AS ReputationPoints
        FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup				
		WHERE PortalId = @PortalId
			AND (@Date IS NULL OR Date >= @Date OR Date IS NULL)
		GROUP BY UserId
	)
	,Leaders AS
	(
		SELECT u.UserId, ISNULL(s.ReputationPoints, 0) ReputationPoints, 
			ROW_NUMBER() OVER (ORDER BY ReputationPoints DESC, u.UserId ASC) AS [Rank]
		FROM GroupActiveUsers u
			LEFT JOIN Scoring s ON u.UserId = s.UserId
	)
    SELECT TOP (@PageSize) l.UserId, ISNULL(ReputationPoints, 0) ReputationPoints, ur.LastModifiedOnDate MemberSince, 
		(SELECT COUNT(*) FROM Leaders) TotalLeaders
	FROM Leaders l
		JOIN {databaseOwner}{objectQualifier}UserRoles ur ON l.UserId = ur.UserId AND ur.RoleID = @RoleId
    WHERE [Rank] >= @PageLowerBound
    ORDER BY [Rank] ASC
END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_GetUserPage]', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetUserPage]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetUserPage]
	@PortalId INT,
    @UserId INT,
    @PageSize INT,
    @SearchText NVARCHAR(255) = '',
	@StartDate DATE
AS
BEGIN
    SET NOCOUNT ON
        
	DECLARE @Date INT = CAST(convert(varchar, @StartDate, 112) as int);

	WITH ActiveUsers AS (
		SELECT u.UserId
		FROM {databaseOwner}{objectQualifier}Users u
            JOIN {databaseOwner}{objectQualifier}UserPortals up ON u.UserId = up.UserID
		WHERE (@SearchText IS NULL OR LEN(@SearchText) = 0 OR u.DisplayName LIKE '%' + @SearchText + '%')
		  AND up.PortalId = @PortalId
          AND up.IsDeleted = 0 AND up.Authorised = 1
          AND u.IsDeleted = 0 AND u.IsSuperUser = 0			
	)
    ,Scoring AS
    (
        SELECT UserId, SUM(ReputationPoints) AS ReputationPoints
        FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup				
		WHERE PortalId = @PortalId
			AND (@Date IS NULL OR Date >= @Date OR Date IS NULL)
		GROUP BY UserId
    )
	,Leaders AS
	(
		SELECT u.UserId, ISNULL(s.ReputationPoints, 0) ReputationPoints, 
			ROW_NUMBER() OVER (ORDER BY ReputationPoints DESC, u.UserId ASC) AS [Rank]
		FROM ActiveUsers u
			LEFT JOIN Scoring s ON u.UserId = s.UserId
	)
	,UserPage AS
	(
		SELECT ([Rank] / @PageSize * @PageSize) UserRank
		FROM Leaders WHERE UserId = @UserId
	)
    SELECT TOP (@PageSize) l.UserId, ReputationPoints, [Rank], CreatedOnDate MemberSince, 
		(SELECT COUNT(*) FROM Leaders) TotalLeaders
    FROM Leaders l
		JOIN {databaseOwner}{objectQualifier}Users u ON l.UserID = u.UserID
	WHERE [Rank] > ISNULL((SELECT UserRank FROM UserPage), 0)
	ORDER BY [Rank] ASC
END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_GetUserPageWithinGroup]', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetUserPageWithinGroup]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetUserPageWithinGroup]
	@PortalId INT,
    @UserId INT,
    @RoleId INT,
    @PageSize INT,
    @SearchText NVARCHAR(255) = '',
	@StartDate DATE
AS
BEGIN
    SET NOCOUNT ON

	DECLARE @Date INT = CAST(convert(varchar, @StartDate, 112) as int);

	WITH GroupActiveUsers AS (
		SELECT u.UserId
		FROM {databaseOwner}{objectQualifier}Users u
            JOIN {databaseOwner}{objectQualifier}UserPortals up ON u.UserId = up.UserID
			JOIN {databaseOwner}{objectQualifier}UserRoles ur ON ur.UserId = u.UserID
		WHERE (@SearchText IS NULL OR LEN(@SearchText) = 0 OR u.DisplayName LIKE '%' + @SearchText + '%')
		  AND up.PortalId = @PortalId
          AND up.IsDeleted = 0 AND up.Authorised = 1
          AND u.IsDeleted = 0	
		  AND (ur.RoleID = @RoleId)
		  AND (ur.Status = 1)		  
	)
    ,Scoring AS
    (
        SELECT UserId, SUM(ReputationPoints) AS ReputationPoints
        FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup				
		WHERE PortalId = @PortalId
			AND (@Date IS NULL OR Date >= @Date OR Date IS NULL)
		GROUP BY UserId
    )
	,Leaders AS
	(
		SELECT u.UserId, ISNULL(s.ReputationPoints, 0) ReputationPoints, 
			ROW_NUMBER() OVER (ORDER BY ReputationPoints DESC, u.UserId ASC) AS [Rank]
		FROM GroupActiveUsers u
			LEFT JOIN Scoring s ON u.UserId = s.UserId
	)
	,UserPage AS
	(
		SELECT ([Rank] / @PageSize * @PageSize) UserRank
		FROM Leaders WHERE UserId = @UserId
	)
    SELECT TOP (@PageSize) l.UserId, ReputationPoints, [Rank], ur.LastModifiedOnDate MemberSince, 
		(SELECT COUNT(*) FROM Leaders) TotalLeaders
    FROM Leaders l
		JOIN {databaseOwner}{objectQualifier}UserRoles ur ON l.UserID = ur.UserID AND ur.RoleID = @RoleId
	WHERE [Rank] > ISNULL((SELECT UserRank FROM UserPage), 0)
	ORDER BY [Rank] ASC
END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_GetUserPageWithinFriends]', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetUserPageWithinFriends]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_GetUserPageWithinFriends]
	@PortalId INT,
    @UserId INT,
    @PageSize INT,
    @SearchText NVARCHAR(255) = '',
	@StartDate DATE
AS
BEGIN
    SET NOCOUNT ON

	DECLARE @Date INT = CAST(convert(varchar, @StartDate, 112) as int);

    DECLARE @FriendsRelationshipId INT 
	SELECT @FriendsRelationshipId = RelationshipId 
	FROM {databaseOwner}{objectQualifier}Relationships 
	WHERE Name = 'Friends' AND PortalId = 0;

	WITH Friends AS
	(
		SELECT UserId 
		FROM {databaseOwner}{objectQualifier}UserRelationships
		WHERE RelationshipID = @FriendsRelationshipId AND RelatedUserID = @UserId
		UNION
		SELECT RelatedUserId 
		FROM {databaseOwner}{objectQualifier}UserRelationships
		WHERE RelationshipID = @FriendsRelationshipId AND UserID = @UserId
		UNION
		SELECT @UserId
	)
	,ActiveFriends AS (
		SELECT u.UserId
		FROM Friends f
			JOIN {databaseOwner}{objectQualifier}Users u ON f.UserID = u.UserID
            JOIN {databaseOwner}{objectQualifier}UserPortals up ON u.UserId = up.UserID
		WHERE (@SearchText IS NULL OR LEN(@SearchText) = 0 OR u.DisplayName LIKE '%' + @SearchText + '%')
		  AND up.PortalId = @PortalId
          AND up.IsDeleted = 0 AND up.Authorised = 1
          AND u.IsDeleted = 0
	)
	,Scoring AS
    (
        SELECT ru.UserId, SUM(ReputationPoints) AS ReputationPoints
        FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup ru
			JOIN ActiveFriends f ON ru.UserId = f.UserID
		WHERE PortalId = @PortalId
			AND (@Date IS NULL OR Date >= @Date OR Date IS NULL)
		GROUP BY ru.UserId
	)
	,Leaders AS
	(
		SELECT u.UserId, ISNULL(s.ReputationPoints, 0) ReputationPoints, 
			ROW_NUMBER() OVER (ORDER BY ReputationPoints DESC, u.UserId ASC) AS [Rank]
		FROM ActiveFriends u
			LEFT JOIN Scoring s ON u.UserId = s.UserId
	)
	,UserPage AS
	(
		SELECT ([Rank] / @PageSize * @PageSize) UserRank
		FROM Leaders WHERE UserId = @UserId
	)
    SELECT TOP (@PageSize) u.UserId, ReputationPoints, [Rank], u.CreatedOnDate MemberSince, 
		(SELECT COUNT(*) FROM Leaders) TotalLeaders
	FROM Leaders l
		JOIN {databaseOwner}{objectQualifier}Users u on l.UserId = u.UserId
    WHERE [Rank] >= ISNULL((SELECT UserRank FROM UserPage), 0)
    ORDER BY [Rank] ASC
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_AddDateDimension', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddDateDimension
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_AddDateDimensionFromDateTime', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddDateDimensionFromDateTime
GO

-- Defined in 2.0 script without objectQualifier
IF OBJECT_ID('FK_Analytics_Fact_UserScoringLog_DateId_Analytics_Dim_Date_DateId') IS NOT NULL
	ALTER TABLE {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog
	DROP CONSTRAINT FK_Analytics_Fact_UserScoringLog_DateId_Analytics_Dim_Date_DateId
GO

IF OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Dim_Date', 'U') IS NOT NULL
	DROP TABLE {databaseOwner}{objectQualifier}Analytics_Dim_Date
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE name='IX_{objectQualifier}Analytics_Fact_UserScoringLog_PortalId' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog'))
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLog_PortalId ON {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE name='IX_{objectQualifier}Analytics_Fact_UserScoringLog_DateId' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog'))
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLog_DateId ON {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE name='IX_{objectQualifier}Analytics_Fact_UserScoringLog_DMID_PID' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog'))
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLog_DMID_PID ON {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE name='IX_{objectQualifier}Analytics_Fact_UserScoringLog_DMID_PID_AID' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog'))
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLog_DMID_PID_AID ON {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE name='IX_{objectQualifier}Analytics_Fact_UserScoringLog_DTID_DMID_PID' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog'))
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLog_DTID_DMID_PID ON {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE name='IX_{objectQualifier}Analytics_Fact_UserScoringLog_PID_CID' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog'))
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLog_PID_CID ON {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE name='IX_{objectQualifier}Analytics_Fact_UserScoringLog_PID_AID' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog'))
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLog_PID_AID ON {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE name='IX_{objectQualifier}Analytics_Fact_UserScoringLog_DTID_PID' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog'))
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLog_DTID_PID ON {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE name='IX_{objectQualifier}Analytics_Fact_UserScoringLog_ContentId' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog'))
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLog_ContentId ON {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE name='IX_{objectQualifier}Analytics_Fact_UserScoringLog_UserId' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog'))
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLog_UserId ON {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE name='IX_{objectQualifier}Analytics_Fact_UserScoringLog_ADID_DMID_PID' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog'))
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLog_ADID_DMID_PID ON {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog 
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE name='IX_{objectQualifier}Analytics_Fact_UserScoringLog_TimeStamp' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog'))
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLog_TimeStamp ON {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog 
GO

IF COL_LENGTH('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog', 'DateId') IS NOT NULL
	ALTER TABLE {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog DROP COLUMN DateId
GO

-- Defined in 2.0 script without objectQualifier
IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'PK_Analytics_Fact_UserScoringLog' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog'))
 AND NOT EXISTS (SELECT * FROM sys.indexes WHERE name = 'PK_{objectQualifier}Analytics_Fact_UserScoringLog' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog'))
	EXEC sp_rename N'{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog.PK_Analytics_Fact_UserScoringLog', N'PK_{objectQualifier}Analytics_Fact_UserScoringLog', N'INDEX'; 
GO

IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}Analytics_Fact_UserScoringLog_PortalId_TimeStamp' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog'))
	CREATE NONCLUSTERED INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLog_PortalId_TimeStamp ON {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog
	(
		[PortalId] ASC,
		[TimeStamp] ASC
	)
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE name='IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_PortalId' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup'))
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_PortalId ON {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE name='IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_DesktopModuleId' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup'))
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_DesktopModuleId ON {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE name='IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_Activities' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup'))
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_Activities ON {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE name='IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_ReputationPoints' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup'))
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_ReputationPoints ON {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE name='IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_Date' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup'))
	DROP INDEX IX_{objectQualifier}Analytics_Fact_UserScoringLogRollup_Date ON {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup
GO

-- Defined in 2.0 script without objectQualifier
IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'PK_Analytics_Fact_UserScoringRollup' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup'))
	AND NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'PK_{objectQualifier}Analytics_Fact_UserScoringLogRollup' AND object_id = OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup'))
	EXEC sp_rename N'{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup.PK_Analytics_Fact_UserScoringRollup', N'PK_{objectQualifier}Analytics_Fact_UserScoringLogRollup', N'INDEX'; 
GO

IF object_id(N'{databaseOwner}{objectQualifier}Analytics_Fact_Dashboard_Rollup', 'U') IS NOT NULL
	DROP TABLE {databaseOwner}{objectQualifier}Analytics_Fact_Dashboard_Rollup
GO  

CREATE TABLE {databaseOwner}{objectQualifier}Analytics_Fact_Dashboard_Rollup (
	PortalId int NOT NULL,
	Date date NOT NULL,
	Adoptions int NOT NULL DEFAULT 0,
	Participation int NOT NULL DEFAULT 0,
	CONSTRAINT PK_{objectQualifier}Analytics_Fact_Dashboard_Rollup PRIMARY KEY CLUSTERED 
	(
		PortalId ASC,
		Date ASC
	)
)
GO

IF object_id(N'{databaseOwner}{objectQualifier}Analytics_Fact_Module_Rollup', 'U') IS NOT NULL
	DROP TABLE {databaseOwner}{objectQualifier}Analytics_Fact_Module_Rollup
GO  

CREATE TABLE {databaseOwner}{objectQualifier}Analytics_Fact_Module_Rollup (
	PortalId int NOT NULL,
	DesktopModuleId int NOT NULL,
	Date date NOT NULL,
	UniqueViews int NOT NULL DEFAULT 0,	
	CountInteracted int NOT NULL DEFAULT 0,	
	CountFormedRelationship int NOT NULL DEFAULT 0,	
	CountShared int NOT NULL DEFAULT 0,	
	CountCreated int NOT NULL DEFAULT 0,	
    Engagement float NOT NULL DEFAULT 0.0,
	CONSTRAINT PK_{objectQualifier}Analytics_Fact_Module_Rollup PRIMARY KEY CLUSTERED 
	(
		PortalId ASC,
		DesktopModuleId ASC,
		Date ASC
	)
)
GO

IF OBJECT_ID('{databaseOwner}{objectQualifier}Analytics_GetAllDates', 'TF') IS NOT NULL
	DROP FUNCTION {databaseOwner}{objectQualifier}Analytics_GetAllDates
GO

CREATE FUNCTION {databaseOwner}{objectQualifier}Analytics_GetAllDates
(	
	@StartDate SMALLDATETIME,
	@EndDate SMALLDATETIME,	
	@Grouping CHAR(1)
)
RETURNS @ResultsTable TABLE 
(
	StartDate SMALLDATETIME,
	EndDate SMALLDATETIME
)
AS
BEGIN
DECLARE @Count INT = 1
	DECLARE @MaxDate DATETIME = @EndDate	
	DECLARE @MinDate DATETIME = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDate, @StartDate, @Count, @Grouping)

	WHILE @StartDate < @MaxDate
	BEGIN
		INSERT INTO @ResultsTable (StartDate, EndDate) 
		VALUES (@MinDate, @MaxDate)
		
		SET @MaxDate = @MinDate
		SET @Count = @Count + 1
		SET @MinDate = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDate, @StartDate, @Count, @Grouping)
	END
	RETURN
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetDashboardStats', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_GetDashboardStats]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_GetDashboardStats]
    @PortalId INT,
    @StartDate DATETIME,
    @EndDate DATETIME,      
	@TimeZoneOffset INT,
    @Grouping CHAR(1)
AS
BEGIN        
	SELECT 
		StartDate,
		EndDate,
		ISNULL(SUM(Adoptions), 0) Adoptions,
		ISNULL(SUM(Participation), 0) Participation
	FROM {databaseOwner}{objectQualifier}Analytics_GetAllDates(@StartDate, @EndDate, @Grouping) d
		LEFT JOIN {databaseOwner}{objectQualifier}Analytics_Fact_Dashboard_Rollup r 
			ON PortalId = @PortalId 
				AND Date >= DATEADD(HH, @TimeZoneOffset, StartDate) 
				AND Date < DATEADD(HH, @TimeZoneOffset, EndDate)
	GROUP BY d.StartDate, d.EndDate
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_Adoptions', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_Adoptions
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_Adoptions
	@PortalId INT,
	@LocalDate DATE,
	@StartUtcDate DATETIME,
	@EndUtcDate DATETIME
AS 
BEGIN
	WITH Adoptions AS
	(
		SELECT COUNT(*) Adoptions
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad ON f.ActionDefinitionId = ad.ActionDefinitionId
		WHERE ad.ActionName = 'Register' 
		  AND f.PortalId = @PortalId 
		  AND f.TimeStamp >= @StartUtcDate AND f.TimeStamp < @EndUtcDate
	)
	MERGE {databaseOwner}{objectQualifier}Analytics_Fact_Dashboard_Rollup t
		USING Adoptions s
		ON (t.PortalId = @PortalId AND t.Date = @LocalDate)
	WHEN NOT MATCHED BY TARGET THEN
		INSERT (PortalId, Date, Adoptions)
		VALUES (@PortalId, @LocalDate, s.Adoptions)
	WHEN NOT MATCHED BY SOURCE AND t.Adoptions <> 0 AND t.PortalId = @PortalId AND t.Date = @LocalDate THEN
		UPDATE SET t.Adoptions = 0
	WHEN MATCHED THEN
		UPDATE SET t.Adoptions = s.Adoptions;
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetAdoptions', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_GetAdoptions]
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetAdoptionsHourly', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_GetAdoptionsHourly]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_GetAdoptionsHourly]
	@PortalId INT,
	@StartDate DATETIME,
	@EndDate DATETIME
AS
BEGIN		
	SELECT StartDate, EndDate, COUNT(DISTINCT f.UserScoringLogId) MetricCount
	FROM {databaseOwner}{objectQualifier}Analytics_GetAllDates(@StartDate, @EndDate, 'h')
		LEFT JOIN {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f ON f.TimeStamp >= StartDate AND f.TimeStamp < EndDate AND f.PortalId = @PortalId 	
		LEFT JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionDefinition ad ON f.ActionDefinitionId = ad.ActionDefinitionId
	WHERE	
		ad.ActionName IS NULL OR ad.ActionName = 'Register' 
	GROUP BY StartDate, EndDate
	ORDER BY StartDate
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_Participation', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_Participation
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_Participation
	@PortalId INT,
	@LocalDate DATE,
	@StartUtcDate DATETIME,
	@EndUtcDate DATETIME
AS 
BEGIN
	WITH Participation AS
	(
		SELECT COUNT(DISTINCT f.UserId) Participation
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
		WHERE at.ActionType IN ('Interacted', 'Created', 'FormedRelationship', 'Shared')
		  AND f.PortalId = @PortalId 
		  AND f.TimeStamp >= @StartUtcDate AND f.TimeStamp < @EndUtcDate
	)
	MERGE {databaseOwner}{objectQualifier}Analytics_Fact_Dashboard_Rollup t
		USING Participation s
		ON (t.PortalId = @PortalId AND t.Date = @LocalDate)
	WHEN NOT MATCHED BY TARGET THEN
		INSERT (PortalId, Date, Participation)
		VALUES (@PortalId, @LocalDate, s.Participation)
	WHEN NOT MATCHED BY SOURCE AND t.Participation <> 0 AND t.PortalId = @PortalId AND t.Date = @LocalDate THEN
		UPDATE SET t.Participation = 0
	WHEN MATCHED THEN
		UPDATE SET t.Participation = s.Participation;
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetParticipation', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetParticipation
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetParticipationHourly', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_GetParticipationHourly]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_GetParticipationHourly]
	@PortalId INT,
	@StartDate DATETIME,
	@EndDate DATETIME
AS
BEGIN		
	SELECT StartDate, EndDate,
		(SELECT COUNT(DISTINCT f.UserId)
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
		WHERE at.ActionType IN ('Interacted', 'Created', 'FormedRelationship', 'Shared')
		  AND f.PortalId = @PortalId 
		  AND f.TimeStamp >= StartDate AND f.TimeStamp < EndDate) MetricCount
	FROM {databaseOwner}{objectQualifier}Analytics_GetAllDates(@StartDate, @EndDate, 'h')  	
	ORDER BY StartDate
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetSpectatorsChart', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetSpectatorsChart
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetSpectatorsChart
	@PortalId INT,
	@StartDate DATETIME,
	@EndDate DATETIME,
	@TimeZoneOffset INT,
	@Grouping CHAR(1)
AS
BEGIN		
	SELECT StartDate, EndDate,
		(SELECT ISNULL(COUNT(DISTINCT ru.UserId), 0)
			FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup ru
			 WHERE RU.PortalId = @PortalId
				AND	RU.Date >= CAST(convert(varchar, DATEADD(HH, @TimeZoneOffset, StartDate), 112) as int) 
				AND RU.Date < CAST(convert(varchar, DATEADD(HH, @TimeZoneOffset, EndDate), 112) as int)
				AND ru.SpectatorCount > 0) MetricCount
	FROM {databaseOwner}{objectQualifier}Analytics_GetAllDates(@StartDate, @EndDate, @Grouping)   
	ORDER BY StartDate
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetSpectatorsChartHourly', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetSpectatorsChartHourly
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetSpectatorsChartHourly
	@PortalId INT,
	@StartUtcDate DATETIME,
	@EndUtcDate	DATETIME
AS
BEGIN		
	DECLARE @SpectatorsTable TABLE
	(
		StartDate DATETIME,
		EndDate DATETIME,
		MetricCount int
	);

	WITH AllViews AS (
		SELECT l.UserId, l.ContentId, l.TimeStamp
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog l
			JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON l.ActionTypeId = at.ActionTypeId
		WHERE PortalId = @PortalId
			AND l.TimeStamp >= @StartUtcDate AND l.TimeStamp < @EndUtcDate		
			AND l.ContentId > 0
			AND at.ActionType = 'Viewed'
			AND NOT EXISTS (SELECT *
							FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog l2
								JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at2 ON l2.ActionTypeId = at2.ActionTypeId
							WHERE l2.PortalId = @PortalId
								AND l2.TimeStamp >= @StartUtcDate AND l2.TimeStamp < @EndUtcDate
								AND l2.UserId = l.UserId AND l2.ContentId = l.ContentId
								AND at2.ActionType IN ('Interacted', 'Created', 'FormedRelationship', 'Shared'))						
		GROUP BY UserId, l.ContentId, l.TimeStamp
	)
	INSERT INTO @SpectatorsTable
	SELECT dateadd(HH, datediff(HH, 0, TimeStamp), 0) StartDate, dateadd(hh, 1, dateadd(HH, datediff(HH, 0, TimeStamp), 0)) EndDate,  COUNT(DISTINCT UserId) MetricCount
	FROM AllViews v1
	WHERE TimesTamp = (SELECT MIN(TimesTamp) FROM AllViews v2 WHERE v1.Userid = v2.UserId AND v1.ContentId = v2.ContentId)
	GROUP BY dateadd(HH, datediff(HH, 0, TimeStamp), 0), dateadd(hh, 1, dateadd(HH, datediff(HH, 0, TimeStamp), 0));

	WITH AllHours AS
	(
		SELECT @StartUtcDate AS StartDate, DATEADD(HH, 1, @StartUtcDate) EndDate
		UNION ALL
		SELECT DATEADD(HH, 1, StartDate), DATEADD(HH, 2, StartDate) EndDate
		FROM AllHours 
		WHERE DATEADD(HH, 1, StartDate) < @EndUtcDate
	)
	SELECT h.StartDate, h.EndDate, ISNULL(s.MetricCount, 0) MetricCount
	FROM AllHours h
		LEFT JOIN @SpectatorsTable s ON h.StartDate = s.StartDate AND h.EndDate = s.EndDate
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetActivityByModuleHourly', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetActivityByModuleHourly
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetActivityByModuleHourly
	@PortalId INT,
    @StartDate DATETIME,
    @EndDate DATETIME,
	@DesktopModuleIdList NVARCHAR(MAX)
AS
BEGIN
	DECLARE @DesktopModuleIds TABLE
	(		
		DesktopModuleId INT PRIMARY KEY
	)

	INSERT INTO @DesktopModuleIds (DesktopModuleId) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@DesktopModuleIdList, ','));
	
	SELECT d.[DesktopModuleId], StartDate, EndDate,
		(SELECT  COUNT(*) FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
				INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
		 WHERE f.PortalId = @PortalId
				AND at.ActionType IN ('Created', 'Edited', 'FormedRelationship', 'Interacted')
				AND f.[TimeStamp] >= StartDate AND f.[TimeStamp] < EndDate
				AND d.[DesktopModuleId] = f.[DesktopModuleId] ) MetricCount
	FROM {databaseOwner}{objectQualifier}Analytics_GetAllDates(@StartDate, @EndDate, 'h'), @DesktopModuleIds d	
	ORDER BY DesktopModuleId, StartDate
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetActivityByModule', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetActivityByModule
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetActivityByModule
	@PortalId INT,
	@StartDate DATETIME,
	@EndDate DATETIME,		
	@TimeZoneOffset INT,
	@Grouping CHAR(1),
	@DesktopModuleIdList NVARCHAR(MAX)
AS
BEGIN
	DECLARE @DesktopModuleIds TABLE
	(		
		DesktopModuleId INT PRIMARY KEY
	)

	INSERT INTO @DesktopModuleIds (DesktopModuleId) (SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@DesktopModuleIdList, ','));

	SELECT d.[DesktopModuleId], StartDate, EndDate,
		(SELECT ISNULL(SUM(Activities), 0) FROM {databaseOwner}[{objectQualifier}Analytics_Fact_UserScoringLogRollup] r
		 WHERE PortalId = @PortalId 
		   AND r.Date >= CAST(convert(VARCHAR, DATEADD(HH, @TimeZoneOffset, StartDate), 112) AS INT) 
		   AND r.Date < CAST(convert(VARCHAR, DATEADD(HH, @TimeZoneOffset, EndDate), 112) AS INT)
		   AND d.[DesktopModuleId] = r.[DesktopModuleId] ) MetricCount
	FROM {databaseOwner}{objectQualifier}Analytics_GetAllDates(@StartDate, @EndDate, @Grouping), @DesktopModuleIds d	
	ORDER BY DesktopModuleId, StartDate
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_UniqueViewsByModule', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_UniqueViewsByModule
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_UniqueViewsByModule
	@PortalId INT,
	@LocalDate DATE,
	@StartUtcDate DATETIME,
	@EndUtcDate DATETIME
AS 
BEGIN
	WITH UniqueViews AS
	(
		SELECT DesktopModuleId, ISNULL(COUNT(DISTINCT f.UserId), 0) UniqueViews
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
		WHERE f.PortalId = @PortalId
			AND f.DesktopModuleId > 0
			AND at.ActionType = 'Viewed'
			AND f.TimeStamp >= @StartUtcDate AND f.TimeStamp < @EndUtcDate
		GROUP BY f.DesktopModuleId
	)
	MERGE {databaseOwner}{objectQualifier}Analytics_Fact_Module_Rollup t
		USING UniqueViews s
		ON (t.PortalId = @PortalId AND t.Date = @LocalDate AND t.DesktopModuleId = s.DesktopModuleId)
	WHEN NOT MATCHED BY TARGET THEN
		INSERT (PortalId, Date, DesktopModuleId, UniqueViews)
		VALUES (@PortalId, @LocalDate, s.DesktopModuleId, s.UniqueViews)
	WHEN NOT MATCHED BY SOURCE AND t.UniqueViews <> 0 AND t.PortalId = @PortalId AND t.Date = @LocalDate THEN
		UPDATE SET t.UniqueViews = 0
	WHEN MATCHED THEN
		UPDATE SET t.UniqueViews = s.UniqueViews;
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetUniqueViewTimeSeriesByModuleHourly', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetUniqueViewTimeSeriesByModuleHourly
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetUniqueViewTimeSeriesByModuleHourly
	@PortalId INT,
	@DesktopModuleId INT,
	@StartDate DATETIME,
	@EndDate DATETIME
AS
BEGIN	
	SELECT StartDate, EndDate, (
		SELECT ISNULL(COUNT(DISTINCT f.UserId), 0)
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
		WHERE f.PortalId = @PortalId
			AND f.DesktopModuleId = @DesktopModuleId
			AND at.ActionType = 'Viewed'
			AND (f.[TimeStamp] >= StartDate AND f.[TimeStamp] < EndDate)) MetricCount
	FROM {databaseOwner}{objectQualifier}Analytics_GetAllDates(@StartDate, @EndDate, 'h')
	ORDER BY StartDate
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetUniqueViewTimeSeriesByModule', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetUniqueViewTimeSeriesByModule
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetModuleStats', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetModuleStats
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetModuleStats
    @PortalId INT,
	@DesktopModuleId INT,
    @StartDate DATETIME,
    @EndDate DATETIME,      
	@TimeZoneOffset INT,
    @Grouping CHAR(1)
AS
BEGIN        
	SELECT 
		StartDate, 
		EndDate,
		ISNULL(SUM(UniqueViews), 0) UniqueViews,
		ISNULL(SUM(CountInteracted), 0) CountInteracted,	
		ISNULL(SUM(CountFormedRelationship), 0) CountFormedRelationship,	
		ISNULL(SUM(CountShared), 0) CountShared,	
		ISNULL(SUM(CountCreated), 0) CountCreated
	FROM {databaseOwner}{objectQualifier}Analytics_GetAllDates(@StartDate, @EndDate, @Grouping) d
		LEFT JOIN {databaseOwner}{objectQualifier}Analytics_Fact_Module_Rollup r 
			ON PortalId = @PortalId AND DesktopModuleId = @DesktopModuleId
				AND Date >= DATEADD(HH, @TimeZoneOffset, StartDate) 
				AND Date < DATEADD(HH, @TimeZoneOffset, EndDate)
	GROUP BY d.StartDate, d.EndDate
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_EnsureDimensionsAndAddUserScoringFact', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_EnsureDimensionsAndAddUserScoringFact
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetTimeSeriesByActionType', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTimeSeriesByActionType
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetTimeSeriesByActionTypeHourly', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTimeSeriesByActionTypeHourly
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTimeSeriesByActionTypeHourly
    @PortalId INT,
    @DesktopModuleId INT,
    @StartDate DATETIME,
    @EndDate DATETIME
AS
BEGIN
    SET NOCOUNT ON;

    SELECT StartDate, EndDate, Interacted CountInteracted, FormedRelationship CountFormedRelationship, Shared CountShared, Created CountCreated
	FROM  (SELECT d.StartDate, d.EndDate, at.ActionType
			FROM {databaseOwner}{objectQualifier}Analytics_GetAllDates(@StartDate, @EndDate, 'h') d
				LEFT OUTER JOIN {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f 
					ON d.StartDate <= f.[TimeStamp] AND d.EndDate > f.[TimeStamp] AND f.PortalId = @PortalId AND f.DesktopModuleId = @DesktopModuleId
				LEFT OUTER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at 
					ON f.ActionTypeId = at.ActionTypeId AND at.ActionType IN ('Interacted', 'FormedRelationship', 'Shared', 'Created')) p
	PIVOT (
		COUNT(ActionType) 
		FOR ActionType IN (Interacted, FormedRelationship, Shared, Created )) as pvt
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_ActionTypeByModule', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_ActionTypeByModule
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_ActionTypeByModule
	@PortalId INT,
	@LocalDate DATE,
	@StartUtcDate DATETIME,
	@EndUtcDate DATETIME
AS 
BEGIN
	WITH ActionTypes AS
	(
		SELECT DesktopModuleId, Interacted, FormedRelationship, Shared, Created
		FROM  (SELECT f.DesktopModuleId, at.ActionType
				FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f 
					JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
				WHERE f.PortalId = @PortalId
				  AND f.DesktopModuleId > 0
				  AND @StartUtcDate <= f.[TimeStamp] AND @EndUtcDate > f.[TimeStamp] 
				  AND at.ActionType IN ('Interacted', 'FormedRelationship', 'Shared', 'Created')) p
		PIVOT (
			COUNT(ActionType) 
			FOR ActionType IN (Interacted, FormedRelationship, Shared, Created )) as pvt

	)
	MERGE {databaseOwner}{objectQualifier}Analytics_Fact_Module_Rollup t
		USING ActionTypes s
		ON (t.PortalId = @PortalId AND t.Date = @LocalDate AND t.DesktopModuleId = s.DesktopModuleId)
	WHEN NOT MATCHED BY TARGET THEN
		INSERT (PortalId, Date, DesktopModuleId, CountInteracted, CountFormedRelationship, CountShared, CountCreated)
		VALUES (@PortalId, @LocalDate, s.DesktopModuleId, s.Interacted, s.FormedRelationship, s.Shared, s.Created)
	WHEN NOT MATCHED BY SOURCE 
			AND t.CountInteracted <> 0 AND t.CountFormedRelationship <> 0 
			AND t.CountShared <> 0 AND t.CountCreated <> 0 AND t.PortalId = @PortalId AND t.Date = @LocalDate THEN
		UPDATE SET t.CountInteracted = 0, t.CountFormedRelationship = 0, t.CountShared = 0, t.CountCreated = 0
	WHEN MATCHED THEN
		UPDATE SET t.CountInteracted = s.Interacted, t.CountFormedRelationship = s.FormedRelationship, t.CountShared = s.Shared, t.CountCreated = s.Created;
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_EngagementByModule', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_EngagementByModule
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_Calculate_EngagementByModule]
	@PortalId INT,
	@LocalDate DATE,
	@StartUtcDate DATETIME,
	@EndUtcDate DATETIME
AS 
BEGIN

	DECLARE @UniqueViews TABLE (DesktopModuleId INT, UniqueViewCount INT);

	INSERT INTO @UniqueViews (DesktopModuleId, UniqueViewCount)
	(
		SELECT DesktopModuleId, ISNULL(COUNT(DISTINCT f.UserId), 0) UniqueViewCount
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
		WHERE f.PortalId = @PortalId
			AND f.DesktopModuleId > 0
			AND at.ActionType = 'Viewed'
			AND f.TimeStamp >= @StartUtcDate AND f.TimeStamp < @EndUtcDate
		GROUP BY f.DesktopModuleId
	);

	WITH Engagement (DesktopModuleId, Numerator, Denominator) AS
	(
		SELECT f.DesktopModuleId, 
			(SELECT TOP 1 COALESCE(UniqueViewCount, 0) FROM @UniqueViews u WHERE u.DesktopModuleId = f.DesktopModuleId) +  
			SUM(CASE WHEN at.ActionType IN ('DissolvedRelationship', 'Deleted') THEN -1 ELSE 1 END) AS Numerator, 
			(SELECT TOP 1 COALESCE(UniqueViewCount, 0) FROM @UniqueViews u WHERE u.DesktopModuleId = f.DesktopModuleId) +
			SUM(CASE WHEN at.ActionType IN ('Shared') THEN 1 ELSE 0 END) AS Denominator
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
		WHERE f.PortalId = @PortalId			
			AND f.DesktopModuleId > 0
			AND (at.ActionType IN ('Created', 'FormedRelationship', 'Shared', 'Interacted', 'DissolvedRelationship', 'Deleted'))
			AND f.TimeStamp >= @StartUtcDate AND f.TimeStamp < @EndUtcDate
		GROUP BY f.DesktopModuleId
	)
	MERGE {databaseOwner}{objectQualifier}Analytics_Fact_Module_Rollup t
		USING Engagement e
		ON (t.PortalId = @PortalId AND t.Date = @LocalDate AND t.DesktopModuleId = e.DesktopModuleId)
	WHEN NOT MATCHED BY TARGET THEN
		INSERT (PortalId, [Date], DesktopModuleId, Engagement)
		VALUES (@PortalId, @LocalDate, e.DesktopModuleId, COALESCE(e.Numerator / NULLIF(e.Denominator,0), 0))
	WHEN NOT MATCHED BY SOURCE AND t.Engagement <> 0 AND t.PortalId = @PortalId AND t.Date = @LocalDate THEN
		UPDATE SET t.Engagement = 0
	WHEN MATCHED THEN
		UPDATE SET t.Engagement = COALESCE(e.Numerator / NULLIF(e.Denominator,0), 0);

END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetMultipleModulePerformance', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetMultipleModulePerformance
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_GetMultipleModulePerformance]
    @PortalId INT,
    @startDate DATETIME,
    @endDate DATETIME,
    @ComparativeTermOffset INT,
    @DesktopModuleIdList NVARCHAR(MAX)
AS
BEGIN
    DECLARE @ModuleCounter INT
    DECLARE @DesktopModuleId INT
    DECLARE @NumModules INT    

    DECLARE @Engagement FLOAT    
    DECLARE @ViewCount INT
    DECLARE @CreateCount INT
    DECLARE @ComparativeTermEngagement FLOAT
        
    DECLARE @DesktopModuleIds TABLE
    (        
        DesktopModuleId INT PRIMARY KEY,
        ModuleRow INT
    )

    DECLARE @comparativeStartDate DATETIME = DATEADD(day, @ComparativeTermOffset, @startDate)
    DECLARE @comparativeEndDate DATETIME = DATEADD(day, @ComparativeTermOffset, @endDate)
    
    INSERT INTO @DesktopModuleIds (DesktopModuleId, ModuleRow) (SELECT val,  ROW_NUMBER() OVER(ORDER BY val DESC) FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@DesktopModuleIdList, ','));
      
	SELECT d.DesktopModuleId DesktopModuleId, 
		   COALESCE(SUM(Engagement), 0) Engagement, 
		   (SELECT COALESCE(SUM(af2.Engagement), 0)
			FROM {databaseOwner}[{objectQualifier}Analytics_Fact_Module_Rollup] af2
			WHERE 
				af2.[PortalId] = @PortalId AND
				af2.[DesktopModuleId] = d.DesktopModuleId AND
				af2.[Date] >= @comparativeStartDate AND af2.[Date] < @comparativeEndDate) ComparativeTermEngagement,
		   COALESCE(SUM(CountCreated), 0) CreateCount,
		   COALESCE(SUM(UniqueViews), 0) UniqueViewCount	
	FROM @DesktopModuleIds d
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}Analytics_Fact_Module_Rollup] af 
			ON af.[PortalId] = @PortalId AND
			   af.[DesktopModuleId] = d.DesktopModuleId AND
			   af.[Date] >= @startDate AND af.[Date] < @endDate
	GROUP BY d.DesktopModuleId       
  
END
GO

-- SPROC NO NEEDED ANY MORE
IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetModulePerformance', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetModulePerformance
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetTrendingTags', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTrendingTags
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_GetTrendingTags]
	@DesktopModuleId INT,
	@Skip INT,
	@Take INT,
	@StartDate DATETIME,
	@EndDate DATETIME,
	@PortalId INT
AS
BEGIN		
	DECLARE @SubResults TABLE
	(				
		ContentId INT		
	)	
	
	INSERT INTO @SubResults
	SELECT f.ContentId
	FROM  {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
		INNER JOIN {databaseOwner}[{objectQualifier}Analytics_Dim_ActionType] at ON f.ActionTypeId = at.ActionTypeId
		INNER JOIN {databaseOwner}[{objectQualifier}vw_Analytics_Warehouse_Fact_Content] fc ON fc.ContentId = f.ContentId AND (fc.DeleteDate IS NULL OR fc.DeleteDate >= @EndDate)
	WHERE 
		f.PortalId = @PortalId AND
		(@DesktopModuleId = 0 OR f.DesktopModuleId = @DesktopModuleId) AND
		f.[TimeStamp] >= @StartDate AND f.[TimeStamp] < @EndDate AND 
		at.ActionType NOT IN ('Flagged', 'Deleted', 'Moderated')

	;WITH Results (TermRank, Term, TermCount) AS
	(SELECT ROW_NUMBER() OVER(ORDER BY COUNT(tt.Name) DESC) AS RowNumber, tt.Name, COUNT(tt.Name) AS TermCount
	FROM @SubResults R 
		INNER JOIN {databaseOwner}[{objectQualifier}ContentItems_Tags] ct ON ct.ContentItemID = R.ContentId
		INNER JOIN {databaseOwner}[{objectQualifier}Taxonomy_Terms] tt ON tt.TermID = CT.TermID
	WHERE tt.Name <> '' 
	GROUP BY tt.Name)

	SELECT Term, TermCount, (SELECT COUNT(*) FROM Results) TotalTermCount 
	FROM Results
	WHERE TermRank BETWEEN @Skip + 1 AND @Skip + @Take 
	ORDER BY TermRank
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetUserContentDistribution', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetUserContentDistribution
GO  

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetUserContentDistribution
	@PortalId INT,
	@UserId INT,
	@Start DATETIME,
	@End DATETIME
AS
BEGIN			
	SELECT dm.FriendlyName AS ModuleName, Count(*) As CreatedItems
	FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f WITH (NOLOCK)
		INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at WITH (NOLOCK)
			ON f.ActionTypeId = at.ActionTypeId
		INNER JOIN {databaseOwner}{objectQualifier}DesktopModules dm WITH (NOLOCK)
			ON f.DesktopModuleId = dm.DesktopModuleId
	WHERE f.UserId = @UserId
		AND   f.PortalId = @PortalId
		AND   at.ActionType = 'Created'
		AND  f.[TimeStamp] BETWEEN @Start AND @End
	GROUP BY dm.FriendlyName
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_MigrateUserScoringLogEntry', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_MigrateUserScoringLogEntry
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_MigrateUserScoringLogEntry
	@UserScoringLogId INT,    
	@UserId INT,
	@PortalId INT,
	@ContentItemId INT,
	@ScoringActionDefId INT,
	@ExperiencePoints INT,
	@ReputationPoints INT,
	@CreatedOnDate DATETIME,
	@GroupId INT			
AS
BEGIN					
	DECLARE @ActionName NVARCHAR(50)
	DECLARE @DesktopModuleId INT	
	DECLARE @ActionType NVARCHAR(50)	
	DECLARE @ActionTypeId INT
	DECLARE @CommaSeparatedTags NVARCHAR(MAX) 
	DECLARE @ContentType NVARCHAR(50)
	DECLARE @TagGroupId INT
	DECLARE @ContentTypeId INT
	DECLARE @TagsTable TABLE
	(
		TagName NVARCHAR(50),
		ContentType NVARCHAR(50)
	);
	SELECT @ActionName = ActionName, @DesktopModuleId = DesktopModuleId, @ActionTypeId = ActionType
		FROM {databaseOwner}{objectQualifier}Mechanics_ScoringActionDefinition
		WHERE ScoringActionDefId = @ScoringActionDefId

	INSERT INTO @TagsTable (TagName,ContentType)
	SELECT REPLACE(tt.Name,',',' '), ct.ContentType
	FROM {databaseOwner}{objectQualifier}Taxonomy_Terms tt 
		INNER JOIN {databaseOwner}{objectQualifier}ContentItems_Tags cit ON tt.TermID = cit.TermID 
		INNER JOIN {databaseOwner}{objectQualifier}ContentItems ci ON cit.ContentItemID = ci.ContentItemID 
		INNER JOIN {databaseOwner}{objectQualifier}ContentTypes ct ON ci.ContentTypeID = ct.ContentTypeID
		WHERE ci.ContentItemID = @ContentItemId
	SELECT @CommaSeparatedTags = STUFF((SELECT  ',' + TagName FROM @TagsTable FOR XML PATH('')), 1, 1, '')
	SELECT TOP(1) @ContentType = ContentType FROM @TagsTable
	SET @ContentType = COALESCE(@ContentType,'');
	SET @CommaSeparatedTags = COALESCE(@CommaSeparatedTags,'');

	--Ensure action definition dimension exists
	EXECUTE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddActionDefinition
		@ScoringActionDefId,
		@ActionName,
		@DesktopModuleId;

	--Ensure content type dimension exists
	EXECUTE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddContentType
		@ContentType,
		@ContentTypeId OUTPUT

	--Ensure tag group dimension exists
	EXECUTE {databaseOwner}{objectQualifier}Analytics_Warehouse_AddTagsAndTagGroup
		@CommaSeparatedTags,
		@TagGroupId OUTPUT;

	INSERT INTO {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog (
		UserScoringLogId, 
		UserId,
		ActionDefinitionId,
		TimeStamp,
		ContentId,
		DesktopModuleId,
		TagGroupId,
		PortalId,
		ActionTypeId,
		ContentTypeId,
		GroupId,
		ExperiencePoints,
		ReputationPoints)
	VALUES(
		@UserScoringLogId, 
		@UserId,
		@ScoringActionDefId,
		@CreatedOnDate,
		@ContentItemId,
		@DesktopModuleId,
		@TagGroupId,
		@PortalId,
		@ActionTypeId,
		@ContentTypeId,
		@GroupId,
		@ExperiencePoints,
		@ReputationPoints);
END
GO
-- STORED PROCEDURES NOT NEEDED ANY MORE
IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Get_NewUsers', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Get_NewUsers
GO
IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Get_TopActiveUsers', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Get_TopActiveUsers
GO
IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Get_TopFlaggedUsers', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Get_TopFlaggedUsers
GO
IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Get_TopContentCreators', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Get_TopContentCreators
GO
IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Get_TopContent', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Get_TopContent
GO
IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Get_NewContent', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Get_NewContent
GO
IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Get_FlaggedContent', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Get_FlaggedContent
GO
IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Get_ContentRequiringApproval', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Get_ContentRequiringApproval
GO
IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_GetContentTypes', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_GetContentTypes
GO
-- END  OF STORED PROCEDURES NOT NEEDED ANY MORE

IF object_id(N'{databaseOwner}{objectQualifier}Analytics_Fact_PopularContent_Rollup', 'U') IS NOT NULL
	DROP TABLE {databaseOwner}{objectQualifier}Analytics_Fact_PopularContent_Rollup
GO  

CREATE TABLE {databaseOwner}{objectQualifier}Analytics_Fact_PopularContent_Rollup (
	PortalId int NOT NULL,
	DesktopModuleId int NOT NULL,
	[Date] date NOT NULL,
	ContentItemId int NOT NULL,
	ContentCount int NOT NULL,
	CONSTRAINT PK_{objectQualifier}Analytics_Fact_PopularContent_Rollup PRIMARY KEY CLUSTERED 
	(
		PortalId,
		DesktopModuleId,
		[Date],
		ContentItemId
	) 
)
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_PopularContent', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_PopularContent
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_Calculate_PopularContent]
	@PortalId INT,
	@LocalDate DATE,
	@StartUtcDate DATETIME,
	@EndUtcDate DATETIME
AS 
BEGIN
	WITH PopularContent AS
	(				
		SELECT 
			f.DesktopModuleId as DesktopModuleId,
			f.ContentId as ContentItemId, 
			COUNT(DISTINCT(CASE WHEN at.ActionType = 'Viewed' THEN -f.UserId ELSE f.UserScoringLogId END)) as ContentCount			
		FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f 
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
			INNER JOIN {databaseOwner}{objectQualifier}vw_Analytics_Warehouse_Fact_Content v ON f.ContentId = v.ContentId
		WHERE at.ActionType NOT IN ('Flagged','Deleted','Moderated')
			AND f.PortalId = @PortalId
			AND f.DesktopModuleId > 0
            AND f.[TimeStamp] >= @StartUtcDate AND f.[TimeStamp] < @EndUtcDate
			AND v.CreateDate <= CONVERT(SMALLDATETIME, f.[TimeStamp])
			AND (v.DeleteDate IS NULL OR v.DeleteDate >= @EndUtcDate)
		GROUP BY f.DesktopModuleId, f.ContentId
	)
	MERGE {databaseOwner}[{objectQualifier}Analytics_Fact_PopularContent_Rollup] t
		USING PopularContent s
		ON (t.PortalId = @PortalId AND t.DesktopModuleId = s.DesktopModuleId AND t.[Date] = @LocalDate AND t.[ContentItemId] = s.[ContentItemId])
	WHEN NOT MATCHED BY TARGET THEN
		INSERT (PortalId,DesktopModuleId,Date,ContentItemId,ContentCount)
		VALUES (@PortalId, s.[DesktopModuleId], @LocalDate, s.[ContentItemId], s.[ContentCount])
	WHEN NOT MATCHED BY SOURCE AND t.ContentCount <> 0  and t.[Date] = @LocalDate THEN
		DELETE 
	WHEN MATCHED THEN
		UPDATE SET t.ContentCount = s.ContentCount;	
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetModulePopularContent', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetModulePopularContent
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_GetModulePopularContent]
	@DesktopModuleId INT,
	@Skip INT,
	@Take INT,
	@StartDate DATETIME,
	@EndDate DATETIME,
	@PortalId INT,
	@ComparativeTermOffset INT,
	@TimeZoneOffset INT
AS
BEGIN	
	;WITH PopularContent AS
	(
		SELECT  r.DesktopModuleId as DesktopModuleId, r.ContentItemId as ContentId, SUM(ContentCount) ContentCount,
		ROW_NUMBER() OVER(ORDER BY SUM(ContentCount) DESC) AS 'Rank'
		FROM {databaseOwner}[{objectQualifier}Analytics_Fact_PopularContent_Rollup] r
			INNER JOIN {databaseOwner}[{objectQualifier}vw_Analytics_Warehouse_Fact_Content] vw ON r.ContentItemId = vw.ContentId 
				AND (vw.DeleteDate IS NULL OR vw.DeleteDate >= DATEADD(HH, @TimeZoneOffset, @EndDate))
		WHERE 
			r.[PortalId] = @PortalId
			AND (@DesktopModuleId = 0 OR r.DesktopModuleId = @DesktopModuleId)
            AND [Date] >= DATEADD(HH, @TimeZoneOffset, @StartDate) 
			AND [Date] < DATEADD(HH, @TimeZoneOffset, @EndDate)
		GROUP BY r.DesktopModuleId, r.ContentItemId	
	),
	ComparativeTermPopularContent AS	
	(		
		SELECT 	r.DesktopModuleId as DesktopModuleId, r.ContentItemId as ContentId, SUM(ContentCount) ContentCount,
		ROW_NUMBER() OVER(ORDER BY SUM(ContentCount) DESC) AS 'Rank'
		FROM {databaseOwner}[{objectQualifier}Analytics_Fact_PopularContent_Rollup] r
			INNER JOIN {databaseOwner}[{objectQualifier}vw_Analytics_Warehouse_Fact_Content] vw ON r.ContentItemId = vw.ContentId 
					AND (vw.DeleteDate IS NULL OR vw.DeleteDate >= DATEADD(DAY, -@ComparativeTermOffset, DATEADD(HH, @TimeZoneOffset, @EndDate)))
		WHERE 
			r.[PortalId] = @PortalId
			AND (@DesktopModuleId = 0 OR r.[DesktopModuleId] = @DesktopModuleId)
            AND [Date] >= DATEADD(DAY, -@ComparativeTermOffset, DATEADD(HH, @TimeZoneOffset, @StartDate)) 
			AND [Date] < DATEADD(DAY, -@ComparativeTermOffset, DATEADD(HH, @TimeZoneOffset, @EndDate))
		GROUP BY r.DesktopModuleId, r.ContentItemId	
	)
	SELECT p.ContentId, 
			p.DesktopModuleId, 
			p.Rank, 
			p.ContentCount,
			(SELECT COUNT(*) FROM PopularContent) AS ContentTotal, 
			c.Rank AS ComparativeRank, 
			c.ContentCount AS ComparativeContentCount, 
			(SELECT SUM(ContentCount) FROM ComparativeTermPopularContent) AS ComparativeTotal 
	FROM PopularContent p
		LEFT JOIN ComparativeTermPopularContent c ON p.ContentId = c.ContentId
		WHERE p.Rank > @Skip AND p.Rank <= (@Skip + @Take)
END
GO

IF object_id(N'{databaseOwner}{objectQualifier}Analytics_Fact_TrendingTags_Rollup', 'U') IS NOT NULL
	DROP TABLE {databaseOwner}{objectQualifier}Analytics_Fact_TrendingTags_Rollup
GO  

CREATE TABLE {databaseOwner}{objectQualifier}Analytics_Fact_TrendingTags_Rollup
(
	PortalId int NOT NULL,
	[Date] date NOT NULL,
	DesktopModuleId int NOT NULL,	
	[TermId] int,
	TermCount int,
	
	CONSTRAINT PK_{objectQualifier}Analytics_Fact_TrendingTags_Rollup PRIMARY KEY CLUSTERED 
	(
		PortalId,
		[Date],
		DesktopModuleId,		
		[TermId]
	) 
)
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_TrendingTags', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_Calculate_TrendingTags
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_Calculate_TrendingTags]
	@PortalId INT,
	@LocalDate DATE,
	@StartUtcDate DATETIME,
	@EndUtcDate DATETIME
AS 
BEGIN
	;WITH TrendingTags (DesktopModuleId, TermId, TermCount) AS
	(
		SELECT f.DesktopModuleId  as DesktopModuleId, tt.TermID as TermId, COUNT(tt.Name) AS TermCount
		FROM  {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog f
			INNER JOIN {databaseOwner}{objectQualifier}Analytics_Dim_ActionType at ON f.ActionTypeId = at.ActionTypeId
			INNER JOIN {databaseOwner}{objectQualifier}vw_Analytics_Warehouse_Fact_Content fc ON fc.ContentId = f.ContentId AND (fc.DeleteDate IS NULL OR fc.DeleteDate >= @EndUtcDate)
			INNER JOIN {databaseOwner}{objectQualifier}ContentItems_Tags ct ON ct.ContentItemID = f.ContentId
			INNER JOIN {databaseOwner}{objectQualifier}Taxonomy_Terms tt ON tt.TermID = ct.TermID AND tt.Name <> '' 
		WHERE 
			f.PortalId = @PortalId 
			AND f.DesktopModuleId > 0
			AND	f.[TimeStamp] >= @StartUtcDate AND f.[TimeStamp] < @EndUtcDate 
			AND at.ActionType NOT IN ('Flagged', 'Deleted', 'Moderated')
		GROUP BY f.DesktopModuleId, tt.TermID
	)	
	MERGE {databaseOwner}[{objectQualifier}Analytics_Fact_TrendingTags_Rollup] t
		USING TrendingTags s
		ON (t.PortalId = @PortalId AND t.DesktopModuleId = s.DesktopModuleId AND t.[Date] = @LocalDate AND t.TermId = s.TermId)
	WHEN NOT MATCHED BY TARGET THEN
		INSERT (PortalId, DesktopModuleId, [Date], TermId, TermCount)
		VALUES (@PortalId, s.DesktopModuleId, @LocalDate, s.TermId, s.TermCount)
	WHEN NOT MATCHED BY SOURCE AND t.TermCount <> 0  and t.[Date] = @LocalDate THEN
		DELETE 
	WHEN MATCHED THEN
		UPDATE SET t.TermCount = s.TermCount;	
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetTrendingTags', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTrendingTags
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_GetTrendingTags]
	@DesktopModuleId INT,
	@Skip INT,
	@Take INT,
	@StartDate DATETIME,
	@EndDate DATETIME,
	@PortalId INT,
	@TimeZoneOffset INT
AS
BEGIN		

	;WITH TrendingTags (TermRank, Term, TermCount) AS 
	(SELECT ROW_NUMBER() OVER(ORDER BY SUM(TermCount) DESC) AS TermRank, tt.Name as Term, SUM(TermCount) TermCount
	 FROM {databaseOwner}[{objectQualifier}Analytics_Fact_TrendingTags_Rollup] r
		INNER JOIN {databaseOwner}[{objectQualifier}Taxonomy_Terms] tt ON tt.TermID = r.TermId
	 WHERE r.[PortalId] = @PortalId
			AND (@DesktopModuleId = 0 OR r.DesktopModuleId = @DesktopModuleId)
            AND [Date] >= DATEADD(HH, @TimeZoneOffset, @StartDate) 
			AND [Date] < DATEADD(HH, @TimeZoneOffset, @EndDate)
	 GROUP BY tt.Name
	)

	SELECT Term, TermCount, (SELECT COUNT(*) FROM TrendingTags) TotalTermCount 
	FROM TrendingTags
	WHERE TermRank BETWEEN @Skip + 1 AND @Skip + @Take 
	ORDER BY TermRank	
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopRankers', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopRankers
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopRankers
	@PortalId INT,
	@StartDate DATE,
	@EndDate DATE,
	@PageIndex INT,
	@PageSize INT
AS
BEGIN
	DECLARE @Lower INT = CAST(convert(varchar, @StartDate, 112) as int)
	DECLARE @Upper INT = CAST(convert(varchar, @EndDate, 112) as int)

	;WITH Users AS
	(
		SELECT	U.UserID, U.DisplayName
		FROM	{databaseOwner}{objectQualifier}Users U
			JOIN {databaseOwner}{objectQualifier}UserPortals UP WITH (NOLOCK)
						ON U.UserID = UP.UserId
		WHERE	UP.PortalId = @PortalId			
			AND	U.IsDeleted = 0
			AND	UP.IsDeleted = 0
	)		
	,TopRankers AS
	(
		SELECT	RU.UserID, SUM(RU.ReputationPoints) ReputationPoints,
				ROW_NUMBER() OVER (ORDER BY SUM(ReputationPoints) DESC) AS RowNumber
		FROM	{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup RU WITH (NOLOCK)
		WHERE	RU.Date BETWEEN @Lower AND @Upper
		  AND	PortalId = @PortalId
		GROUP BY RU.UserID
	)
	SELECT	TOP(@PageSize) U.UserId, DisplayName, ReputationPoints AS Value
	FROM	TopRankers R 
		JOIN Users U ON R.UserId = U.UserID
	WHERE	RowNumber > @PageIndex
	ORDER BY RowNumber
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopRankersByModule', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopRankersByModule
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopRankersByModule
	@PortalId INT,
	@DesktopModuleId INT,
	@StartDate DATE,
	@EndDate DATE,
	@PageIndex INT,
	@PageSize INT
AS
BEGIN
	DECLARE @Lower INT = CAST(convert(varchar, @StartDate, 112) as int)
	DECLARE @Upper INT = CAST(convert(varchar, @EndDate, 112) as int)

	;WITH Users AS
	(
		SELECT	U.UserID, U.DisplayName
		FROM	{databaseOwner}{objectQualifier}Users U
			JOIN {databaseOwner}{objectQualifier}UserPortals UP WITH (NOLOCK)
						ON U.UserID = UP.UserId
		WHERE	UP.PortalId = @PortalId			
			AND	U.IsDeleted = 0
			AND	UP.IsDeleted = 0
	)		
	,TopRankers AS
	(
		SELECT	RU.UserID, SUM(RU.ReputationPoints) ReputationPoints,
				ROW_NUMBER() OVER (ORDER BY SUM(ReputationPoints) DESC) AS RowNumber
		FROM	{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup RU WITH (NOLOCK)
		WHERE	RU.Date BETWEEN @Lower AND @Upper		  
		  AND	PortalId = @PortalId
		  AND	RU.DesktopModuleId = @DesktopModuleId
		GROUP BY RU.UserID
	)
	SELECT	TOP(@PageSize) U.UserId, DisplayName, ReputationPoints AS Value
	FROM	TopRankers R 
		JOIN Users U ON R.UserId = U.UserID
	WHERE	RowNumber > @PageIndex
	ORDER BY RowNumber
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopActiveUsers', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopActiveUsers
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopActiveUsers
	@PortalId INT,
	@StartDate DATE,
	@EndDate DATE,
	@PageIndex INT,
	@PageSize INT
AS
BEGIN
	DECLARE @Lower INT = CAST(convert(varchar, @StartDate, 112) as int)
	DECLARE @Upper INT = CAST(convert(varchar, @EndDate, 112) as int)

	;WITH Users AS
	(
		SELECT	U.UserID, U.DisplayName
		FROM	{databaseOwner}{objectQualifier}Users U
			JOIN {databaseOwner}{objectQualifier}UserPortals UP WITH (NOLOCK)
						ON U.UserID = UP.UserId
		WHERE	UP.PortalId = @PortalId			
			AND	U.IsDeleted = 0
			AND	UP.IsDeleted = 0
	)		
	,TopActiveUsers AS
	(
		SELECT	RU.UserID, SUM(RU.Activities) Activities,
				ROW_NUMBER() OVER (ORDER BY SUM(RU.Activities) DESC) AS RowNumber
		FROM	{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup RU WITH (NOLOCK)
		WHERE	RU.Date BETWEEN @Lower AND @Upper
		  AND	PortalId = @PortalId
		GROUP BY RU.UserID
	)
	SELECT	TOP(@PageSize) U.UserId, DisplayName, Activities AS Value
	FROM	TopActiveUsers AU
		JOIN Users U ON AU.UserId = U.UserID
	WHERE	RowNumber > @PageIndex
	ORDER BY RowNumber
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopActiveUsersByModule', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopActiveUsersByModule
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopActiveUsersByModule
	@PortalId INT,
	@DesktopModuleId INT,
	@StartDate DATE,
	@EndDate DATE,
	@PageIndex INT,
	@PageSize INT
AS
BEGIN
	DECLARE @Lower INT = CAST(convert(varchar, @StartDate, 112) as int)
	DECLARE @Upper INT = CAST(convert(varchar, @EndDate, 112) as int)

	;WITH Users AS
	(
		SELECT	U.UserID, U.DisplayName
		FROM	{databaseOwner}{objectQualifier}Users U
			JOIN {databaseOwner}{objectQualifier}UserPortals UP WITH (NOLOCK)
						ON U.UserID = UP.UserId
		WHERE	UP.PortalId = @PortalId			
			AND	U.IsDeleted = 0
			AND	UP.IsDeleted = 0
	)		
	,TopActiveUsers AS
	(
		SELECT	RU.UserID, SUM(RU.Activities) Activities,
				ROW_NUMBER() OVER (ORDER BY SUM(RU.Activities) DESC) AS RowNumber
		FROM	{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup RU WITH (NOLOCK)
		WHERE	RU.Date BETWEEN @Lower AND @Upper 
		  AND	PortalId = @PortalId
		  AND	RU.DesktopModuleId = @DesktopModuleId
		GROUP BY RU.UserID
	)
	SELECT	TOP(@PageSize) U.UserId, DisplayName, Activities AS Value
	FROM	TopActiveUsers AU
		JOIN Users U ON AU.UserId = U.UserID
	WHERE	RowNumber > @PageIndex
	ORDER BY RowNumber
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopSpectators', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopSpectators
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopSpectators
	@PortalId INT,
	@StartDate DATE,
	@EndDate DATE,
	@PageIndex INT,
	@PageSize INT
AS
BEGIN
	DECLARE @Lower INT = CAST(convert(varchar, @StartDate, 112) as int)
	DECLARE @Upper INT = CAST(convert(varchar, @EndDate, 112) as int)

	;WITH ActiveUsers AS
	(
		SELECT	U.UserID, U.DisplayName
		FROM	{databaseOwner}{objectQualifier}Users U
			JOIN {databaseOwner}{objectQualifier}UserPortals UP WITH (NOLOCK)
						ON U.UserID = UP.UserId
		WHERE	UP.PortalId = @PortalId			
			AND	U.IsDeleted = 0
			AND	UP.IsDeleted = 0
	)		
	,TopSpectators AS
	(
		SELECT	RU.UserID, SUM(RU.SpectatorCount) SpectatorCount,
				ROW_NUMBER() OVER (ORDER BY SUM(SpectatorCount) DESC) AS RowNumber
		FROM	{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup RU WITH (NOLOCK)
		WHERE	RU.Date BETWEEN @Lower AND @Upper
		  AND	PortalId = @PortalId
		  AND	RU.SpectatorCount > 0
		GROUP BY RU.UserID
	)
	SELECT	TOP(@PageSize) U.UserId, DisplayName, SpectatorCount AS Value
	FROM	TopSpectators S 
		JOIN ActiveUsers U ON S.UserId = U.UserID
	WHERE	RowNumber > @PageIndex
	ORDER BY RowNumber
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopSpectatorsByModule', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopSpectatorsByModule
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetTopSpectatorsByModule
	@PortalId INT,
	@DesktopModuleId INT,
	@StartDate DATE,
	@EndDate DATE,
	@PageIndex INT,
	@PageSize INT
AS
BEGIN
	DECLARE @Lower INT = CAST(convert(varchar, @StartDate, 112) as int)
	DECLARE @Upper INT = CAST(convert(varchar, @EndDate, 112) as int)

	;WITH ActiveUsers AS
	(
		SELECT	U.UserID, U.DisplayName
		FROM	{databaseOwner}{objectQualifier}Users U
			JOIN {databaseOwner}{objectQualifier}UserPortals UP WITH (NOLOCK)
						ON U.UserID = UP.UserId
		WHERE	UP.PortalId = @PortalId			
			AND	U.IsDeleted = 0
			AND	UP.IsDeleted = 0
	)		
	,TopSpectators AS
	(
		SELECT	RU.UserID, SUM(RU.SpectatorCount) SpectatorCount,
				ROW_NUMBER() OVER (ORDER BY SUM(SpectatorCount) DESC) AS RowNumber
		FROM	{databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLogRollup RU WITH (NOLOCK)
		WHERE	RU.Date BETWEEN @Lower AND @Upper
		  AND	PortalId = @PortalId
		  AND	RU.DesktopModuleId = @DesktopModuleId
		  AND	RU.SpectatorCount > 0
		GROUP BY RU.UserID
	)
	SELECT	TOP(@PageSize) U.UserId, DisplayName, SpectatorCount AS Value
	FROM	TopSpectators S 
		JOIN ActiveUsers U ON S.UserId = U.UserID
	WHERE	RowNumber > @PageIndex
	ORDER BY RowNumber
END
GO

-- Cleanup unneeded setting
DELETE FROM {databaseOwner}{objectQualifier}HostSettings
WHERE SettingName = 'SocialAnalyticsMigrationLogEndId'
GO

DECLARE @MaxUserScoringLogId INT;
SELECT @MaxUserScoringLogId = MAX(UserScoringLogId) FROM {databaseOwner}{objectQualifier}Mechanics_UserScoringLog
SET @MaxUserScoringLogId = COALESCE(@MaxUserScoringLogId, 0);

IF NOT EXISTS (SELECT 1 FROM {databaseOwner}{objectQualifier}HostSettings WHERE SettingName = 'SocialAnalyticsLastLogMigrated')
BEGIN
	INSERT INTO {databaseOwner}{objectQualifier}HostSettings (SettingName, SettingValue, SettingIsSecure, CreatedByUserID, CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
		VALUES('SocialAnalyticsLastLogMigrated', CAST(@MaxUserScoringLogId AS INT), 0, -1, GETDATE(), -1, GETDATE())
END
ELSE
BEGIN
	UPDATE {databaseOwner}{objectQualifier}HostSettings 
	SET SettingValue = @MaxUserScoringLogId
	WHERE SettingName = 'SocialAnalyticsLastLogMigrated'
END
GO

IF OBJECT_ID(N'{databaseOwner}{objectQualifier}Analytics_Warehouse_MigrateUserScoringLogEntries', 'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_MigrateUserScoringLogEntries
GO            

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_MigrateUserScoringLogEntries
	@StartingLogId INT,
	@MaxLogs INT					
AS
BEGIN
	DECLARE @LastLogMigrated INT
	DECLARE @UserScoringLogId INT    
	DECLARE @UserId INT
	DECLARE @PortalId INT
	DECLARE @ContentItemId INT
	DECLARE @ScoringActionDefId INT
	DECLARE @ExperiencePoints INT
	DECLARE @ReputationPoints INT
	DECLARE @CreatedOnDate DATETIME
	DECLARE @GroupId INT
	DECLARE @ActionType INT
	DECLARE @DesktopModuleId INT
	DECLARE @Activities INT

	DECLARE LogCursor CURSOR FAST_FORWARD
	FOR SELECT TOP(@MaxLogs)
		usl.UserScoringLogId,
		usl.UserId,
		usl.PortalId,
		usl.ContentItemId,
		usl.ScoringActionDefId,
		usl.ExperiencePoints,
		usl.ReputationPoints,
		usl.CreatedOnDate,
		usl.GroupId,
		sad.ActionType,
		sad.DesktopModuleId
	FROM {databaseOwner}{objectQualifier}Mechanics_UserScoringLog usl
	INNER JOIN {databaseOwner}{objectQualifier}Mechanics_ScoringActionDefinition sad
		ON usl.ScoringActionDefId = sad.ScoringActionDefId
	WHERE UserScoringLogId >= @StartingLogId
	ORDER BY UserScoringLogId

	OPEN LogCursor
	FETCH NEXT FROM LogCursor INTO 
		@UserScoringLogId,
		@UserId,
		@PortalId,
		@ContentItemId,
		@ScoringActionDefId,
		@ExperiencePoints,
		@ReputationPoints,
		@CreatedOnDate,
		@GroupId,
		@ActionType,
		@DesktopModuleId

	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @LastLogMigrated = @UserScoringLogId

		IF NOT EXISTS (SELECT 1 FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog WHERE UserScoringLogId = @UserScoringLogId)
		BEGIN
			EXEC  {databaseOwner}{objectQualifier}Analytics_Warehouse_MigrateUserScoringLogEntry
				@UserScoringLogId,
				@UserId,
				@PortalId,
				@ContentItemId,
				@ScoringActionDefId,
				@ExperiencePoints,
				@ReputationPoints,
				@CreatedOnDate,
				@GroupId
		END

		FETCH NEXT FROM LogCursor INTO
			@UserScoringLogId,
			@UserId,
			@PortalId,
			@ContentItemId,
			@ScoringActionDefId,
			@ExperiencePoints,
			@ReputationPoints,
			@CreatedOnDate,
			@GroupId,
			@ActionType,
			@DesktopModuleId
	END

	CLOSE LogCursor
	DEALLOCATE LogCursor

	SELECT ISNULL(@LastLogMigrated, 0)
END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Warehouse_GetMinimumLogDate]', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_GetMinimumLogDate]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Warehouse_GetMinimumLogDate
	@PortalId INT
AS
BEGIN
	SELECT ISNULL(MIN(TimeStamp), GETDATE())
	FROM {databaseOwner}{objectQualifier}Analytics_Fact_UserScoringLog WITH (NOLOCK)
	WHERE PortalId = @PortalId
END
GO

/********************************************************
 ********************************************************
 * SOCIAL-3705: Migrate Time on Page to use Content
 ********************************************************
 ********************************************************/

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Calculate_PageTime]', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Calculate_PageTime]
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_PageTime_Insert]', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_PageTime_Insert]
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Reschedule_User]', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Reschedule_User]
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Warehouse_GetMinimumPageTimeLogDate]', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Warehouse_GetMinimumPageTimeLogDate]
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_PageTime_Aggregate]', 'U') IS NOT NULL
	DROP TABLE {databaseOwner}[{objectQualifier}Analytics_PageTime_Aggregate]
GO

/********************************************************
 * SPROC: Analytics_Calculate_User
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Calculate_User]', N'P') IS NULL
	EXEC('CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Calculate_User] AS BEGIN SELECT 1 END');
GO

ALTER PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Calculate_User]
	@PortalId int,
	@UserId int,
	@InfluenceGoal int
AS
BEGIN
	DECLARE @TotalSeconds bigint
	DECLARE @Engagement xml
	DECLARE @Contribution xml
	DECLARE @Activity xml
	DECLARE @Login xml

	DECLARE @ExistingEngagement xml
	DECLARE @ExistingContribution xml
	DECLARE @ExistingActivity xml
	DECLARE @ExistingLogin xml

	DECLARE @InfluenceDaily INT
	DECLARE @InfluenceWeekly INT
	DECLARE @InfluenceMonthly INT
	DECLARE @InfluenceYearly INT

	DECLARE @LowerDaily DATETIME
	DECLARE @UpperDaily DATETIME
	DECLARE @LowerWeekly DATETIME
	DECLARE @LowerMonthly DATETIME
	DECLARE @LowerYearly DATETIME

	DECLARE @ProcessDate DATETIME

	SET @UpperDaily = getutcdate()
	SET @LowerDaily = dateadd(day, -1, @UpperDaily)
	SET @LowerWeekly = dateadd(day, -7, @UpperDaily)
	SET @LowerMonthly = dateadd(month, -1, @UpperDaily)
	SET @LowerYearly = dateadd(year, -1, @UpperDaily)

	-- Get all the Influence Data
	SELECT	@InfluenceDaily = {databaseOwner}{objectQualifier}Analytics_Calculate_User_Influence(@PortalId, @UserId, @LowerDaily, @UpperDaily)
	SELECT	@InfluenceWeekly = {databaseOwner}{objectQualifier}Analytics_Calculate_User_Influence(@PortalId, @UserId, @LowerWeekly, @UpperDaily)
	SELECT	@InfluenceMonthly = {databaseOwner}{objectQualifier}Analytics_Calculate_User_Influence(@PortalId, @UserId, @LowerMonthly, @UpperDaily)
	SELECT	@InfluenceYearly = {databaseOwner}{objectQualifier}Analytics_Calculate_User_Influence(@PortalId, @UserId, @LowerYearly, @UpperDaily)

	--Convert to Percentage
	IF @InfluenceGoal = 0
		SET @InfluenceGoal = 2000

	SET @InfluenceDaily = (@InfluenceDaily * 100) / @InfluenceGoal
	SET @InfluenceWeekly = (@InfluenceWeekly * 100) / @InfluenceGoal
	SET @InfluenceMonthly = (@InfluenceMonthly * 100) / @InfluenceGoal
	SET @InfluenceYearly = (@InfluenceYearly * 100) / @InfluenceGoal

	SELECT	@TotalSeconds = COALESCE(SUM(CONVERT(bigint,COALESCE(TimeOnPage, 0))), 0)
	FROM	{databaseOwner}[{objectQualifier}Analytics_Fact_Users]
	WHERE	[PortalId] = @PortalId AND [UserId] = @UserId

	-- Generate user time series XML documents
	SELECT	@Engagement = {databaseOwner}{objectQualifier}Analytics_Generate_Engagement_TimeSeries(@PortalId, @UserId)
	SELECT	@Contribution = {databaseOwner}{objectQualifier}Analytics_Generate_Contribution_TimeSeries(@PortalId, @UserId)
	SELECT	@Activity = {databaseOwner}{objectQualifier}Analytics_Generate_Activity_TimeSeries(@PortalId, @UserId)
	SELECT	@Login = {databaseOwner}{objectQualifier}Analytics_Generate_Login_TimeSeries(@PortalId, @UserId)

	SELECT	@ExistingEngagement = N'<TimeSeries />';
	SELECT	@ExistingContribution = N'<TimeSeries />';
	SELECT	@ExistingActivity = N'<TimeSeries />';
	SELECT	@ExistingLogin = N'<TimeSeries />';

	SET		@ExistingEngagement.modify('insert sql:variable("@Engagement") into (/TimeSeries)[1]')
	SET		@ExistingContribution.modify('insert sql:variable("@Contribution") into (/TimeSeries)[1]')
	SET		@ExistingActivity.modify('insert sql:variable("@Activity") into (/TimeSeries)[1]')
	SET		@ExistingLogin.modify('insert sql:variable("@Login") into (/TimeSeries)[1]')

	IF EXISTS(
			SELECT	*
			FROM	{databaseOwner}[{objectQualifier}Analytics_Users]
			WHERE	[PortalId] = @PortalId AND [UserId] = @UserId)
	BEGIN
		UPDATE {databaseOwner}[{objectQualifier}Analytics_Users]
			SET
				[ProcessDate] = NULL,
				[TotalSeconds] = @TotalSeconds,
				[Engagement] = @ExistingEngagement,
				[Contribution] = @ExistingContribution,
				[Activity] = @ExistingActivity,
				[Login] = @ExistingLogin
		WHERE	[PortalId] = @PortalId AND [UserId] = @UserId
	END
	ELSE
	BEGIN
		INSERT INTO {databaseOwner}[{objectQualifier}Analytics_Users]
			([PortalId],
			 [UserId],
			 [ProcessDate],
			 [TotalSeconds],
			 [Engagement],
			 [Contribution],
			 [Activity],
			 [Login])
		VALUES
			(@PortalId,
			 @UserId,
			 NULL,
			 @TotalSeconds,
			 @ExistingEngagement,
			 @ExistingContribution,
			 @ExistingActivity,
			 @ExistingLogin)
	END

	IF EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}Analytics_UserInfluenceRollup
				WHERE PortalId = @PortalId AND UserId = @UserId)
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}Analytics_UserInfluenceRollup
			SET InfluenceDaily = @InfluenceDaily,
				InfluenceWeekly = @InfluenceWeekly,
				InfluenceMonthly = @InfluenceMonthly,
				InfluenceYearly = @InfluenceYearly
			WHERE PortalId = @PortalId AND UserId = @UserId
		END
	ELSE
		BEGIN
			INSERT {databaseOwner}{objectQualifier}Analytics_UserInfluenceRollup(PortalId, UserId, InfluenceDaily, InfluenceWeekly, InfluenceMonthly, InfluenceYearly)
			VALUES (@PortalId, @UserId, @InfluenceDaily, @InfluenceWeekly, @InfluenceMonthly, @InfluenceYearly)
		END

	-- Result set
	SELECT
		@PortalId AS [PortalId],
		@UserId AS [UserId],
		@ProcessDate AS [ProcessDate],
		@TotalSeconds AS [TotalSeconds],
		@ExistingEngagement AS [EngagementDocument],
		@ExistingContribution AS [ContributionDocument],
		@ExistingActivity AS [ActivityDocument],
		@ExistingLogin AS [LoginDocument]
END
GO

/********************************************************
 * SPROC: Analytics_Get_Portal_Aggregate_PageTime
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Get_Portal_Aggregate_PageTime]', N'P') IS NULL
	EXEC('CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Get_Portal_Aggregate_PageTime] AS BEGIN SELECT 1 END');
GO

ALTER PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Get_Portal_Aggregate_PageTime]
	@PortalId int,
	@StartDateUtc SMALLDATETIME,
	@EndDateUtc SMALLDATETIME,
	@LocalDate DATETIME,
	@Grouping CHAR(1)
AS
BEGIN
	DECLARE @Results AS Table
	(
		[PortalId] INT,
		[StartDate] DATETIME,
		[EndDate] DATETIME,
		[TabId] INT,
		[AnonymousViews] BIGINT,
		[AnonymousTotalSeconds] BIGINT,
		[RegisteredViews] BIGINT,
		[RegisteredTotalSeconds] BIGINT,
		[TotalViews] BIGINT,
		[TotalSeconds] BIGINT
	)

	DECLARE @Count INT = 1
	DECLARE @MaxDate DATETIME = @EndDateUtc
	DECLARE @MinDate DATETIME = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDateUtc, @StartDateUtc, @Count, @Grouping)

	DECLARE @LocalDateDiff INT = DATEDIFF(minute, @EndDateUtc, @LocalDate)
	DECLARE @MinLocalDate DATETIME = DATEADD(minute, @LocalDateDiff, @StartDateUtc)
	DECLARE @LocalMaxDate DATETIME = DATEADD(minute, @LocalDateDiff, @MaxDate)
	DECLARE @LocalMinDate DATETIME = DATEADD(minute, @LocalDateDiff, @MinDate)

	WHILE @StartDateUtc < @MaxDate
	BEGIN
		DECLARE @MinDateId INT = DATEPART(year, @MinDate) * 1000000 + DATEPART(month, @MinDate) * 10000 + DATEPART(day, @MinDate) * 100 + DATEPART(hour, @MinDate)
		DECLARE @MaxDateId INT = DATEPART(year, @MaxDate) * 1000000 + DATEPART(month, @MaxDate) * 10000 + DATEPART(day, @MaxDate) * 100 + DATEPART(hour, @MaxDate)

		INSERT INTO @Results
			SELECT @PortalId, @MinDate, @MaxDate, -1 AS [TabId],
					COALESCE(SUM(CASE WHEN UserId <= 0 THEN PageViews ELSE 0 END), 0), -- @AnonymousViews
					COALESCE(SUM(CASE WHEN UserId <= 0 THEN CONVERT(BIGINT,TimeOnPage) ELSE 0 END), 0), -- @AnonymousTotalSeconds
					COALESCE(SUM(CASE WHEN UserId >  0 THEN PageViews ELSE 0 END), 0), -- @RegisteredViews
					COALESCE(SUM(CASE WHEN UserId >  0 THEN CONVERT(BIGINT,TimeOnPage) ELSE 0 END), 0), -- @RegisteredTotalSeconds
					COALESCE(SUM(PageViews), 0), -- TotalViews
					COALESCE(SUM(CONVERT(BIGINT,TimeOnPage)), 0) -- @TotalSeconds
			FROM {databaseOwner}[{objectQualifier}Analytics_Fact_Users] WITH (NOLOCK)
			WHERE   [PortalId] = @PortalId
				AND	([DateId] >= @MinDateId AND [DateId] < @MaxDateId)
		OPTION (RECOMPILE);

		-- INSERT ZERO VALUES
		INSERT INTO @Results
			SELECT @PortalId,  @MinDate, @MaxDate, -1 AS [TabId],
			0, 0, 0, 0, 0, 0
			WHERE NOT EXISTS (SELECT * FROM @Results r
								WHERE r.[PortalId] = @PortalId AND
								r.[StartDate] = @MinDate AND
								r.[EndDate] = @MaxDate AND
								r.[TabId] = -1)
		OPTION (RECOMPILE);

		SET @MaxDate = @MinDate
		SET @Count = @Count + 1
		SET @MinDate = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDateUtc, @StartDateUtc, @Count, @Grouping)

		SET @LocalMaxDate = @LocalMinDate
		SET @LocalMinDate = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@LocalDate, @MinLocalDate, @Count, @Grouping)

	END

	SELECT * FROM @Results ORDER BY [StartDate]
END
GO

/********************************************************
 * SPROC: Analytics_Get_Module_Aggregate_PageTime
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Get_Module_Aggregate_PageTime]', N'P') IS NULL
	EXEC('CREATE PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Get_Module_Aggregate_PageTime] AS BEGIN SELECT 1 END');
GO

ALTER PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Get_Module_Aggregate_PageTime]
	@PortalId INT,
	@StartDateUtc SMALLDATETIME,
	@EndDateUtc SMALLDATETIME,
	@LocalDate DATETIME,
	@Grouping CHAR(1),
	@ModuleTabs NVARCHAR(MAX)
AS
BEGIN

	DECLARE @Results AS Table
	(
		[PortalId] INT,
		[StartDate] DATETIME,
		[EndDate] DATETIME,
		[TabId] INT,
		[AnonymousViews] BIGINT,
		[AnonymousTotalSeconds] BIGINT,
		[RegisteredViews] BIGINT,
		[RegisteredTotalSeconds] BIGINT,
		[TotalViews] BIGINT,
		[TotalSeconds] BIGINT
	)

	DECLARE @Tabs AS TABLE (TabId INT)
	INSERT INTO @Tabs (TabId)
		SELECT val FROM {databaseOwner}{objectQualifier}Analytics_CsvSplit(@ModuleTabs, ',')
	OPTION (RECOMPILE);

	DECLARE @Count INT = 1
	DECLARE @MaxDate DATETIME = @EndDateUtc
	DECLARE @MinDate DATETIME = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDateUtc, @StartDateUtc, @Count, @Grouping)

	DECLARE @LocalDateDiff INT = DATEDIFF(minute, @EndDateUtc, @LocalDate)
	DECLARE @MinLocalDate DATETIME = DATEADD(minute, @LocalDateDiff, @StartDateUtc)
	DECLARE @LocalMaxDate DATETIME = DATEADD(minute, @LocalDateDiff, @MaxDate)
	DECLARE @LocalMinDate DATETIME = DATEADD(minute, @LocalDateDiff, @MinDate)

	WHILE @StartDateUtc < @MaxDate
	BEGIN
		DECLARE @MinDateId INT = DATEPART(year, @MinDate) * 1000000 + DATEPART(month, @MinDate) * 10000 + DATEPART(day, @MinDate) * 100 + DATEPART(hour, @MinDate)
		DECLARE @MaxDateId INT = DATEPART(year, @MaxDate) * 1000000 + DATEPART(month, @MaxDate) * 10000 + DATEPART(day, @MaxDate) * 100 + DATEPART(hour, @MaxDate)

		INSERT INTO @Results
			SELECT @PortalId, @MinDate, @MaxDate, -1 AS [TabId],
					COALESCE(SUM(CASE WHEN UserId <= 0 THEN PageViews ELSE 0 END), 0), -- @AnonymousViews
					COALESCE(SUM(CASE WHEN UserId <= 0 THEN CONVERT(BIGINT,TimeOnPage) ELSE 0 END), 0), -- @AnonymousTotalSeconds
					COALESCE(SUM(CASE WHEN UserId >  0 THEN PageViews ELSE 0 END), 0), -- @RegisteredViews
					COALESCE(SUM(CASE WHEN UserId >  0 THEN CONVERT(BIGINT,TimeOnPage) ELSE 0 END), 0), -- @RegisteredTotalSeconds
					COALESCE(SUM(PageViews), 0), -- TotalViews
					COALESCE(SUM(CONVERT(BIGINT,TimeOnPage)), 0) -- @TotalSeconds
			FROM {databaseOwner}[{objectQualifier}Analytics_Fact_Users] WITH (NOLOCK)
			WHERE   [PortalId] = @PortalId
				AND	([DateId] >= @MinDateId AND [DateId] < @MaxDateId)
				AND	[PageId] IN (SELECT TabId FROM @Tabs)
		OPTION (RECOMPILE);

		-- INSERT ZERO VALUES
		IF NOT EXISTS (
			SELECT * FROM @Results r
			WHERE r.[PortalId] = @PortalId AND
			      r.[StartDate] = @MinDate AND
				  r.[EndDate] = @MaxDate)
			INSERT INTO @Results
				SELECT @PortalId,  @MinDate, @MaxDate, -1,
				0, 0, 0, 0, 0, 0

		SET @MaxDate = @MinDate
		SET @Count = @Count + 1
		SET @MinDate = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@EndDateUtc, @StartDateUtc, @Count, @Grouping)

		SET @LocalMaxDate = @LocalMinDate
		SET @LocalMinDate = {databaseOwner}{objectQualifier}Analytics_DecrementDate(@LocalDate, @MinLocalDate, @Count, @Grouping)

	END

	SELECT [PortalId], [StartDate], [EndDate], MIN([TabId]) AS [TabId],
		COALESCE(SUM([AnonymousViews]), 0) AS [AnonymousViews],
		COALESCE(SUM([AnonymousTotalSeconds]), 0) AS [AnonymousTotalSeconds],
		COALESCE(SUM([RegisteredViews]), 0) AS [RegisteredViews],
		COALESCE(SUM([RegisteredTotalSeconds]), 0) AS [RegisteredTotalSeconds],
		COALESCE(SUM([TotalViews]), 0) AS [TotalViews],
		COALESCE(SUM([TotalSeconds]), 0) AS [TotalSeconds]
	FROM @Results
	GROUP BY [PortalId], [StartDate], [EndDate]
	ORDER BY [StartDate]
END
GO

-- *********************************
-- FUNCTION: Analytics_Get_User_Score
-- *********************************
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Get_User_Score]', N'FN') IS NOT NULL
	DROP FUNCTION {databaseOwner}{objectQualifier}Analytics_Get_User_Score
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}Analytics_Get_User_Score](
	@PortalId int,
	@UserId int,
	@GoalList varchar(64),
	@LowerBound datetime,
	@UpperBound datetime)
		RETURNS decimal
AS
BEGIN
	DECLARE @FriendCount int
	DECLARE @Posts int
	DECLARE @Likes int
	DECLARE @ViewCount int
	DECLARE @Responses int
	DECLARE @AcceptedAnswers int
	DECLARE @DeliveredIdeas int
	DECLARE @ActiveEvents int
	DECLARE @FlaggedContent int
	DECLARE @AvgTime bigint
	DECLARE @SiteTime bigint
	DECLARE @Logins int
	DECLARE @Votes int
	DECLARE	@IdeasVotes int
	DECLARE @AnswersVotes int

	;WITH innerList AS(
		SELECT DISTINCT
				CASE WHEN ur.[UserID] = @UserId THEN ur.[RelatedUserID] ELSE ur.[UserID] END AS [UserId]
		FROM {databaseOwner}[{objectQualifier}UserRelationships] ur WITH (NOLOCK)
			INNER JOIN {databaseOwner}[{objectQualifier}Relationships] r WITH (NOLOCK) ON r.RelationshipID = ur.RelationshipID
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}Mechanics_UserScoring] us WITH (NOLOCK) ON CASE WHEN ur.RelatedUserID = @UserId THEN ur.UserID ELSE ur.RelatedUserID END = us.UserId
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}Users] u WITH (NOLOCK) ON u.UserID = CASE WHEN ur.[UserID] = @UserId THEN ur.[RelatedUserID] ELSE ur.[UserID] END
		WHERE (ur.UserID = @UserId OR ur.RelatedUserID = @UserId) AND r.Name = 'Friends' AND ur.Status = 2 --Accepted
		  AND (ur.CreatedOnDate BETWEEN @LowerBound AND @UpperBound)
	)
	SELECT @FriendCount = COALESCE(COUNT(*), 0) FROM innerList

	DECLARE @ContentTypes TABLE(ContentTypeId INT)

	INSERT INTO @ContentTypes (ContentTypeId)
	SELECT	ContentTypeID
	FROM	{databaseOwner}{objectQualifier}ContentTypes
	WHERE	ContentType IN
				('DNNCorp_Answers_Question',
				 'DNNCorp_Blogs_Entry',
				 'DNNCorp_Discussions_Topic',
				 'DNNCorp_Ideas_Idea',
				 'DNNCorp_JournalGroup',
				 'DNNCorp_JournalProfile',
				 'DNNCorp_SocialEvents_Event')

	SELECT	@Posts = COALESCE(COUNT(*), 0)
	FROM	{databaseOwner}{objectQualifier}ContentItems WITH (NOLOCK)
	WHERE	CreatedByUserID = @UserId AND ContentTypeID IN (SELECT ContentTypeId FROM @ContentTypes)
	AND		CreatedOnDate >= @LowerBound AND CreatedOnDate <= @UpperBound

	-- Find out how many likes posts by this user have received.
	SELECT @Likes = COALESCE(JournalXML.value('count(//likes/u)', 'int'), 0)
	FROM {databaseOwner}{objectQualifier}Journal_Data jd WITH (NOLOCK)
	INNER JOIN {databaseOwner}{objectQualifier}Journal j WITH (NOLOCK) ON j.JournalId = jd.JournalId
	INNER JOIN {databaseOwner}{objectQualifier}ContentItems ci WITH (NOLOCK) ON ci.ContentItemID = j.ContentItemId
	WHERE ci.CreatedByUserID = @UserId AND j.DateCreated >= @LowerBound AND j.DateCreated <= @UpperBound

	-- Find out how many views posts by this user have received.
	;WITH cteContentItems
		AS (Select ContentItemID
			From {databaseOwner}[{objectQualifier}ContentItems] WITH (NOLOCK)
			Where CreatedByUserID = @UserId
			  And CreatedOnDate >= @LowerBound
			  And CreatedOnDate <= @UpperBound
		),
	cteUserViews(ViewCount)
		AS (
				SELECT SUM([ViewCount]) AS [ViewCount]
				FROM {databaseOwner}[{objectQualifier}Answers_Post] ap WITH (NOLOCK)
					INNER JOIN cteContentItems ci On ci.ContentItemID = ap.ContentItemID
			UNION
				SELECT SUM([Views]) AS [ViewCount]
				FROM {databaseOwner}[{objectQualifier}Ideas_Idea] ii WITH (NOLOCK)
					INNER JOIN cteContentItems ci On ci.ContentItemID = ii.ContentItemID
			UNION
				SELECT SUM([ViewCount]) AS [ViewCount]
				FROM {databaseOwner}[{objectQualifier}Discussions_Topic] dt WITH (NOLOCK)
					INNER JOIN cteContentItems ci On ci.ContentItemID = dt.ContentItemID
			UNION
				SELECT SUM([ViewCount]) AS [ViewCount]
				FROM {databaseOwner}[{objectQualifier}SocialEvents_Event] se WITH (NOLOCK)
					INNER JOIN cteContentItems ci On ci.ContentItemID = se.ContentItemID
			UNION
				SELECT SUM([Views]) AS [ViewCount]
				FROM {databaseOwner}[{objectQualifier}Blogs_Entry] be WITH (NOLOCK)
					INNER JOIN cteContentItems ci On ci.ContentItemID = be.ContentItemID
			UNION
				SELECT SUM([ViewCount]) AS [ViewCount]
				FROM {databaseOwner}[{objectQualifier}Wiki_Article] wa WITH (NOLOCK)
					INNER JOIN cteContentItems ci On ci.ContentItemID = wa.ContentItemID
		)
	SELECT @ViewCount = COALESCE(SUM([ViewCount]), 0) From cteUserViews

	-- Find out how many responses that posts by this user have received.
	SELECT	@Responses = COALESCE(COUNT(*), 0)
	FROM	{databaseOwner}[{objectQualifier}Journal_Comments] jc WITH (NOLOCK)
	INNER JOIN {databaseOwner}[{objectQualifier}Journal] j WITH (NOLOCK) ON j.JournalId = jc.JournalId
	INNER JOIN {databaseOwner}[{objectQualifier}ContentItems] ci WITH (NOLOCK) ON ci.ContentItemID = j.ContentItemId
	WHERE	ci.CreatedByUserID = @UserId AND jc.DateCreated >= @LowerBound AND jc.DateCreated <= @UpperBound

	-- Find out how many answers they've posted that have been accepted.
	SELECT	@AcceptedAnswers = COALESCE(COUNT(*), 0)
	FROM	{databaseOwner}[{objectQualifier}Answers_Post] WITH (NOLOCK)
	WHERE	CreatedUserId = @UserId AND ParentId > 0 AND CreatedDate >= @LowerBound AND CreatedDate <= @UpperBound

	-- Find out how many ideas have been placed into Delivered state.
	SELECT	@DeliveredIdeas = COALESCE(COUNT(*), 0)
	FROM	{databaseOwner}{objectQualifier}Ideas_Idea i WITH (NOLOCK)
	INNER JOIN {databaseOwner}{objectQualifier}ContentItems ci WITH (NOLOCK) ON ci.ContentItemID = i.ContentItemId
	WHERE	ci.CreatedByUserID = @UserId
	AND		i.Status = 6

	-- Find out how many events are active.
	SELECT	@ActiveEvents = COALESCE(COUNT(*), 0)
	FROM	{databaseOwner}{objectQualifier}SocialEvents_Event se WITH (NOLOCK)
	INNER JOIN {databaseOwner}{objectQualifier}ContentItems ci WITH (NOLOCK) ON ci.ContentItemID = se.ContentItemId
	WHERE	ci.CreatedByUserID = @UserId
	AND		se.StartTime >= @LowerBound AND se.StartTime <= @UpperBound AND [Approved] = 1

	-- Find out how much content has been flagged.
	;WITH pagerCount AS (
		SELECT			DISTINCT musl.[ContentItemId]
		FROM			{databaseOwner}[{objectQualifier}Mechanics_UserScoringLog] musl WITH (NOLOCK)
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}ContentItems] ci WITH (NOLOCK) ON ci.[ContentItemID] = musl.[ContentItemId]
		WHERE			musl.[UserId] = @UserId AND musl.[CreatedOnDate] >= @LowerBound AND musl.[CreatedOnDate] <= @UpperBound
		AND				ci.[ContentTypeID] > 3
		AND				{databaseOwner}{objectQualifier}Mechanics_ScoringActionIsOfActionType(musl.[ScoringActionDefId], 5) = 1)
	SELECT @FlaggedContent = COALESCE(COUNT(*), 0) FROM pagerCount

	-- How much time they've spent on each page on average.

	DECLARE @LowerBoundInt INT = Year(@LowerBound) * 1000000 + Month(@LowerBound) * 10000 + Day(@LowerBound) * 100 + DATEPART(Hour, @LowerBound);
	DECLARE @UpperBoundInt INT = Year(@UpperBound) * 1000000 + Month(@UpperBound) * 10000 + Day(@UpperBound) * 100 + DATEPART(Hour, @UpperBound);

	DECLARE @TotalViews INT = (SELECT  COALESCE(SUM(PageViews), 1)
	FROM	{databaseOwner}{objectQualifier}Analytics_Fact_Users WITH (NOLOCK)
	WHERE	UserId = @UserId AND PortalId = @PortalId AND (DateId BETWEEN @LowerBoundInt AND @UpperBoundInt))
	
	SELECT	@SiteTime = COALESCE(SUM(CONVERT(bigint,COALESCE(TimeOnPage, 0))), 0)
	FROM	{databaseOwner}{objectQualifier}Analytics_Fact_Users WITH (NOLOCK)
	WHERE	UserId = @UserId AND Portalid = @PortalId AND (DateId BETWEEN @LowerBoundInt AND @UpperBoundInt)

	SET @AvgTime = COALESCE(@SiteTime / @TotalViews, 0)

	;WITH loginCount AS(
		SELECT	DISTINCT usl.UserId,
				(SELECT		COUNT(*)
				 FROM		{databaseOwner}[{objectQualifier}Mechanics_UserScoringLog] WITH (NOLOCK)
				 WHERE		UserId = usl.UserId AND PortalId = @PortalId AND CreatedOnDate >= @LowerBound AND CreatedOnDate <= @UpperBound) AS Logins
		FROM {databaseOwner}[{objectQualifier}Mechanics_UserScoringLog] usl WITH (NOLOCK)
		RIGHT JOIN {databaseOwner}[{objectQualifier}Mechanics_ScoringActionDefinition] sad WITH (NOLOCK) ON sad.ScoringActionDefId = usl.ScoringActionDefId
		WHERE sad.ActionName = 'Login' AND usl.UserId = @UserId
		GROUP BY usl.UserId)
	SELECT @Logins = COALESCE(SUM(CAST([Logins] AS DECIMAL)), 0) FROM loginCount

	SELECT		@AnswersVotes = COALESCE(SUM(VoteTypeId), 0)
	FROM		{databaseOwner}{objectQualifier}Answers_Vote v
	INNER JOIN	{databaseOwner}{objectQualifier}Answers_Post p ON p.PostId = v.PostId
	WHERE		p.PortalId = @PortalId AND p.CreatedUserId = @UserId

	SELECT		@IdeasVotes = SUM(COALESCE(Votes, 0))
	FROM		{databaseOwner}{objectQualifier}Ideas_Idea i
	INNER JOIN	{databaseOwner}{objectQualifier}ContentItems ci ON ci.ContentItemID = i.ContentItemId
	WHERE		ci.CreatedByUserID = @UserId

	SELECT	@Votes = COALESCE(@AnswersVotes, 0) + COALESCE(@IdeasVotes, 0)

	-- Total it all up.
	DECLARE @Total decimal
	SELECT @Total = {databaseOwner}{objectQualifier}Analytics_Get_Score(
		@PortalId,
		@GoalList,
		COALESCE(@FriendCount, 0),
		COALESCE(@Posts, 0),
		COALESCE(@Likes, 0),
		COALESCE(@ViewCount, 0),
		COALESCE(@Responses, 0),
		COALESCE(@AcceptedAnswers, 0),
		COALESCE(@DeliveredIdeas, 0),
		COALESCE(@ActiveEvents, 0),
		COALESCE(@FlaggedContent, 0),
		COALESCE(@AvgTime, 0),
		COALESCE(@SiteTime, 0),
		COALESCE(@Logins, 0),
		COALESCE(@Votes, 0))

	RETURN COALESCE(@Total, 0)
END
GO

/********************************************************/

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Analytics_Get_DueUserTasks]', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}Analytics_Get_DueUserTasks]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Analytics_Get_DueUserTasks
	@PortalId int
AS
BEGIN
	-- limit retrieved records so that it won't take forever to process them in the scheduler
	SELECT	TOP 1000	up.[PortalId], up.[UserId]
	FROM {databaseOwner}[{objectQualifier}UserPortals] up WITH (NOLOCK)	
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}Analytics_Users] au WITH (NOLOCK) ON up.UserID = au.UserId 		
	WHERE	up.[PortalId] = @PortalId AND ([ProcessDate] IS NULL OR [ProcessDate] <= getutcdate())
	ORDER BY ProcessDate ASC
END
GO