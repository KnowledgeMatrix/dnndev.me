<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ContentLayoutColumnSizesNotValidFormat.Text" xml:space="preserve">
    <value>The Column Sizes value '{0}' is in a not valid format</value>
  </data>
  <data name="ContentLayoutModuleDoesNotExist.Text" xml:space="preserve">
    <value>The Content Layout Module Id {0} does not exist</value>
  </data>
  <data name="ContentLayoutTemplateDoesNotExist.Text" xml:space="preserve">
    <value>The Content Layout Template Id {0} does not exists</value>
  </data>
  <data name="Migration_AddedTabVersionDetail.Text" xml:space="preserve">
    <value>Adding TabVersionDetail for First Version of Tab Id {0} for Content Layout Module Id {1} - TabVersionDetail Id {2}</value>
  </data>
  <data name="Migration_AddingTabVersionDetail.Text" xml:space="preserve">
    <value>Adding TabVersionDetail for First Version of Tab Id {0} for Content Layout Module Id {1}</value>
  </data>
  <data name="Migration_ConfiguredContentLayoutModule.Text" xml:space="preserve">
    <value>Configured Layout for Content Layout Module Id {0} - with size '{1}' and template Id {2}</value>
  </data>
  <data name="Migration_ConfiguringContentLayoutModule.Text" xml:space="preserve">
    <value>Configuring Layout for Content Layout Module Id {0}</value>
  </data>
  <data name="Migration_ContentLayoutCannotBeMappedToTemplate.Text" xml:space="preserve">
    <value>Content Layout Id {0} cannot be mapped to any existing template</value>
  </data>
  <data name="Migration_ContentLayoutUserControlNotFound.Text" xml:space="preserve">
    <value>Content Layout user control cannot be found at expected path '{0}'</value>
  </data>
  <data name="Migration_ConvertedContentLayoutSummary.Text" xml:space="preserve">
    <value>Converted {0} Content Layouts of {1} for Portal {2}</value>
  </data>
  <data name="Migration_ConvertedContentLayoutToModule.Text" xml:space="preserve">
    <value>Converted Content Layout Id {0} to Module Instance</value>
  </data>
  <data name="Migration_ConvertingContentLayoutToModule.Text" xml:space="preserve">
    <value>Converting Content Layout Id {0} to Module Instance</value>
  </data>
  <data name="Migration_CreatedContentLayoutModule.Text" xml:space="preserve">
    <value>Created Module for Content Layout Id {0} - Module Id {1}</value>
  </data>
  <data name="Migration_CreatingContentLayoutModule.Text" xml:space="preserve">
    <value>Creating Module for Content Layout Id {0}</value>
  </data>
  <data name="Migration_DisabledWorkflowVersionTab.Text" xml:space="preserve">
    <value>Disabled Tab Workflow/Versioning for Tab Id {0}</value>
  </data>
  <data name="Migration_DisablingWorkflowVersionTab.Text" xml:space="preserve">
    <value>Disabling Tab Workflow/Versioning for Tab Id {0}</value>
  </data>
  <data name="Migration_EnabledWorkflowVersionTab.Text" xml:space="preserve">
    <value>Enabled Tab Workflow/Versioning for Tab Id {0}</value>
  </data>
  <data name="Migration_EnablingWorkflowVersionTab.Text" xml:space="preserve">
    <value>Enabling Tab Workflow/Versioning for Tab Id {0}</value>
  </data>
  <data name="Migration_EndProcessPortal.Text" xml:space="preserve">
    <value>End process for Portal Id {0}</value>
  </data>
  <data name="Migration_EndProcessTab.Text" xml:space="preserve">
    <value>End process for Tab Id {0}</value>
  </data>
  <data name="Migration_ErrorConvertingContentLayoutToModule.Text" xml:space="preserve">
    <value>Error Converting Content Layout Id {0} to Module Instance</value>
  </data>
  <data name="Migration_ErrorProcessingTab.Text" xml:space="preserve">
    <value>Error Processing Tab Id {0}</value>
  </data>
  <data name="Migration_NoTabVersionFound.Text" xml:space="preserve">
    <value>First Tab Version cannot be found</value>
  </data>
  <data name="Migration_Prefix.Text" xml:space="preserve">
    <value>Content Layout Migration - </value>
  </data>
  <data name="Migration_StartProcessPortal.Text" xml:space="preserve">
    <value>Start process for Portal Id {0}</value>
  </data>
  <data name="Migration_StartProcessTab.Text" xml:space="preserve">
    <value>Start process for Tab Id {0}</value>
  </data>
  <data name="Migration_UpdatedModulePaneName.Text" xml:space="preserve">
    <value>Updated pane name for Modules hosted in the Content Layout Id {0}, Module Id {1} - oldPanePrefix '{2}' to newPanePrefix '{3}'</value>
  </data>
  <data name="Migration_UpdatedPublishStateForFirstContentLayoutModuleVersion.Text" xml:space="preserve">
    <value>Updated Publish state for the first Module Version for Tab Id {0} for Content Layout Module Id {1}</value>
  </data>
  <data name="Migration_UpdatingModulePaneName.Text" xml:space="preserve">
    <value>Updating pane name for Modules hosted in the Content Layout Id {0}, Module Id {1}</value>
  </data>
  <data name="VersionAlreadyExists.Text" xml:space="preserve">
    <value>The Content Layout version '{0}' cannot be added as alreay exist for the module with id '{1}'</value>
  </data>
  <data name="VersionDoesNotExist.Text" xml:space="preserve">
    <value>The Content Layout version '{0}' does not exist for the module with id '{1}'</value>
  </data>
</root>