IF EXISTS (SELECT * FROM {databaseOwner}SYSOBJECTS WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Blogs_Entry_GetByDates]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Blogs_Entry_GetByDates]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Blogs_Entry_GetByDates
	@BlogID INT,
	@PortalId INT,
	@GroupId INT,
	@StartDate DATETIME,
	@AuthorId INT  = -1
AS 
	BEGIN

		SELECT  BE.*
		FROM    {databaseOwner}{objectQualifier}Blogs_Entry BE
		INNER JOIN {databaseOwner}{objectQualifier}Blogs_Blog B
			ON BE.BlogId = B.BlogId
		INNER JOIN {databaseOwner}{objectQualifier}ContentItems CI 
			ON BE.ContentItemId = CI.ContentItemID
		WHERE B.PortalId = @PortalId
			AND ((BE.BlogID = @BlogID AND @BlogID > 0) OR (BE.BlogID > 0 AND @BlogID <= 0))
			AND ((B.GroupID = @GroupId) OR (B.GroupID is NULL AND @GroupId < 0))
			AND (@AuthorId = -1 OR CI.CreatedByUserID = @AuthorId)
			AND BE.Approved = 1
			AND B.Authorized = 1
			AND BE.PublishOnDate BETWEEN @StartDate AND GetUtcDate()
	END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Blogs_Entry_Search') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Blogs_Entry_Search
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Blogs_Entry_Search
	@UserID INT,
	@ModuleId INT ,
	@BlogID INT ,
	@StartDate DATETIME ,
	@EndDate DATETIME ,
	@Tags NVARCHAR(1024) ,
	@PageSize INT ,
	@PageIndex INT ,
	@ShowUnpublished BIT ,
	@Filter INT,
	@GroupId INT,
	@AuthorId INT  = -1
AS 
	BEGIN

		WITH    EntrySet
				  AS ( SELECT   ROW_NUMBER() OVER ( ORDER BY E.Pinned DESC, E.PublishOnDate DESC ) AS RowNumber ,
								COUNT(*) OVER () AS [TotalRecords],
								E.* ,
								B.PortalId ,
								B.UserId ,
								B.Authorized ,
								B.GroupId,
								CI.Content ,
								CI.ContentTypeID ,
								CI.TabID ,
								CI.ModuleID ,
								CI.ContentKey ,
								CI.Indexed ,
								CI.CreatedByUserID ,
								CI.[CreatedOnDate] ,
								CI.LastModifiedByUserID ,
								CI.[LastModifiedOnDate] ,
								CIMD.[MetaDataValue] AS [ContentTitle]
					   FROM     {databaseOwner}{objectQualifier}Blogs_Blog B
								INNER JOIN {databaseOwner}{objectQualifier}Blogs_Entry E ON B.BlogId = E.BlogId
								INNER JOIN {databaseOwner}{objectQualifier}ContentItems CI ON E.ContentItemId = CI.ContentItemID
								LEFT OUTER JOIN {databaseOwner}[{objectQualifier}ContentItems_MetaData] CIMD 
									ON CIMD.ContentItemID = e.[ContentItemID]
										AND CIMD.MetaDataID = 
										(SELECT MetaDataID FROM {databaseOwner}[{objectQualifier}MetaData] WHERE MetaDataName = 'Title')

					   WHERE    CI.ModuleID = @ModuleId
								AND ( @GroupId < 1 OR B.GroupId = @GroupId)
								AND ( @BlogID < 1 OR B.BlogId = @BlogID)
								
								AND 
								(
									(@Filter = 0 AND E.PublishOnDate BETWEEN @StartDate AND @EndDate) 
										OR
									(@Filter = 1 AND B.BlogId IN (SELECT BlogId FROM {databaseOwner}{objectQualifier}Blogs_Blog BL WHERE BL.UserId = @UserID)
									 ) 
										OR
									(@Filter = 2 AND EXISTS (SELECT TOP 1
																	e.EntryId,
																	j.ContentItemId ,
																	j.ObjectKey ,
																	jc.CommentId ,
																	jc.UserId
																	FROM {databaseOwner}{objectQualifier}Journal_Comments AS jc
																	INNER JOIN {databaseOwner}{objectQualifier}Journal AS j ON jc.JournalId = j.JournalId
																	INNER JOIN {databaseOwner}{objectQualifier}Blogs_Entry AS e ON j.ContentItemId = e.ContentItemId
																WHERE   E.ContentItemId = CI.ContentItemID AND jc.UserId = @UserID
															)
									)
										OR
									(@Filter = 3 AND CI.CreatedByUserID = @AuthorId
									 ) 
								)
								
								
								AND (@ShowUnpublished = 1 OR (E.PublishOnDate > getutcdate() OR (Authorized = 1 AND E.Approved = 1)))

								AND 
								(
									(@Tags IS NULL OR LEN(@Tags) = 0) 
									
									OR
																
									(SELECT COUNT(*) FROM {databaseOwner}[{objectQualifier}ContentItems_Tags] CIT
										INNER JOIN {databaseOwner}[{objectQualifier}Taxonomy_Terms] TT ON CIT.TermID = TT.TermID
										INNER JOIN {databaseOwner}[{objectQualifier}ConvertListToTable](',', @Tags) T ON TT.Name = T.RowValue
										WHERE CIT.ContentItemID = E.ContentItemId
									) = (SELECT LEN(@Tags) - LEN(REPLACE(@Tags, ',', ''))+ 1)
								)
						)
			SELECT  *
			FROM    EntrySet
			WHERE   RowNumber BETWEEN ( @PageIndex * @PageSize + 1 )
							  AND     ( ( @PageIndex + 1 ) * @PageSize )		
	END
GO

/********************************************************
 * SPROC: Blogs_Blog_GetByPortalAndUserAndGroup => added
 * SPROC: Blogs_Blog_GetByPortal                => removed
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Blogs_Blog_GetByPortal]', N'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Blogs_Blog_GetByPortal
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Blogs_Blog_GetByPortalAndUserAndGroup]', N'P') IS NULL
	EXEC('CREATE PROCEDURE {databaseOwner}[{objectQualifier}Blogs_Blog_GetByPortalAndUserAndGroup] AS BEGIN SELECT 1 END');
GO

ALTER PROCEDURE {databaseOwner}[{objectQualifier}Blogs_Blog_GetByPortalAndUserAndGroup]
	@PortalId INT,
	@UserId INT,
	@GroupId INT
AS
	SELECT  B.*,
			U.UserName,
			U.DisplayName,
			( SELECT    COUNT(BlogId)
			  FROM      {databaseOwner}{objectQualifier}Blogs_Entry E
			  WHERE     E.BlogId = B.BlogId
						AND E.Approved = 1 AND E.PublishOnDate <= GETUTCDATE()
			) AS BlogPostCount
	FROM    {databaseOwner}{objectQualifier}Blogs_Blog B WITH (NOLOCK)
				INNER JOIN {databaseOwner}{objectQualifier}Users U WITH (NOLOCK) ON B.UserId = U.UserID
	WHERE   U.UserId = @UserId
	  AND   PortalId = @PortalId
	  AND   GroupId = @GroupId
	ORDER BY Title
GO


IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Blogs_Entry_GetSearchable]', N'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}{objectQualifier}Blogs_Entry_GetSearchable
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Blogs_Entry_GetSearchable]
	@ModuleID INT,
	@StartDate DATETIME,
	@EndDate DATETIME,
	@StartDateUTC DATETIME,
	@EndDateUTC DATETIME
AS
	SELECT  E.* ,
			B.UserId ,
			B.PortalId,
			(CASE B.GroupId WHEN NULL THEN -1 ELSE B.GroupId END) AS [GroupId],
			CI.CreatedByUserID ,
			CI.CreatedOnDate ,
			CI.ContentKey ,
			CI.Indexed ,
			CI.Content ,
			CI.ContentItemID ,
			CI.LastModifiedByUserID ,
			CI.LastModifiedOnDate ,
			CI.ModuleID ,
			CI.TabID ,
			CI.ContentTypeID ,
			COUNT(*) OVER () AS TotalRecords,
			CIMD.[MetaDataValue] AS [ContentTitle]
	FROM    {databaseOwner}{objectQualifier}Blogs_Entry E
			INNER JOIN {databaseOwner}{objectQualifier}Blogs_Blog B ON B.BlogId = E.BlogId
			INNER JOIN {databaseOwner}{objectQualifier}ContentItems CI ON E.ContentItemId = CI.ContentItemID
			LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems_MetaData CIMD ON CIMD.ContentItemID = E.ContentItemId
				AND CIMD.MetaDataID = (SELECT MetaDataID FROM {databaseOwner}[{objectQualifier}MetaData] WHERE MetaDataName = 'Title')
	WHERE   CI.ModuleID = @ModuleID
			AND B.Authorized = 1
			AND
			(
			  (LastModifiedOnDate >= @StartDate AND LastModifiedOnDate <= @EndDate 
					AND E.PublishOnDate <= @EndDateUTC)
			  OR 
			  (
				E.PublishOnDate >= @StartDateUTC AND E.PublishOnDate <= @EndDateUTC 
			  )
			  OR
			  (										
			    (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}Journal_Comments JC 
				 WHERE JC.[JournalId] IN (SELECT JournalId FROM {databaseOwner}{objectQualifier}Journal J WHERE J.[ContentItemId] = E.[ContentItemId]) 
				  AND 
				  ((JC.[DateCreated] >= @StartDateUTC AND JC.[DateCreated] <= @EndDateUTC)
				    OR
				  (JC.[DateUpdated] >= @StartDateUTC AND JC.[DateUpdated] <= @EndDateUTC)
				  )
				) > 0 
			  )
			)

	ORDER BY E.Pinned DESC
GO


/********************************************************
 * SPROC: Blogs_Blog_GetRoster
 ********************************************************/
IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}Blogs_Blog_GetRoster]', N'P') IS NULL
	EXEC('CREATE PROCEDURE {databaseOwner}[{objectQualifier}Blogs_Blog_GetRoster] AS BEGIN SELECT 1 END');
GO

ALTER PROCEDURE {databaseOwner}[{objectQualifier}Blogs_Blog_GetRoster]
    @ModuleId INT,
    @GroupId INT,
	@PortalId INT
AS
BEGIN
	SELECT @GroupId = Coalesce(@GroupId, -1);

    SELECT  B.* ,
            ( SELECT    COUNT(BlogId)
              FROM      {databaseOwner}[{objectQualifier}Blogs_Entry]
              WHERE     BlogId = B.BlogId
                        AND Approved = 1
                        AND PublishOnDate <= GETUTCDATE()
            ) AS BlogPostCount
    FROM    {databaseOwner}[{objectQualifier}Blogs_Blog] B
    WHERE   B.PortalId = @PortalId
	  AND	B.BlogId IN (
				SELECT BB.BlogId FROM  {databaseOwner}[{objectQualifier}Blogs_Blog] BB
				LEFT JOIN {databaseOwner}[{objectQualifier}Blogs_Entry] E ON B.BlogId = E.BlogId
				LEFT JOIN {databaseOwner}[{objectQualifier}ContentItems] CI ON E.ContentItemId = CI.ContentItemID
				WHERE (( CI.ModuleId = @ModuleId ) OR ( CI.ModuleId IS NULL ))
				  AND (( @GroupId < 1 AND (BB.GroupId < 1 OR BB.GroupId IS NULL)) OR ( BB.GroupId = @GroupId ))
			)

    ORDER BY Title ASC
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}Blogs_Settings_RemoveOlderTemplates') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Blogs_Settings_RemoveOlderTemplates;
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Blogs_Settings_RemoveOlderTemplates]
AS
BEGIN
	DELETE FROM    {databaseOwner}[{objectQualifier}Blogs_Setting] 
    WHERE  [KEY] IN ('BLOG_LISTITEMTEMPLATE', 'BLOG_DETAILITEMTEMPLATE')
END
GO