<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EntrySummary.Text" xml:space="preserve">
    <value>Summary</value>
  </data>
  <data name="lblRecentEntriesMax.Help" xml:space="preserve">
    <value>The maximum number of blog entries that will be displayed in any given view of the module at a single time.  The initial view of the module will only permit this number of items to be displayed.</value>
  </data>
  <data name="lblRecentEntriesMax.Text" xml:space="preserve">
    <value>Page Size</value>
  </data>
  <data name="lblSummary.Help" xml:space="preserve">
    <value>Enter the desired cutoff in characters for the auto-generated summary of blog entries.  To set no limit, enter a value of 0.  Use the advanced option labeled Enforce Summary Truncation to also truncate entries with summaries.  The default is to only truncate auto-generated summaries.</value>
  </data>
  <data name="lblSummary.Text" xml:space="preserve">
    <value>Limit Auto-Generated Entry Summary to</value>
  </data>
  <data name="lblMandatory.Text" xml:space="preserve">
    <value>Make Entry Summary Mandatory</value>
  </data>
  <data name="lblMandatory.Help" xml:space="preserve">
    <value>When entering a blog entry, this setting forces the user to enter a summary of their blog entry.</value>
  </data>
  <data name="lblShowSummary.Text" xml:space="preserve">
    <value>Include Summary in Entry</value>
  </data>
  <data name="lblShowSummary.Help" xml:space="preserve">
    <value>If this option is enabled, the summary (if available) will be shown on the top of the single entry view.</value>
  </data>
  <data name="secAdvancedSeetings.Text" xml:space="preserve">
    <value>Advanced Settings</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;Blogs - Module Options&lt;/h1&gt;</value>
  </data>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>Blogs</value>
  </data>
  <data name="lblPageBlogs.Text" xml:space="preserve">
    <value>Personal Blog Page</value>
  </data>
  <data name="lblPageBlogs.Help" xml:space="preserve">
    <value>Select the blog which should be used on this tab. For a general Blog page please don't select a specific Blog</value>
  </data>
  <data name="tblAdvancedSettings.Text" xml:space="preserve">
    <value>Advanced Settings</value>
  </data>
  <data name="lblEnforceSummaryTruncation.Text" xml:space="preserve">
    <value>Enforce Entry Summary Limit</value>
  </data>
  <data name="lblEnforceSummaryTruncation.Help" xml:space="preserve">
    <value>Checking this option will cause both auto-generated and actual entry summaries to be truncated based on the value entered in the 'Limit Entry Summary To' setting above.</value>
  </data>
  <data name="lblIncludeBody.Help" xml:space="preserve">
    <value>Include body of post if requested through body=true</value>
  </data>
  <data name="lblIncludeBody.Text" xml:space="preserve">
    <value>Include Body</value>
  </data>
  <data name="lblAllowSummaryHtml.Help" xml:space="preserve">
    <value>If checked allows user to enter post summary with markup</value>
  </data>
  <data name="lblAllowSummaryHtml.Text" xml:space="preserve">
    <value>Allow Summary HTML</value>
  </data>
  <data name="lblAllowWLW.Help" xml:space="preserve">
    <value>If checked users will be able to use Windows Live Writer (or other remote blogging tools that use the MetaWeblog API) to post and edit blog posts.</value>
  </data>
  <data name="lblAllowWLW.Text" xml:space="preserve">
    <value>Allow Windows Live Writer</value>
  </data>
  <data name="lblEnableArchiveDropDown.Help" xml:space="preserve">
    <value>If checked, the list of archived months will be displayed as a drop down list instead of a data list (default).</value>
  </data>
  <data name="lblEnableArchiveDropDown.Text" xml:space="preserve">
    <value>Use Drop Down List For Archive</value>
  </data>
  <data name="lblUseWLWExcerpt.Help" xml:space="preserve">
    <value>If selected then in WLW the user can use the Excerpt textbox at the bottom to create a summary of the post in plain text. Any split in the post will be ignored and the excerpt will be used instead. This is useful if you want to ensure the summaries are text only (i.e. not HTML).</value>
  </data>
  <data name="lblUseWLWExcerpt.Text" xml:space="preserve">
    <value>Use Excerpt in Windows Live Writer</value>
  </data>
  <data name="secWLWSettings.Text" xml:space="preserve">
    <value>Windows Live Writer</value>
  </data>
  <data name="lblPortalFiles.Help" xml:space="preserve">
    <value>Files specific to your portal (under [portal home directory]/Blog/Include)</value>
  </data>
  <data name="lblPortalFiles.Text" xml:space="preserve">
    <value>Files on portal</value>
  </data>
  <data name="lblCatVocabRoot.Help" xml:space="preserve">
    <value>A portal level vocabulary root must be specified in order for categories to be available to bloggers for selection.</value>
  </data>
  <data name="lblCatVocabRoot.Text" xml:space="preserve">
    <value>Category Vocabulary Root</value>
  </data>
  <data name="NoneSpecified.Text" xml:space="preserve">
    <value>None Specified</value>
  </data>
  <data name="BasicSettings.Text" xml:space="preserve">
    <value>Basic Settings</value>
  </data>
  <data name="secMisc.Text" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="AddThis.Text" xml:space="preserve">
    <value>AddThis</value>
  </data>
  <data name="Default.Text" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="None.Text" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="FileManagement.Text" xml:space="preserve">
    <value>File Management</value>
  </data>
  <data name="Disqus.Text" xml:space="preserve">
    <value>Disqus</value>
  </data>
  <data name="lblCommentMode.Help" xml:space="preserve">
    <value>Choose to allow or disallow commenting. Each individual blog entry can disable comments if need be.</value>
  </data>
  <data name="lblCommentMode.Text" xml:space="preserve">
    <value>Comment Mode</value>
  </data>
  <data name="lblMode.Help" xml:space="preserve">
    <value>The mode the module should operate in, normal or Groups (Groups mode associates each blog entry and blog with a group in addition to a module instance).</value>
  </data>
  <data name="lblMode.Text" xml:space="preserve">
    <value>Mode</value>
  </data>
  <data name="liGroup.Text" xml:space="preserve">
    <value>Group</value>
  </data>
  <data name="liNormal.Text" xml:space="preserve">
    <value>Normal</value>
  </data>
  <data name="Templates.Text" xml:space="preserve">
    <value>Template Settings</value>
  </data>
  <data name="lblDetailItemTemplate.Text" xml:space="preserve">
    <value>Detail View Template</value>
  </data>
  <data name="lblListItemTemplate.Text" xml:space="preserve">
    <value>List Row Template</value>
  </data>
  <data name="lblModerateComments.Help" xml:space="preserve">
    <value>If checked each new comment will need to be approved before users, other than moderators, can see the comment. If not checked, all new comments will be immediately approved and available for viewing by users. If this setting is toggled from on to off, all previously unapproved comments will still need to be manually approved prior to public display.</value>
  </data>
  <data name="lblModerateComments.Text" xml:space="preserve">
    <value>Moderate Comments</value>
  </data>
  <data name="TemplateTokenHelp.Text" xml:space="preserve">
    <value>&lt;p style="margin: 0 0 10px 0"&gt;
                    &lt;b&gt;Supported Tokens:&lt;/b&gt;
                &lt;/p&gt;
                &lt;ul&gt;
                    &lt;li&gt;&lt;b&gt;[ENTRY:IMAGE]&lt;/b&gt; - Blog Entry Summary Image&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;[ENTRY:DETAILESURL]&lt;/b&gt; - Blog Entry Detail View Link&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;[ENTRY:TITLE]&lt;/b&gt; - Blog Entry Title&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;[ENTRY:PUBLISHONDATEDISPLAY]&lt;/b&gt; - Blog Entry Published Date&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;[ENTRY:COMMENTCOUNT]&lt;/b&gt; - The count of Blog Entry's Comments&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;[ENTRY:DECODEDSUMMARY]&lt;/b&gt; - The Summary of Blog Entry, if allow html summary, it is html, otherwise it is plain text&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;[ENTRY:CONTENT]&lt;/b&gt; - Blog Entry Content &lt;b&gt;(NOT SUPPORTED in list row template)&lt;/b&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;[ENTRY:LIKESTRING]&lt;/b&gt; - Blog Entry Like List &lt;b&gt;(NOT SUPPORTED in list row template)&lt;/b&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;[ENTRY:VIEWS]&lt;/b&gt; - The count of Blog Entry's views&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;[ENTRY:TAGS]&lt;/b&gt; - Blog Entry's tags&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;[AUTHOR:AVATAR]&lt;/b&gt; - Blog Entry Author's avatar, 40x40 size&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;[AUTHOR:PROFILEURL]&lt;/b&gt; - Blog Entry Author's profile url&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;[AUTHOR:DISPLAYNAME]&lt;/b&gt; - Blog Entry Author's display name&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;[AUTHOR:BIOGRAPHY]&lt;/b&gt; - Blog Entry Author's biography&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;[SOCIAL:LIKEBUTTON]&lt;/b&gt; - Blog Entry like button&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;[SOCIAL:BOOKMARKBUTTON]&lt;/b&gt; - Blog Entry bookmark button&lt;/li&gt;
                    &lt;li&gt;&lt;b&gt;[SOCIAL:SUBSCRIBEBUTTON]&lt;/b&gt; - Blog Entry subsribe button&lt;/li&gt;
                &lt;/ul&gt;</value>
  </data>
  <data name="InlineLogin.Text" xml:space="preserve">
    <value>Inline Login/Registration</value>
  </data>
  <data name="FieldIsRequired.Text" xml:space="preserve">
    <value>The field is required</value>
  </data>
</root>